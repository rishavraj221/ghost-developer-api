const json_response =
  '{"codes":[{"layer":"api","fileName":"models/GameStats.js","isNewFile":true,"code":"const mongoose = require(\'mongoose\');\\n\\nconst gameStatsSchema = new mongoose.Schema({\\n  player: {\\n    type: String,\\n    enum: [\'X\', \'O\'],\\n    required: true\\n  },\\n  wins: {\\n    type: Number,\\n    default: 0\\n  }\\n}, {\\n  timestamps: true\\n});\\n\\nmodule.exports = mongoose.model(\'GameStats\', gameStatsSchema);"},{"layer":"api","fileName":"routes/gameStats.js","isNewFile":true,"code":"const express = require(\'express\');\\nconst router = express.Router();\\nconst GameStats = require(\'../models/GameStats\');\\n\\n// Route to get the current win stats\\nrouter.get(\'/\', async (req, res) => {\\n  try {\\n    const stats = await GameStats.find();\\n    res.json(stats);\\n  } catch (error) {\\n    res.status(500).json({ message: error.message });\\n  }\\n});\\n\\n// Route to update win stats for a player\\nrouter.post(\'/win\', async (req, res) => {\\n  const { player } = req.body;\\n  if (![\'X\', \'O\'].includes(player)) {\\n    return res.status(400).json({ message: \'Invalid player\' });\\n  }\\n\\n  try {\\n    let stats = await GameStats.findOne({ player });\\n    if (!stats) {\\n      stats = new GameStats({ player, wins: 1 });\\n    } else {\\n      stats.wins += 1;\\n    }\\n    await stats.save();\\n    res.json(stats);\\n  } catch (error) {\\n    res.status(500).json({ message: error.message });\\n  }\\n});\\n\\nmodule.exports = router;"},{"layer":"api","fileName":"index.js","isNewFile":false,"code":"const gameStatsRouter = require(\'./routes/gameStats\');\\n\\napp.use(\'/api/game-stats\', gameStatsRouter);"},{"layer":"ui","fileName":"src/redux/services/base-app/endpoints/gameStatsEPFactory.js","isNewFile":true,"code":"export const getGameStats = (builder) =>\\n  builder.query({\\n    query: () => \'game-stats\',\\n  });\\n\\nexport const updateGameStats = (builder) =>\\n  builder.mutation({\\n    query: ({ player }) => ({\\n      url: \'game-stats/win\',\\n      method: \'POST\',\\n      body: { player },\\n    }),\\n  });"},{"layer":"ui","fileName":"src/redux/services/base-app/endpoints/index.js","isNewFile":false,"code":"export {\\n  getGameStats as getGameStatsEPFactory,\\n  updateGameStats as updateGameStatsEPFactory,\\n} from \'./gameStatsEPFactory\';"},{"layer":"ui","fileName":"src/redux/services/base-app/base-app.api.js","isNewFile":false,"code":"import {\\n  getGameStatsEPFactory,\\n  updateGameStatsEPFactory,\\n} from \'./endpoints\';\\n\\n// Add the new endpoints to baseApi\\ngameStats: getGameStatsEPFactory(builder),\\nupdateGameStats: updateGameStatsEPFactory(builder),\\n\\n// Export hooks for using the new endpoints\\nexport const {\\n  useGetGameStatsQuery,\\n  useUpdateGameStatsMutation,\\n} = baseApi;"},{"layer":"ui","fileName":"src/app/game/page.js","isNewFile":false,"code":"import { useGetGameStatsQuery, useUpdateGameStatsMutation } from \'@/redux/services/base-app\';\\n\\nexport default function TicTacToe() {\\n  // ... existing code ...\\n\\n  const { data: gameStats } = useGetGameStatsQuery();\\n  const [updateGameStats] = useUpdateGameStatsMutation();\\n\\n  const winner = calculateWinner(board, dispatch);\\n\\n  // Call updateGameStats when a winner is determined\\n  if (winner) {\\n    updateGameStats({ player: winner });\\n  }\\n\\n  return (\\n    <AuthenticatedPageContainer>\\n      {/* ... existing UI ... */}\\n\\n      {/* Display the win counts */}\\n      <Typography variant=\\"h6\\" align=\\"center\\" gutterBottom>\\n        X Wins: {gameStats?.find(stat => stat.player === \'X\')?.wins || 0} <br />\\n        O Wins: {gameStats?.find(stat => stat.player === \'O\')?.wins || 0}\\n      </Typography>\\n\\n      {/* ... existing UI ... */}\\n    </AuthenticatedPageContainer>\\n  );\\n}"}]}';

console.log(JSON.stringify(JSON.parse(json_response), null, 2));
