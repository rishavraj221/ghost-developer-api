[
  {
    "folder_path": "",
    "module_name": "index.js",
    "method_name": "connectToDB",
    "input_params": [],
    "logic": "This function checks the current MongoDB connection state. If there is no active connection (indicated by a state of 0), it attempts to connect to the MongoDB database using Mongoose. If the connection is successful, it logs a success message; if it fails, it logs an error message and throws a new error indicating the failure of the database connection.",
    "inner_function_calls": [
      {
        "name": "connect",
        "import_path": "mongoose"
      },
      {
        "name": "console.log",
        "import_path": "console"
      },
      {
        "name": "console.error",
        "import_path": "console"
      }
    ],
    "output": {
      "type": "undefined",
      "description": "This function does not return a value, it either establishes a connection or throws an error if it fails."
    }
  },
  {
    "folder_path": "",
    "module_name": "index.js",
    "method_name": "handler",
    "input_params": [
      {
        "type": "object",
        "name": "event",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "context",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "This function serves as an AWS Lambda handler. It first sets the context property `callbackWaitsForEmptyEventLoop` to false to prevent the function from waiting for the Node.js event loop to be empty before finishing. It then calls the `connectToDB` function to ensure that a database connection is established before the main operation. Finally, it executes and returns the Express app's handler, passing the event and context from the Lambda invocation.",
    "inner_function_calls": [
      {
        "name": "connectToDB",
        "import_path": ""
      },
      {
        "name": "app",
        "import_path": "./src/app.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The return value of this function is the result of the Express app handler, which typically is a response object based on the request processed by the app."
    }
  },
  {
    "folder_path": "src",
    "module_name": "app.js",
    "method_name": "app.use",
    "input_params": [
      {
        "type": "function",
        "name": "middleware",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "The 'app.use' method is invoked multiple times to register various middleware functions that handle requests to the server. Middleware functions are executed sequentially in the order they are defined, and they can modify the request and response objects, end the request-response cycle, or call the next middleware in the stack.",
    "inner_function_calls": [
      {
        "name": "helmet",
        "import_path": "helmet"
      },
      {
        "name": "cors",
        "import_path": "cors"
      },
      {
        "name": "morgan",
        "import_path": "morgan"
      },
      {
        "name": "express.json",
        "import_path": "express"
      }
    ],
    "output": {
      "type": "null",
      "description": "The output is not explicitly returned as this sets up middleware for the Express application."
    }
  },
  {
    "folder_path": "src",
    "module_name": "app.js",
    "method_name": "express.json",
    "input_params": [],
    "logic": "This function is built into the Express framework and is used to parse incoming JSON requests. When used, it creates a middleware function that parses the request body as JSON and exposes the resulting object on 'req.body'.",
    "inner_function_calls": [],
    "output": {
      "type": "function",
      "description": "Returns a middleware function that parses JSON in requests."
    }
  },
  {
    "folder_path": "src",
    "module_name": "app.js",
    "method_name": "app.use((req, res, next) => {...})",
    "input_params": [
      {
        "type": "function",
        "name": "middleware",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This inline middleware function handles CORS preflight requests and sets appropriate headers on the response, allowing web browsers to facilitate cross-origin requests. It also efficiently handles OPTIONS requests by responding with a 204 status code and invoking 'next()' to pass control to the next middleware in the stack for other request types.",
    "inner_function_calls": [],
    "output": {
      "type": "null",
      "description": "The output is not explicitly returned as this registers middleware for handling CORS preflight requests."
    }
  },
  {
    "folder_path": "src",
    "module_name": "app.js",
    "method_name": "app.use('/get-token', cognitoRoutes)",
    "input_params": [
      {
        "type": "string",
        "name": "route",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "router",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This method mounts the 'cognitoRoutes' router onto the path '/get-token'. As a result, all HTTP requests with this path will be handled by the routes defined in 'cognitoRoutes'.",
    "inner_function_calls": [],
    "output": {
      "type": "null",
      "description": "The output is null as it configures a route for the application."
    }
  },
  {
    "folder_path": "src",
    "module_name": "app.js",
    "method_name": "app.use('/', homeRoutes)",
    "input_params": [
      {
        "type": "string",
        "name": "route",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "router",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This method mounts the 'homeRoutes' router onto the root path '/'. Any requests that match this path will be handled by the defined routes in 'homeRoutes'.",
    "inner_function_calls": [],
    "output": {
      "type": "null",
      "description": "The output is null as it configures a route for the application."
    }
  },
  {
    "folder_path": "src",
    "module_name": "app.js",
    "method_name": "app.use(`${API_PREFIX}/album`, albumRoutes)",
    "input_params": [
      {
        "type": "string",
        "name": "route",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "router",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This method mounts the 'albumRoutes' router onto the path configured with 'API_PREFIX/album'. Requests to this path will trigger the handling logic defined in 'albumRoutes'.",
    "inner_function_calls": [],
    "output": {
      "type": "null",
      "description": "The output is null as it configures a route for the application."
    }
  },
  {
    "folder_path": "src",
    "module_name": "app.js",
    "method_name": "app.use(`${API_PREFIX}/folder`, folderRoutes)",
    "input_params": [
      {
        "type": "string",
        "name": "route",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "router",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This method mounts the 'folderRoutes' router onto the path configured with 'API_PREFIX/folder'. Similar to above, this sets up request handling for this endpoint.",
    "inner_function_calls": [],
    "output": {
      "type": "null",
      "description": "The output is null as it configures a route for the application."
    }
  },
  {
    "folder_path": "src",
    "module_name": "app.js",
    "method_name": "app.use(`${API_PREFIX}/rbac/users`, rbacUserRoutes)",
    "input_params": [
      {
        "type": "string",
        "name": "route",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "router",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This method mounts the 'rbacUserRoutes' router onto the path configured with 'API_PREFIX/rbac/users', directing requests on this endpoint to be handled by the defined 'rbacUserRoutes'.",
    "inner_function_calls": [],
    "output": {
      "type": "null",
      "description": "The output is null as it configures a route for the application."
    }
  },
  {
    "folder_path": "src",
    "module_name": "app.js",
    "method_name": "app.use(`${API_PREFIX}/face`, faceRoutes)",
    "input_params": [
      {
        "type": "string",
        "name": "route",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "router",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This method mounts the 'faceRoutes' router onto the path configured with 'API_PREFIX/face', facilitating requests to be routed to 'faceRoutes' logic.",
    "inner_function_calls": [],
    "output": {
      "type": "null",
      "description": "The output is null as it configures a route for the application."
    }
  },
  {
    "folder_path": "src",
    "module_name": "app.js",
    "method_name": "app.use(`${API_PREFIX}/guest`, guestRoutes)",
    "input_params": [
      {
        "type": "string",
        "name": "route",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "router",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This method mounts the 'guestRoutes' router onto the path configured with 'API_PREFIX/guest', directing corresponding HTTP requests to 'guestRoutes'.",
    "inner_function_calls": [],
    "output": {
      "type": "null",
      "description": "The output is null as it configures a route for the application."
    }
  },
  {
    "folder_path": "src",
    "module_name": "app.js",
    "method_name": "app.use(`${API_PREFIX}/rekognition`, rekognitionRoutes)",
    "input_params": [
      {
        "type": "string",
        "name": "route",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "router",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This method mounts the 'rekognitionRoutes' router onto the path configured with 'API_PREFIX/rekognition', directing requests to this endpoint to the handling logic in 'rekognitionRoutes'.",
    "inner_function_calls": [],
    "output": {
      "type": "null",
      "description": "The output is null as it configures a route for the application."
    }
  },
  {
    "folder_path": "src",
    "module_name": "app.js",
    "method_name": "app.use(`${API_PREFIX}/image`, customImagesRoutes)",
    "input_params": [
      {
        "type": "string",
        "name": "route",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "router",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This method mounts the 'customImagesRoutes' router onto the path configured with 'API_PREFIX/image', sending requests on this path to 'customImagesRoutes'.",
    "inner_function_calls": [],
    "output": {
      "type": "null",
      "description": "The output is null as it configures a route for the application."
    }
  },
  {
    "folder_path": "src",
    "module_name": "app.js",
    "method_name": "app.use(`${API_PREFIX}/custom-recognition`, customRecognitionRoutes)",
    "input_params": [
      {
        "type": "string",
        "name": "route",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "router",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This method mounts the 'customRecognitionRoutes' router onto the path configured with 'API_PREFIX/custom-recognition', routing incoming requests to 'customRecognitionRoutes'.",
    "inner_function_calls": [],
    "output": {
      "type": "null",
      "description": "The output is null as it configures a route for the application."
    }
  },
  {
    "folder_path": "src",
    "module_name": "app.js",
    "method_name": "app.use(`${API_PREFIX}/cluster`, clusterRoutes)",
    "input_params": [
      {
        "type": "string",
        "name": "route",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "router",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This method mounts the 'clusterRoutes' router onto the path configured with 'API_PREFIX/cluster', allowing this endpoint's requests to be processed by 'clusterRoutes'.",
    "inner_function_calls": [],
    "output": {
      "type": "null",
      "description": "The output is null as it configures a route for the application."
    }
  },
  {
    "folder_path": "src",
    "module_name": "app.js",
    "method_name": "app.use(`${API_PREFIX}/filter-image`, filterImageRoutes)",
    "input_params": [
      {
        "type": "string",
        "name": "route",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "router",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This method mounts the 'filterImageRoutes' router onto the path configured with 'API_PREFIX/filter-image', enabling requests on this path to reach 'filterImageRoutes' processing logic.",
    "inner_function_calls": [],
    "output": {
      "type": "null",
      "description": "The output is null as it configures a route for the application."
    }
  },
  {
    "folder_path": "src/config",
    "module_name": "index.js",
    "method_name": "participants_collection_name",
    "input_params": [
      {
        "type": "string",
        "name": "collectionId",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function takes a collectionId as a parameter and returns a string that combines a prefix (from the environment variable PARTICIPANTS_COLLECTION_PREFIX) with the collectionId, converting the collectionId to a string format.",
    "inner_function_calls": [],
    "output": {
      "type": "string",
      "description": "The full name of the participants collection in the database, consisting of the prefix and the collection ID."
    }
  },
  {
    "folder_path": "src/config",
    "module_name": "index.js",
    "method_name": "images_collection_name",
    "input_params": [
      {
        "type": "string",
        "name": "collectionId",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function works similarly to participants_collection_name, where it constructs the name of an images collection by concatenating a prefix (from the environment variable IMAGES_COLLECTION_PREFIX) with the provided collectionId, which is also converted to a string.",
    "inner_function_calls": [],
    "output": {
      "type": "string",
      "description": "The complete name of the images collection in the database, which consists of the prefix and the collection ID."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "album.js",
    "method_name": "getAllAlbums",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function retrieves all albums associated with the current user by calling the getAllAlbumsService service and sends the result back to the client as a JSON response.",
    "inner_function_calls": [
      {
        "name": "getAllAlbumsService",
        "import_path": "../services/album.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns a JSON object containing all albums for the authenticated user."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "album.js",
    "method_name": "getAlbum",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function retrieves a specific album using its ID from the request parameters and the user's email. It checks if the album exists and handles unauthorized access before sending the album data as a JSON response.",
    "inner_function_calls": [
      {
        "name": "getAlbumService",
        "import_path": "../services/album.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns the album object in JSON format or an error message if the album is not found or access is unauthorized."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "album.js",
    "method_name": "getAlbumOwner",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function retrieves the owner of a specific album using its ID from the request parameters and sends the owner information as a JSON response back to the client.",
    "inner_function_calls": [
      {
        "name": "getAlbumOwnerService",
        "import_path": "../services/album.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns the owner details of the requested album in JSON format."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "album.js",
    "method_name": "getAlbumSharedUsers",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function retrieves the users with whom the album is shared. It also optionally checks if results should include embedded data based on the query parameter and sends the result as a JSON response.",
    "inner_function_calls": [
      {
        "name": "getAlbumSharedUsersService",
        "import_path": "../services/album.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns a list of users who have access to the shared album."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "album.js",
    "method_name": "createAlbum",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function creates a new album by calling the createAlbumService with the data from the request body and the current user's information. It then returns the newly created album as a JSON response.",
    "inner_function_calls": [
      {
        "name": "createAlbumService",
        "import_path": "../services/album.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns the created album object in JSON format."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "album.js",
    "method_name": "shareAlbum",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function shares an album with users by their email addresses provided in the request body. It validates that at least one email is supplied before calling shareAlbumService to handle the sharing process. The result is sent back as a JSON response.",
    "inner_function_calls": [
      {
        "name": "shareAlbumService",
        "import_path": "../services/album.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns the sharing status and information of the album in JSON format."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "album.js",
    "method_name": "updateAlbum",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function updates the details of an album using its ID and the updated data from the request body. It then returns the updated album information as a JSON response.",
    "inner_function_calls": [
      {
        "name": "updateAlbumService",
        "import_path": "../services/album.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns the updated album object in JSON format."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "album.js",
    "method_name": "softDelete",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function performs a soft delete of an album by using its ID and the current user's email. It calls softDeleteService to carry out the deletion and responds with the result.",
    "inner_function_calls": [
      {
        "name": "softDeleteService",
        "import_path": "../services/album.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns the result of the soft delete operation in JSON format."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "album.js",
    "method_name": "hardDelete",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function performs a hard delete of an album using its ID. It calls hardDeleteService to carry out the deletion and returns the result back to the client.",
    "inner_function_calls": [
      {
        "name": "hardDeleteService",
        "import_path": "../services/album.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns the result of the hard delete operation in JSON format."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "cluster.js",
    "method_name": "getAlbumClusters",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function handles the HTTP request for retrieving album clusters by invoking a service method that fetches the data based on the album ID from the request parameters. The result is then sent back in the JSON format as the response.",
    "inner_function_calls": [
      {
        "name": "getAlbumClustersService",
        "import_path": "../services/cluster.js"
      },
      {
        "name": "res.json",
        "import_path": "express"
      }
    ],
    "output": {
      "type": "object",
      "description": "The output is the JSON response containing the result of the retrieved album clusters."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "cluster.js",
    "method_name": "getCluster",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function handles the HTTP request to retrieve a specific cluster using the provided id parameter. It calls the corresponding service method and sends the result back in JSON format.",
    "inner_function_calls": [
      {
        "name": "getClusterService",
        "import_path": "../services/cluster.js"
      },
      {
        "name": "res.json",
        "import_path": "express"
      }
    ],
    "output": {
      "type": "object",
      "description": "The output is the JSON response containing the result of the retrieved cluster."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "cluster.js",
    "method_name": "createCluster",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function handles the creation of a new cluster by calling the appropriate service method with the request body and user email. It sends the result back as a JSON response.",
    "inner_function_calls": [
      {
        "name": "createClusterService",
        "import_path": "../services/cluster.js"
      },
      {
        "name": "res.json",
        "import_path": "express"
      }
    ],
    "output": {
      "type": "object",
      "description": "The output is the JSON response containing the result of the created cluster."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "cluster.js",
    "method_name": "deleteAlbumClusters",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function handles the deletion of album clusters by calling a service method with the album ID parameter and sends the result back as a JSON response.",
    "inner_function_calls": [
      {
        "name": "deleteAlbumClustersService",
        "import_path": "../services/cluster.js"
      },
      {
        "name": "res.json",
        "import_path": "express"
      }
    ],
    "output": {
      "type": "object",
      "description": "The output is the JSON response containing the result of the deletion of the album clusters."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "cognito.js",
    "method_name": "getToken",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "/(true|false)/",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "/(true|false)/",
        "optional_value": "undefined"
      }
    ],
    "logic": "The getToken function is an asynchronous method that handles a request to retrieve an authentication token using user credentials. It extracts the username and password from the request body and calls the getCognitoToken function with these credentials. If successful, it sends back the token as a JSON response to the client. If there is an error during this process, it catches the error and returns a 500 status with the error message in JSON format.",
    "inner_function_calls": [
      {
        "name": "getCognitoToken",
        "import_path": "../services/cognito.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The output is a JSON response containing either the authentication token or an error message, depending on the success or failure of the token retrieval."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "customRecognition.js",
    "method_name": "getUnprocessedProfileImages",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "This function handles the retrieval of unprocessed profile images. It utilizes the asyncHandler middleware to manage asynchronous operations, calls the unprocessedProfileImages service function to get the data, and responds with a JSON containing the result.",
    "inner_function_calls": [
      {
        "name": "unprocessedProfileImages",
        "import_path": "../services/customRecognition.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "A JSON response containing the unprocessed profile images."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "customRecognition.js",
    "method_name": "getUnprocessedImages",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "This function retrieves all unprocessed images for a given album by using the albumId from the request parameters. It calls the getAllUnprocessedImages service function and sends the result back as a JSON response.",
    "inner_function_calls": [
      {
        "name": "getAllUnprocessedImages",
        "import_path": "../services/image.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "A JSON response containing all unprocessed images for the specified album."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "customRecognition.js",
    "method_name": "getUnprocessedFaces",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "This function retrieves unprocessed faces by calling the getUnprocessedFacesService function and responds with the result in JSON format.",
    "inner_function_calls": [
      {
        "name": "getUnprocessedFacesService",
        "import_path": "../services/customRecognition.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "A JSON response containing all unprocessed faces."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "customRecognition.js",
    "method_name": "processImage",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "This function processes an image by calling the processImageService with the image id from the request parameters and the user's email. It sends back the result as a JSON response.",
    "inner_function_calls": [
      {
        "name": "processImageService",
        "import_path": "../services/customRecognition.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "A JSON response containing the result of the image processing."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "customRecognition.js",
    "method_name": "reverseImageProcessing",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "This function handles reversing the image processing for a specified album by calling reverseImageProcessingService with the albumId from the request parameters and returns the result as a JSON response.",
    "inner_function_calls": [
      {
        "name": "reverseImageProcessingService",
        "import_path": "../services/customRecognition.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "A JSON response indicating the result of reversing the image processing."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "customRecognition.js",
    "method_name": "matchedFaces",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "This function finds matched faces by calling the matchedFacesService with albumId and profileImageId from request parameters. It sends back the matched faces result as a JSON response.",
    "inner_function_calls": [
      {
        "name": "matchedFacesService",
        "import_path": "../services/customRecognition.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "A JSON response containing matched faces results."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "customRecognition.js",
    "method_name": "updateUserProfileImageEmbedding",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "This function updates the user's profile image embedding by calling the updateUserProfileImageEmbeddingService with userId and embedding data from request parameters and body respectively. It responds with the result as a JSON object.",
    "inner_function_calls": [
      {
        "name": "updateUserProfileImageEmbeddingService",
        "import_path": "../services/customRecognition.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "A JSON response confirming the update of the user's profile image embedding."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "face.js",
    "method_name": "getAllByAlbumId",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function retrieves all faces associated with a given album ID. It uses the albumId from the request parameters and pagination parameters from the request query to fetch the data through the getAllByAlbumIdService. Finally, it responds with the result in JSON format.",
    "inner_function_calls": [
      {
        "name": "getAllByAlbumIdService",
        "import_path": "../services/face.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns the collection of faces associated with the specified album ID."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "face.js",
    "method_name": "getAllbyUniqueFaceId",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function, given an album ID and a unique face ID from the request parameters, calls the getByUniqueFaceIdService to retrieve specific face details. It then responds with the result in JSON format.",
    "inner_function_calls": [
      {
        "name": "getByUniqueFaceIdService",
        "import_path": "../services/face.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns the face details corresponding to the unique face ID within the specified album."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "face.js",
    "method_name": "getUnprocessedAlbumFaces",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function retrieves unprocessed faces for a specific album identified by its album ID. It utilizes the getUnprocessedAlbumFacesService for the data retrieval and returns the result in JSON format.",
    "inner_function_calls": [
      {
        "name": "getUnprocessedAlbumFacesService",
        "import_path": "../services/face.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns a list of unprocessed faces associated with the specified album ID."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "face.js",
    "method_name": "getUnclusteredAlbumFaces",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function aims to get faces from an album that have not been clustered. It calls the getUnclusteredAlbumFacesService with the album ID and returns the result as JSON.",
    "inner_function_calls": [
      {
        "name": "getUnclusteredAlbumFacesService",
        "import_path": "../services/face.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns a list of unclustered faces from the specified album."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "face.js",
    "method_name": "groupByRekognition",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function groups faces by using the Rekognition service based on the album ID. It executes the groupByRekognitionService and sends the resulting data in JSON format.",
    "inner_function_calls": [
      {
        "name": "groupByRekognitionService",
        "import_path": "../services/face.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns faces grouped by the Rekognition service according to the specified album ID."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "face.js",
    "method_name": "filterByFace",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function filters faces based on the guest ID and album ID provided in the request parameters. It calls the filterByFaceService to perform the filtering, returning the result in JSON format.",
    "inner_function_calls": [
      {
        "name": "filterByFaceService",
        "import_path": "../services/face.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns a subset of faces matching the specified guest ID and album ID."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "face.js",
    "method_name": "createFace",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function is responsible for creating a new face entry. It extracts face data from the request body and calls the createFaceService to perform the creation, finally returning the result in JSON format.",
    "inner_function_calls": [
      {
        "name": "createFaceService",
        "import_path": "../services/face.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns the newly created face entry."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "face.js",
    "method_name": "updateFace",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function updates an existing face entry. It leverages the face ID from the request parameters and face data from the request body, along with the user's email for tracking, calling the updateFaceService to apply the changes and returning the updated result in JSON format.",
    "inner_function_calls": [
      {
        "name": "updateFaceService",
        "import_path": "../services/face.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns the updated face entry."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "face.js",
    "method_name": "updateMatch",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function updates the match details for a specific face. It checks if the matchedProfileImage and similarityScore fields are present in the request body. It calls the updateMatchService using the face ID from the request parameters and the data from the body along with the user's email, returning the updated match details in JSON format.",
    "inner_function_calls": [
      {
        "name": "updateMatchService",
        "import_path": "../services/face.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns the updated match details for the specified face."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "filterImage.js",
    "method_name": "getAlbumUnprocessedFilteredImages",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": ".true",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "This function serves to retrieve unprocessed filtered images for a specific album. It uses the req.params.albumId to call the getAlbumUnprocessedFilteredImagesService and sends the result back as a JSON response.",
    "inner_function_calls": [
      {
        "name": "getAlbumUnprocessedFilteredImagesService",
        "import_path": "../services/filterImage.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "This function returns a JSON response containing the unprocessed filtered images for the specified album."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "filterImage.js",
    "method_name": "updatedFilteredImages",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": ".true",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "This function updates the filtered images based on the provided id in req.params.id and request body data (req.body). It calls the updatedFilteredImagesService and returns the result as a JSON response.",
    "inner_function_calls": [
      {
        "name": "updatedFilteredImagesService",
        "import_path": "../services/filterImage.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "This function returns a JSON response containing the updated filtered images."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "filterImage.js",
    "method_name": "addFilteredImages",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": ".true",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "This function adds new filtered images to the existing ones. It retrieves the id from req.params.id and images from req.body.images, calling the addFilteredImagesService before returning the result as a JSON response.",
    "inner_function_calls": [
      {
        "name": "addFilteredImagesService",
        "import_path": "../services/filterImage.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "This function returns a JSON response confirming that the new filtered images have been added."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "folder.js",
    "method_name": "getAllAlbumFolders",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function retrieves all album folders for a given album ID passed in the request parameters. It uses the service 'getAllAlbumFoldersService' to fetch the data and returns the result as a JSON response.",
    "inner_function_calls": [
      {
        "name": "getAllAlbumFoldersService",
        "import_path": "../services/folder.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns a JSON response containing all album folders."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "folder.js",
    "method_name": "getFolder",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function retrieves a specific folder's details by ID passed in the request parameters. It checks if the user is authorized; if unauthorized, it sends a 403 response. Otherwise, it returns the folder's details as a JSON response.",
    "inner_function_calls": [
      {
        "name": "getFolderService",
        "import_path": "../services/folder.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns a JSON response containing the details of the folder or an authorization error message."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "folder.js",
    "method_name": "getFilteredImages",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function retrieves filtered images for a specific folder and user email. It uses the 'getFilteredImagesService' to fetch the result and returns it as a JSON response.",
    "inner_function_calls": [
      {
        "name": "getFilteredImagesService",
        "import_path": "../services/folder.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns a JSON response containing the filtered images."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "folder.js",
    "method_name": "addImages",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function adds images to a specific folder using the folder ID from request parameters and images from request body. It returns the result from 'addImagesService' as a JSON response.",
    "inner_function_calls": [
      {
        "name": "addImagesService",
        "import_path": "../services/folder.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns a JSON response confirming the images were added."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "folder.js",
    "method_name": "createFolder",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function creates a new folder using the data from the request body and the user's email. The result from 'createFolderService' is returned as a JSON response.",
    "inner_function_calls": [
      {
        "name": "createFolderService",
        "import_path": "../services/folder.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns a JSON response with the details of the newly created folder."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "folder.js",
    "method_name": "updateFolder",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function updates an existing folder using the folder ID from request parameters and data from the request body. The result from 'updateFolderService' is returned as a JSON response.",
    "inner_function_calls": [
      {
        "name": "updateFolderService",
        "import_path": "../services/folder.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns a JSON response confirming the folder was updated."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "folder.js",
    "method_name": "deleteImages",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function deletes images from a specific folder by first fetching the folder by ID. It utilizes 'deleteImagesService' to process the deletion and returns the result as a JSON response.",
    "inner_function_calls": [
      {
        "name": "deleteImagesService",
        "import_path": "../services/folder.js"
      },
      {
        "name": "Folder.findById",
        "import_path": "../models/Folder.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns a JSON response confirming the images were deleted."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "folder.js",
    "method_name": "deleteFolder",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function deletes a folder identified by its ID in the request parameters. It calls 'deleteFolderService' to execute the deletion and returns the result as a JSON response.",
    "inner_function_calls": [
      {
        "name": "deleteFolderService",
        "import_path": "../services/folder.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns a JSON response confirming the folder was deleted."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "guest.js",
    "method_name": "createGuest",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "true",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "true",
        "optional_value": "undefined"
      }
    ],
    "logic": "This function is defined as an asynchronous handler that processes a request to create a guest. It calls the createGuestService with the request body, which likely contains guest details, and sends the result back as a JSON response.",
    "inner_function_calls": [
      {
        "name": "createGuestService",
        "import_path": "../services/guest.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The output is the JSON response containing the result of the guest creation process."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "guest.js",
    "method_name": "getGuestById",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "true",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "true",
        "optional_value": "undefined"
      }
    ],
    "logic": "This function is an asynchronous handler that retrieves a guest's details based on the ID provided in the request parameters. It uses the getGuestByIdService to fetch the guest data and sends the fetched result as a JSON response.",
    "inner_function_calls": [
      {
        "name": "getGuestByIdService",
        "import_path": "../services/guest.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The output is the JSON response containing the details of the guest associated with the given ID."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "guest.js",
    "method_name": "filterImages",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "true",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "true",
        "optional_value": "undefined"
      }
    ],
    "logic": "This function acts as an asynchronous handler that filters images based on a specific ID provided in the request parameters. It calls the filterImagesService function with this ID and returns the resulting images in a JSON response.",
    "inner_function_calls": [
      {
        "name": "filterImagesService",
        "import_path": "../services/guest.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The output is the JSON response containing the filtered images associated with the specific ID."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "home.js",
    "method_name": "default",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "This asynchronous function serves as a default export for handling a request and sending a response. It attempts to send a welcome message containing the application's environment extracted from the configuration. If an error occurs during this process, it responds with a 500 status and returns the error message in JSON format.",
    "inner_function_calls": [
      {
        "name": "send",
        "import_path": "./res"
      },
      {
        "name": "status",
        "import_path": "./res"
      },
      {
        "name": "json",
        "import_path": "./res"
      }
    ],
    "output": {
      "type": "string",
      "description": "The output is the response sent to the client, either a welcome message or a JSON error response."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "image.js",
    "method_name": "createImage",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function is an asynchronous handler that processes an incoming request to create an image. It utilizes the asyncHandler middleware to manage asynchronous errors. Inside the function, it calls createImageService with two arguments: the body of the request (req.body) and the email of the user (req.user.email), which are likely used to create an image resource. After awaiting the result from createImageService, it sends the result back in a JSON format as the response.",
    "inner_function_calls": [
      {
        "name": "createImageService",
        "import_path": "../services/image.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The output is a JSON response containing the result of the image creation service, which can include information such as the created image's URL, ID, or status."
    }
  },
  {
    "folder_path": "src/controllers/rbac",
    "module_name": "user.js",
    "method_name": "getAllUsers",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "true",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "true",
        "optional_value": "undefined"
      }
    ],
    "logic": "This function uses a service to retrieve all users from the database and sends the result as a JSON response.",
    "inner_function_calls": [
      {
        "name": "getAllUsersService",
        "import_path": "../../services/rbac/user.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The result represents the list of all users retrieved from the database."
    }
  },
  {
    "folder_path": "src/controllers/rbac",
    "module_name": "user.js",
    "method_name": "getUser",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "true",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "true",
        "optional_value": "undefined"
      }
    ],
    "logic": "This function fetches a specific user based on the provided user ID in the request parameters and sends the result as a JSON response.",
    "inner_function_calls": [
      {
        "name": "getUserService",
        "import_path": "../../services/rbac/user.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The result represents the user object for the specified ID."
    }
  },
  {
    "folder_path": "src/controllers/rbac",
    "module_name": "user.js",
    "method_name": "getUserByEmail",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "true",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "true",
        "optional_value": "undefined"
      }
    ],
    "logic": "This function retrieves a user based on the email found in the user session and returns the user data as a JSON response.",
    "inner_function_calls": [
      {
        "name": "getUserByEmailService",
        "import_path": "../../services/rbac/user.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The result represents the user object associated with the provided email."
    }
  },
  {
    "folder_path": "src/controllers/rbac",
    "module_name": "user.js",
    "method_name": "createUser",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "true",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "true",
        "optional_value": "undefined"
      }
    ],
    "logic": "This function creates a new user based on the body of the request and the user email, then responds with the created user data.",
    "inner_function_calls": [
      {
        "name": "createUserService",
        "import_path": "../../services/rbac/user.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The result represents the newly created user object."
    }
  },
  {
    "folder_path": "src/controllers/rbac",
    "module_name": "user.js",
    "method_name": "createGuestUser",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "true",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "true",
        "optional_value": "undefined"
      }
    ],
    "logic": "This function creates a guest user and sends the response with the details as JSON.",
    "inner_function_calls": [
      {
        "name": "createGuestUserService",
        "import_path": "../../services/rbac/user.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The result represents the newly created guest user object."
    }
  },
  {
    "folder_path": "src/controllers/rbac",
    "module_name": "user.js",
    "method_name": "updateCurrentUser",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "true",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "true",
        "optional_value": "undefined"
      }
    ],
    "logic": "This function updates the current user's information based on the email and request body, sending the updated user data in the response.",
    "inner_function_calls": [
      {
        "name": "updateUserByEmailService",
        "import_path": "../../services/rbac/user.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The result represents the updated user object."
    }
  },
  {
    "folder_path": "src/controllers/rbac",
    "module_name": "user.js",
    "method_name": "updateUser",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "true",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "true",
        "optional_value": "undefined"
      }
    ],
    "logic": "This function updates the user details for a specified user ID and sends the updated user data as a JSON response.",
    "inner_function_calls": [
      {
        "name": "updateUserService",
        "import_path": "../../services/rbac/user.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The result represents the updated user object."
    }
  },
  {
    "folder_path": "src/controllers/rbac",
    "module_name": "user.js",
    "method_name": "profileImageFaceCount",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "true",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "true",
        "optional_value": "undefined"
      }
    ],
    "logic": "This function counts the number of faces detected in a user's profile image from an S3 storage location and returns the count as a JSON response.",
    "inner_function_calls": [
      {
        "name": "detectFaces",
        "import_path": "../../services/rekognition.js"
      }
    ],
    "output": {
      "type": "number",
      "description": "The result represents the count of faces detected in the specified image."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "rekognition.js",
    "method_name": "processImage",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "The method processes an image using an asynchronous handler. It extracts parameters from the request, specifically 'albumId' and 'imageId' from request parameters, and 'email' from the request user object. It then calls the 'processImageService' function, passing the extracted parameters, and sends back the result as a JSON response.",
    "inner_function_calls": [
      {
        "name": "processImageService",
        "import_path": "../services/rekognition.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The JSON response containing the result of the image processing service."
    }
  },
  {
    "folder_path": "src/middlewares",
    "module_name": "asyncHandler.js",
    "method_name": "asyncHandler",
    "input_params": [
      {
        "type": "function",
        "name": "fn",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "The asyncHandler function is designed to wrap asynchronous route handlers in an Express application. It takes a function (fn) as an argument and returns a new asynchronous function that handles HTTP requests. The returned function executes the provided function (fn) with the request (req), response (res), and next middleware function (next) and properly handles any errors that may arise during its execution by catching them and sending an appropriate HTTP response to the client.",
    "inner_function_calls": [
      {
        "name": "fn",
        "import_path": "N/A"
      },
      {
        "name": "res.status",
        "import_path": "Express response object"
      },
      {
        "name": "res.json",
        "import_path": "Express response object"
      }
    ],
    "output": {
      "type": "function",
      "description": "This function does not return a value directly; it returns a new middleware function that handles asynchronous operations and error responses."
    }
  },
  {
    "folder_path": "src/middlewares",
    "module_name": "auth.js",
    "method_name": "getSigningKey",
    "input_params": [
      {
        "type": "string",
        "name": "token",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "This function decodes the JWT token header to extract the key ID (kid) and uses the 'jwksClient' to retrieve the signing key associated with that key ID. If the token header is invalid, it throws an error. It handles both the publicKey and rsaPublicKey formats of keys.",
    "inner_function_calls": [
      {
        "name": "jwt.decode",
        "import_path": "jsonwebtoken"
      },
      {
        "name": "Promise",
        "import_path": "built-in"
      }
    ],
    "output": {
      "type": "object",
      "description": "It returns the retrieved signing key, which can be used to verify the JWT."
    }
  },
  {
    "folder_path": "src/middlewares",
    "module_name": "auth.js",
    "method_name": "verifyJwt",
    "input_params": [
      {
        "type": "string",
        "name": "token",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "This function retrieves the signing key using the previously defined 'getSigningKey' function and then uses 'promisify' to convert the 'jwt.verify' method into a Promise-based function. It verifies the JWT using the signing key and checks that it aligns with the expected audience and issuer.",
    "inner_function_calls": [
      {
        "name": "getSigningKey",
        "import_path": "."
      },
      {
        "name": "promisify",
        "import_path": "util"
      },
      {
        "name": "jwt.verify",
        "import_path": "jsonwebtoken"
      }
    ],
    "output": {
      "type": "object",
      "description": "It returns the decoded JWT payload if the verification is successful."
    }
  },
  {
    "folder_path": "src/middlewares",
    "module_name": "auth.js",
    "method_name": "authorize",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "function",
        "name": "next",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "This middleware function checks the request headers for an authorization token. If the token is present, it verifies the token using 'verifyJwt'. If verification is successful, it updates the user with 'updateUserByEmail' and calls the next middleware in the stack. If the token is missing or invalid, it responds with an appropriate error message. If no auth token is provided, it checks for session tokens and guest email headers to potentially allow guest access.",
    "inner_function_calls": [
      {
        "name": "verifyJwt",
        "import_path": "."
      },
      {
        "name": "updateUserByEmail",
        "import_path": "../services/rbac/user.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "It does not return a value; its effect is on the 'req' object and response to the client."
    }
  },
  {
    "folder_path": "src/models",
    "module_name": "Album.js",
    "method_name": "<constructor>",
    "input_params": [
      {
        "type": "object",
        "name": "schema",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "options",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "This constructor function initializes a new schema using Mongoose with various fields including name, owner, logo, etc. The 'timestamps' option automatically manages createdAt and updatedAt fields for the schema.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An instance of Mongoose schema that defines how the data structure should be represented in the database."
    }
  },
  {
    "folder_path": "src/models",
    "module_name": "Album.js",
    "method_name": "mongoose.model",
    "input_params": [
      {
        "type": "string",
        "name": "modelName",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "schema",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "This method creates a new model from the defined schema. In this case, it associates the schema with the name 'Album'.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "The Mongoose model for the 'Album', allowing interaction with the corresponding MongoDB collection."
    }
  },
  {
    "folder_path": "src/models",
    "module_name": "Cluster.js",
    "method_name": "constructor",
    "input_params": [
      {
        "type": "object",
        "name": "schemaDefinition",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "This is the constructor of a Mongoose Schema which initializes a new schema with the specified definition. In this case, it defines a schema for a database model that corresponds to a Cluster with fields for albumId and images. The albumId is expected to be of type String, while images is defined as an array without a specified type.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "The output is an instance of a Mongoose Schema which describes the structure of documents within the Cluster collection in the MongoDB database."
    }
  },
  {
    "folder_path": "src/models",
    "module_name": "Cluster.js",
    "method_name": "model",
    "input_params": [
      {
        "type": "string",
        "name": "modelName",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "schema",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "This method creates and returns a Mongoose model. It associates the 'Cluster' name with the defined schema, allowing for interaction with documents in the Cluster collection in MongoDB. The model provides the necessary methods to perform CRUD operations on the MongoDB collection.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "The output is a Mongoose Model, which can be used to create, read, update, and delete documents from the 'Cluster' collection in MongoDB."
    }
  },
  {
    "folder_path": "src/models",
    "module_name": "Face.js",
    "method_name": "constructor",
    "input_params": [
      {
        "type": "object",
        "name": "schema definition",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "options",
        "is_required": "false",
        "optional_value": "{ timestamps: true }"
      }
    ],
    "logic": "This constructor sets up the MongoDB schema for the 'Face' model, defining the structure of documents in the 'faces' collection, with specific fields like albumId, albumOwner, and embedding, along with enabling timestamps for creation and updates.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "The generated Mongoose schema for the 'Face' model."
    }
  },
  {
    "folder_path": "src/models",
    "module_name": "Face.js",
    "method_name": "mongoose.model",
    "input_params": [
      {
        "type": "string",
        "name": "modelName",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "schema",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function creates a Mongoose model named 'Face' based on the provided schema, allowing for interactions with the 'faces' collection in the database, perform operations such as create, read, update, and delete documents.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "The Mongoose model for 'Face', which allows database operations on the 'Face' collection."
    }
  },
  {
    "folder_path": "src/models",
    "module_name": "FilteredImages.js",
    "method_name": "constructor",
    "input_params": [
      {
        "type": "object",
        "name": "schema",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "The constructor initializes a new Mongoose schema for the model 'FilteredImages' with specified fields such as albumId, userId, isProcessed (with a default value of false), and images. Additionally, it sets timestamps for the schema and creates an index on the albumId and userId fields to optimize query performance.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "The output is the created Mongoose schema which can then be used to create a model."
    }
  },
  {
    "folder_path": "src/models",
    "module_name": "FilteredImages.js",
    "method_name": "index",
    "input_params": [
      {
        "type": "object",
        "name": "index",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "The index method is called on the schema to create a composite index on the albumId and userId fields. This helps in enhancing the database query performance for these fields.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "The output represents the schema instance with an index defined that improves lookup efficiency in these fields."
    }
  },
  {
    "folder_path": "src/models",
    "module_name": "FilteredImages.js",
    "method_name": "model",
    "input_params": [
      {
        "type": "string",
        "name": "modelName",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "schema",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "The model method defines a Mongoose model named 'FilteredImages' based on the previously defined schema. This model can be used to interact with the 'FilteredImages' collection in the database including create, read, update, and delete operations.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "The output is a Mongoose model 'FilteredImages' which provides a way to perform CRUD operations on the underlying MongoDB collection."
    }
  },
  {
    "folder_path": "src/models",
    "module_name": "Folder.js",
    "method_name": "schema",
    "input_params": [
      {
        "type": "object",
        "name": "schemaDefinition",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "options",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Defines a new Mongoose schema for a 'Folder' model, specifying its structure and data types.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A Mongoose Schema object that outlines the structure of documents within the 'Folder' collection."
    }
  },
  {
    "folder_path": "src/models",
    "module_name": "Folder.js",
    "method_name": "model",
    "input_params": [
      {
        "type": "string",
        "name": "modelName",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "schema",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Creates and exports a Mongoose model named 'Folder' based on the previously defined schema.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A Mongoose model class that provides an interface for interacting with the 'Folder' documents in the database."
    }
  },
  {
    "folder_path": "src/models",
    "module_name": "Guest.js",
    "method_name": "constructor",
    "input_params": [
      {
        "type": "object",
        "name": "schema",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Creates a new Mongoose schema for a 'Guest' model with specified fields and types. The fields include albumId, imageId, matchedFaces, email, and name. The albumId is required and references the Album model.",
    "inner_function_calls": [
      {
        "name": "Schema",
        "import_path": "mongoose"
      }
    ],
    "output": {
      "type": "object",
      "description": "An instance of a Mongoose schema representing the 'Guest' model."
    }
  },
  {
    "folder_path": "src/models",
    "module_name": "Guest.js",
    "method_name": "index",
    "input_params": [
      {
        "type": "object",
        "name": "field",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "options",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Creates a unique index on the imageId field to ensure that no two documents in the Guest collection can have the same imageId.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Defines indexing options for the schema, which specifies how the imageId should be indexed."
    }
  },
  {
    "folder_path": "src/models",
    "module_name": "Guest.js",
    "method_name": "model",
    "input_params": [
      {
        "type": "string",
        "name": "modelName",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "schema",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Creates and exports a Mongoose model named 'Guest' using the defined schema, allowing for CRUD operations on the corresponding MongoDB collection.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A Mongoose model that allows interaction with the 'Guest' collection in the database."
    }
  },
  {
    "folder_path": "src/models",
    "module_name": "Image.js",
    "method_name": "constructor",
    "input_params": [
      {
        "type": "object",
        "name": "schemaDefinition",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "options",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Sets up a new mongoose schema with the defined structure and options.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A mongoose schema object which defines the structure and data types of documents in the collection."
    }
  },
  {
    "folder_path": "src/models",
    "module_name": "Image.js",
    "method_name": "index",
    "input_params": [
      {
        "type": "object",
        "name": "specification",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "options",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Creates an index on the imageId field to ensure that imageId values are unique across all records, improving query performance.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns the index created on the mongoose schema."
    }
  },
  {
    "folder_path": "src/models",
    "module_name": "Image.js",
    "method_name": "model",
    "input_params": [
      {
        "type": "string",
        "name": "modelName",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "schema",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Creates a mongoose model from the schema, allowing for the creation and querying of documents in the image collection.",
    "inner_function_calls": [],
    "output": {
      "type": "function",
      "description": "A mongoose model function that can be used to interact with the images collection."
    }
  },
  {
    "folder_path": "src/models",
    "module_name": "ImageCustom.js",
    "method_name": "schema.index",
    "input_params": [
      {
        "type": "object",
        "name": "index",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "options",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function call creates an index on the 'imageId' field in the MongoDB database schema, enforcing uniqueness on that field. This means that no two documents in the collection can have the same value for 'imageId'.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "This function does not return any value, but its effect is to create an index in the database."
    }
  },
  {
    "folder_path": "src/models",
    "module_name": "ImageCustom.js",
    "method_name": "mongoose.Schema",
    "input_params": [
      {
        "type": "object",
        "name": "definition",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "options",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function creates a new schema for a Mongoose model, defining the structure and types of data in the MongoDB collection. The schema is defined with fields for albumId, imageId, faces, and createdBy, along with the option to automatically manage timestamps for when the document is created or updated.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "The output is a Mongoose schema object that can be used to create a model."
    }
  },
  {
    "folder_path": "src/models",
    "module_name": "ImageCustom.js",
    "method_name": "mongoose.model",
    "input_params": [
      {
        "type": "string",
        "name": "name",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "schema",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function registers a new Mongoose model named 'Custom-Image' based on the previously defined schema. This model will be used to interact with the MongoDB collection associated with this schema.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "The output is a Mongoose model which provides an interface to the MongoDB collection."
    }
  },
  {
    "folder_path": "src/models/rbac",
    "module_name": "Role.js",
    "method_name": "mongoose.Schema",
    "input_params": [
      {
        "type": "object",
        "name": "definition",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "options",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "The Schema constructor is being used to create a new schema for a MongoDB collection using Mongoose. This schema defines the structure of the documents within that collection, including the fields and their types, validation, and options like timestamps.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An instance of mongoose.Schema that defines the structure for documents in the RBAC-Role collection."
    }
  },
  {
    "folder_path": "src/models/rbac",
    "module_name": "Role.js",
    "method_name": "schema.index",
    "input_params": [
      {
        "type": "object",
        "name": "index",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "options",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "The index method is used to create an index on the 'name' field of the schema, ensuring that each name is unique in the collection. This helps optimize query performance for lookups by name.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Sets up a unique index constraint on the 'name' field."
    }
  },
  {
    "folder_path": "src/models/rbac",
    "module_name": "Role.js",
    "method_name": "mongoose.model",
    "input_params": [
      {
        "type": "string",
        "name": "modelName",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "schema",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "The model function is called to compile a model from the schema defined earlier. This model will be used to interact with the RBAC-Role collection in MongoDB, allowing for CRUD operations and interactions.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a Mongoose model based on the name 'RBAC-Role' and the provided schema."
    }
  },
  {
    "folder_path": "src/models/rbac",
    "module_name": "User.js",
    "method_name": "mongoose.Schema",
    "input_params": [
      {
        "type": "object",
        "name": "schemaDefinition",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "options",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Creates a new schema for use with Mongoose models, defining the structure of each document in the MongoDB collection. The schema contains various fields such as name, email, roles, permissions, and timestamps for creation and updates.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A Mongoose Schema instance that represents the structure of a document."
    }
  },
  {
    "folder_path": "src/models/rbac",
    "module_name": "User.js",
    "method_name": "schema.index",
    "input_params": [
      {
        "type": "object",
        "name": "index",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "options",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Creates an index for the specified field (in this case, 'email') to ensure unique values across the collection, improving lookup performance and enforcing constraints.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "No output; modifies the schema to include the specified index."
    }
  },
  {
    "folder_path": "src/models/rbac",
    "module_name": "User.js",
    "method_name": "mongoose.model",
    "input_params": [
      {
        "type": "string",
        "name": "modelName",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "schema",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Creates and returns a model for the RBAC-User schema, which can be used to create, read, update, and delete documents in the corresponding MongoDB collection.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A Mongoose model instance representing the RBAC-User collection."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "album.js",
    "method_name": "getAllAlbums",
    "input_params": [],
    "logic": "Fetches all albums from the database and returns them after authorization check.",
    "inner_function_calls": [
      {
        "name": "authorize",
        "import_path": "../middlewares/auth.js"
      },
      {
        "name": "getAllAlbums",
        "import_path": "../controllers/album.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The list of all albums."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "album.js",
    "method_name": "getAlbum",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Fetches a specific album based on the provided ID after authorization check.",
    "inner_function_calls": [
      {
        "name": "authorize",
        "import_path": "../middlewares/auth.js"
      },
      {
        "name": "getAlbum",
        "import_path": "../controllers/album.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The album corresponding to the provided ID."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "album.js",
    "method_name": "getAlbumOwner",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Fetches the owner of the specified album based on the provided ID after authorization check.",
    "inner_function_calls": [
      {
        "name": "authorize",
        "import_path": "../middlewares/auth.js"
      },
      {
        "name": "getAlbumOwner",
        "import_path": "../controllers/album.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The owner details of the album."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "album.js",
    "method_name": "getAlbumSharedUsers",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Fetches the users with whom the specified album is shared based on the provided ID after authorization check.",
    "inner_function_calls": [
      {
        "name": "authorize",
        "import_path": "../middlewares/auth.js"
      },
      {
        "name": "getAlbumSharedUsers",
        "import_path": "../controllers/album.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The list of users with whom the album is shared."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "album.js",
    "method_name": "createAlbum",
    "input_params": [],
    "logic": "Creates a new album after authorization check and returns the created album.",
    "inner_function_calls": [
      {
        "name": "authorize",
        "import_path": "../middlewares/auth.js"
      },
      {
        "name": "createAlbum",
        "import_path": "../controllers/album.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The newly created album."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "album.js",
    "method_name": "updateAlbum",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Updates an existing album based on the provided ID after authorization check and returns the updated album.",
    "inner_function_calls": [
      {
        "name": "authorize",
        "import_path": "../middlewares/auth.js"
      },
      {
        "name": "updateAlbum",
        "import_path": "../controllers/album.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The updated album."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "album.js",
    "method_name": "shareAlbum",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Shares the album with specified users based on the provided ID after authorization check and returns share details.",
    "inner_function_calls": [
      {
        "name": "authorize",
        "import_path": "../middlewares/auth.js"
      },
      {
        "name": "shareAlbum",
        "import_path": "../controllers/album.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The details of the album share operation."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "album.js",
    "method_name": "softDelete",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Soft deletes the specified album based on the provided ID after authorization check.",
    "inner_function_calls": [
      {
        "name": "authorize",
        "import_path": "../middlewares/auth.js"
      },
      {
        "name": "softDelete",
        "import_path": "../controllers/album.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "Confirms the soft delete operation was conducted on the album."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "album.js",
    "method_name": "hardDelete",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Hard deletes the specified album based on the provided ID after authorization check.",
    "inner_function_calls": [
      {
        "name": "authorize",
        "import_path": "../middlewares/auth.js"
      },
      {
        "name": "hardDelete",
        "import_path": "../controllers/album.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "Confirms the hard delete operation was conducted on the album."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "cluster.js",
    "method_name": "getCluster",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function retrieves the details of a specific cluster based on the provided ID parameter from the URL.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns the details of the cluster identified by the ID."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "cluster.js",
    "method_name": "getAlbumClusters",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function fetches all clusters associated with a specific album identified by the albumId parameter from the URL.",
    "inner_function_calls": [],
    "output": {
      "type": "array",
      "description": "Returns a list of clusters associated with the specified album."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "cluster.js",
    "method_name": "createCluster",
    "input_params": [],
    "logic": "This function is responsible for creating a new cluster. It processes the request to add a new cluster based on the provided data in the request body.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns the details of the newly created cluster."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "cluster.js",
    "method_name": "deleteAlbumClusters",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function handles the deletion of clusters associated with a specific album identified by the albumId parameter from the URL.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a confirmation of the deletion of clusters related to the specified album."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "cognito.js",
    "method_name": "getToken",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "function",
        "name": "next",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "The getToken function handles the logic for retrieving a JWT token from AWS Cognito. It takes the request object, response object, and a next function for error handling as arguments. Inside it, the function typically checks the request for user credentials, interacts with Cognito to authenticate the user, and returns a token if successful or an error if unsuccessful.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Typically sends a response containing the JWT token that can be used for subsequent API requests."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "customRecognition.js",
    "method_name": "getUnprocessedProfileImages",
    "input_params": [],
    "logic": "This function retrieves all profile images that have not been processed yet.",
    "inner_function_calls": [],
    "output": {
      "type": "array",
      "description": "An array of unprocessed profile images."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "customRecognition.js",
    "method_name": "getUnprocessedImages",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function retrieves unprocessed images from a specific album identified by the provided albumId.",
    "inner_function_calls": [],
    "output": {
      "type": "array",
      "description": "An array of unprocessed images from the specified album."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "customRecognition.js",
    "method_name": "getUnprocessedFaces",
    "input_params": [],
    "logic": "This function retrieves all face images that have not been processed yet.",
    "inner_function_calls": [],
    "output": {
      "type": "array",
      "description": "An array of unprocessed faces."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "customRecognition.js",
    "method_name": "processImage",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function processes the image identified by the provided id and performs necessary operations for image recognition or related tasks.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An object indicating the status and results of the image processing."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "customRecognition.js",
    "method_name": "reverseImageProcessing",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function reverses the image processing for the specified album identified by albumId, restoring images to their original state.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An object indicating the status of the reversal of image processing."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "customRecognition.js",
    "method_name": "matchedFaces",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "profileImageId",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function retrieves matched faces based on the specified album and profile image ID.",
    "inner_function_calls": [],
    "output": {
      "type": "array",
      "description": "An array of matched faces according to the specified profile image and album."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "customRecognition.js",
    "method_name": "updateUserProfileImageEmbedding",
    "input_params": [
      {
        "type": "string",
        "name": "userId",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function updates the embedding information of the user's profile image specified by userId, typically used for machine learning models.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An object indicating the result of the user profile image embedding update."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "face.js",
    "method_name": "getAllByAlbumId",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function retrieves all faces associated with a specific album ID.",
    "inner_function_calls": [],
    "output": {
      "type": "array",
      "description": "An array of face objects associated with the specified album."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "face.js",
    "method_name": "getAllbyUniqueFaceId",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "uniqueFaceId",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function retrieves all faces that match a specific unique face ID within a given album.",
    "inner_function_calls": [],
    "output": {
      "type": "array",
      "description": "An array of face objects that match the specified unique face ID."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "face.js",
    "method_name": "groupByRekognition",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function organizes faces within an album by using Amazon Rekognition to group them.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An object representing groups of faces identified by Rekognition."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "face.js",
    "method_name": "getUnprocessedAlbumFaces",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function retrieves faces from an album that have not yet been processed.",
    "inner_function_calls": [],
    "output": {
      "type": "array",
      "description": "An array of faces that have not been processed associated with the specified album."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "face.js",
    "method_name": "getUnclusteredAlbumFaces",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function retrieves faces from an album that are not clustered together.",
    "inner_function_calls": [],
    "output": {
      "type": "array",
      "description": "An array of unclustered face objects associated with the specified album."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "face.js",
    "method_name": "filterByFace",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "guestId",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function filters faces in an album based on a specific guest ID.",
    "inner_function_calls": [],
    "output": {
      "type": "array",
      "description": "An array of face objects that match the specified guest ID within the album."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "face.js",
    "method_name": "createFace",
    "input_params": [],
    "logic": "This function creates a new face record in the database.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An object representing the newly created face record."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "face.js",
    "method_name": "updateFace",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function updates an existing face record based on its ID.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An object representing the updated face record."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "face.js",
    "method_name": "updateMatch",
    "input_params": [
      {
        "type": "string",
        "name": "faceId",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function updates the match status of a face based on its face ID.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An object representing the updated match status of the specified face."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "filterImage.js",
    "method_name": "getAlbumUnprocessedFilteredImages",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function retrieves unprocessed filtered images from a specific album identified by the albumId parameter.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An object containing the unprocessed filtered images for the specified album."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "filterImage.js",
    "method_name": "updatedFilteredImages",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function updates the filtered images associated with the given id parameter.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An object indicating the success or failure of the update operation."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "filterImage.js",
    "method_name": "addFilteredImages",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function adds filtered images to the entry identified by the id parameter.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An object indicating the success or failure of the add operation."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "folder.js",
    "method_name": "getAllAlbumFolders",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "/true/",
        "optional_value": "null"
      }
    ],
    "logic": "This function handles the retrieval of all album folders associated with a specified album ID. It will fetch the relevant data and typically return it in a suitable format for the client.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An array of album folders associated with the specified album."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "folder.js",
    "method_name": "getFolder",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "/true/",
        "optional_value": "null"
      }
    ],
    "logic": "This function retrieves a specific folder based on the provided folder ID. It is expected to access a database or data store to fetch the details of the folder.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Details of the requested folder."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "folder.js",
    "method_name": "getFilteredImages",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "/true/",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "emailId",
        "is_required": "/true/",
        "optional_value": "null"
      }
    ],
    "logic": "This function fetches images from a specific folder and filters them based on the provided email ID. The filtering criteria is applied to return only the relevant images for that user.",
    "inner_function_calls": [],
    "output": {
      "type": "array",
      "description": "A collection of images filtered by the specified criteria."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "folder.js",
    "method_name": "createFolder",
    "input_params": [],
    "logic": "This function allows for the creation of a new folder. It typically receives data representing the folder attributes, processes it, and saves the folder to the database.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "The newly created folder object."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "folder.js",
    "method_name": "updateFolder",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "/true/",
        "optional_value": "null"
      }
    ],
    "logic": "This function updates an existing folder's details using the provided folder ID. It processes incoming data and applies the changes to the stored folder information.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "The updated folder object."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "folder.js",
    "method_name": "addImages",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "/true/",
        "optional_value": "null"
      }
    ],
    "logic": "This function adds new images to an existing folder identified by the folder ID. It processes the incoming image data and associates it with the folder.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "The folder object, now including the newly added images."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "folder.js",
    "method_name": "deleteImages",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "/true/",
        "optional_value": "null"
      }
    ],
    "logic": "This function deletes specified images from a folder identified by the folder ID. It will typically handle the removal of image references from the folder's data structure.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "The folder object with the specified images removed."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "folder.js",
    "method_name": "deleteFolder",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "/true/",
        "optional_value": "null"
      }
    ],
    "logic": "This function deletes an entire folder based on the provided folder ID. It handles the removal of folder data and any associated images or references.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Confirmation or details regarding the deletion of the folder."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "guest.js",
    "method_name": "createGuest",
    "input_params": [],
    "logic": "This function handles the creation of a new guest by processing the incoming request data and saving it to a database.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns the created guest object."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "guest.js",
    "method_name": "getGuestById",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function retrieves the details of a guest based on a provided ID. It queries the database to fetch the data related to that specific guest.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns the guest object corresponding to the provided ID."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "guest.js",
    "method_name": "filterImages",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function retrieves and filters images related to a guest identified by the given ID, likely returning only certain types or conditions of images.",
    "inner_function_calls": [],
    "output": {
      "type": "array",
      "description": "Returns an array of filtered image objects associated with the guest."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "home.js",
    "method_name": "get",
    "input_params": [
      {
        "type": "string",
        "name": "path",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "function",
        "name": "callback",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "This method registers a route handler for GET requests to the specified path. When a GET request is made to the root path ('/'), the 'home' function is called to handle the request.",
    "inner_function_calls": [
      {
        "name": "home",
        "import_path": "../controllers/home.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "This method does not output a value directly. Instead, it registers a route that when called will execute the 'home' function."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "image.js",
    "method_name": "router.post",
    "input_params": [
      {
        "type": "string",
        "name": "path",
        "is_required": ",",
        "optional_value": "undefined"
      },
      {
        "type": "function",
        "name": "authorize",
        "is_required": ",",
        "optional_value": "undefined"
      },
      {
        "type": "function",
        "name": "createImage",
        "is_required": ",",
        "optional_value": "undefined"
      }
    ],
    "logic": "This function sets up a POST route on the express router. When a POST request is made to the root URL (represented by '/'), it first invokes the 'authorize' middleware to check if the user is authorized. If authorized, it then processes the request using the 'createImage' controller function to handle image creation functionality.",
    "inner_function_calls": [
      {
        "name": "authorize",
        "import_path": "../middlewares/auth.js"
      },
      {
        "name": "createImage",
        "import_path": "../controllers/image.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The response from the 'createImage' function will be sent back to the client, which may include success/failure messages or data related to the image created."
    }
  },
  {
    "folder_path": "src/routes/rbac",
    "module_name": "user.js",
    "method_name": "getAllUsers",
    "input_params": [],
    "logic": "This function retrieves all users from the system.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An array of user objects representing all users."
    }
  },
  {
    "folder_path": "src/routes/rbac",
    "module_name": "user.js",
    "method_name": "getUser",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function retrieves details of a specific user based on the provided user ID.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "The user object of the specified user."
    }
  },
  {
    "folder_path": "src/routes/rbac",
    "module_name": "user.js",
    "method_name": "getUserByEmail",
    "input_params": [],
    "logic": "This function retrieves a user based on their email address.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "The user object associated with the provided email."
    }
  },
  {
    "folder_path": "src/routes/rbac",
    "module_name": "user.js",
    "method_name": "createUser",
    "input_params": [],
    "logic": "This function creates a new user in the system.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "The newly created user object."
    }
  },
  {
    "folder_path": "src/routes/rbac",
    "module_name": "user.js",
    "method_name": "createGuestUser",
    "input_params": [],
    "logic": "This function creates a temporary guest user in the system.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "The newly created guest user object."
    }
  },
  {
    "folder_path": "src/routes/rbac",
    "module_name": "user.js",
    "method_name": "updateUser",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function updates the details of a specific user based on the provided user ID.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "The updated user object."
    }
  },
  {
    "folder_path": "src/routes/rbac",
    "module_name": "user.js",
    "method_name": "updateCurrentUser",
    "input_params": [],
    "logic": "This function updates the current user's details.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "The updated current user object."
    }
  },
  {
    "folder_path": "src/routes/rbac",
    "module_name": "user.js",
    "method_name": "profileImageFaceCount",
    "input_params": [
      {
        "type": "string",
        "name": "imageId",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function retrieves the count of faces detected in a profile image based on the provided image ID.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "The count of faces detected in the specified profile image."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "rekognition.js",
    "method_name": "get",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "imageId",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "function",
        "name": "authorize",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "function",
        "name": "processImage",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This method sets up a GET route to retrieve an image from a specific album. It uses Express router to define the path and the middleware function 'authorize' for permission checking before invoking the controller function 'processImage' to handle the request based on the route parameters.",
    "inner_function_calls": [
      {
        "name": "authorize",
        "import_path": "../middlewares/auth.js"
      },
      {
        "name": "processImage",
        "import_path": "../controllers/rekognition.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The output of this function is an Express router instance that can handle GET requests to the specified route."
    }
  },
  {
    "folder_path": "src",
    "module_name": "server.js",
    "method_name": "connect",
    "input_params": [
      {
        "type": "string",
        "name": "mongo_uri",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "options",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Establishes a connection to the MongoDB database using the provided connection URI and options.",
    "inner_function_calls": [
      {
        "name": "then",
        "import_path": "Promise"
      },
      {
        "name": "catch",
        "import_path": "Promise"
      }
    ],
    "output": {
      "type": "Promise",
      "description": "Returns a promise that resolves when the connection has been established or rejects if there is an error."
    }
  },
  {
    "folder_path": "src",
    "module_name": "server.js",
    "method_name": "listen",
    "input_params": [
      {
        "type": "number",
        "name": "port",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "function",
        "name": "callback",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Starts the server and begins listening for incoming requests on the specified port, executing the callback function once the server is up and running.",
    "inner_function_calls": [],
    "output": {
      "type": "undefined",
      "description": "Indicates that the server is now active and listening for connections."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "album.js",
    "method_name": "getAlbums",
    "input_params": [
      {
        "type": "object",
        "name": "filter",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "project",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function fetches albums from the database based on optional filtering and projection fields. If filter or project is not provided, it defaults to an empty object.",
    "inner_function_calls": [
      {
        "name": "Album.find",
        "import_path": "../models/Album.js"
      }
    ],
    "output": {
      "type": "array",
      "description": "An array of album documents matching the filter."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "album.js",
    "method_name": "getAllSharedAlbums",
    "input_params": [
      {
        "type": "string",
        "name": "email",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function retrieves all albums that are shared with a specified user identified by their email. It constructs an aggregation pipeline in MongoDB to filter albums based on the sharing condition and the soft-delete status.",
    "inner_function_calls": [
      {
        "name": "Album.aggregate",
        "import_path": "../models/Album.js"
      }
    ],
    "output": {
      "type": "array",
      "description": "An array of albums shared with the specified user."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "album.js",
    "method_name": "getAllAlbums",
    "input_params": [
      {
        "type": "object",
        "name": "user",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function retrieves all albums for a specific user. It aggregates albums based on their ownership and sharing status, also collecting related folder information and counts.",
    "inner_function_calls": [
      {
        "name": "Album.aggregate",
        "import_path": "../models/Album.js"
      }
    ],
    "output": {
      "type": "array",
      "description": "An array of albums belonging to the specified user."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "album.js",
    "method_name": "getAlbumSharedUsers",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "boolean",
        "name": "withEmbedding",
        "is_required": "false",
        "optional_value": "false"
      }
    ],
    "logic": "This function finds users who have access to a specific album by its ID. It checks the album's shared user list and retrieves their details from the user database.",
    "inner_function_calls": [
      {
        "name": "Album.aggregate",
        "import_path": "../models/Album.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "An object containing the list of users who share access to the album."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "album.js",
    "method_name": "aiEmbeddingMatch",
    "input_params": [
      {
        "type": "array",
        "name": "userSelfieEmbedding",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "array",
        "name": "allEmbeddings",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "filteredImagesId",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This is an async function that matches user selfie embeddings against a set of face embeddings. It sends a POST request to an AI service for matching and saves the matched images to the filtered images collection.",
    "inner_function_calls": [
      {
        "name": "axios.post",
        "import_path": "axios"
      },
      {
        "name": "addFilteredImages",
        "import_path": "./filterImage.js"
      }
    ],
    "output": {
      "type": "null",
      "description": "No return value."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "album.js",
    "method_name": "albumFacesMatch",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "array",
        "name": "userSelfieEmbedding",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "filteredImagesId",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "number",
        "name": "page",
        "is_required": "true",
        "optional_value": "1"
      }
    ],
    "logic": "This function iteratively matches face embeddings in the album against a user’s selfie embedding. It performs a recursive call to process all pages of face embeddings until all have been matched.",
    "inner_function_calls": [
      {
        "name": "getAllFacesByAlbumId",
        "import_path": "./face.js"
      },
      {
        "name": "aiEmbeddingMatch",
        "import_path": ""
      },
      {
        "name": "albumFacesMatch",
        "import_path": ""
      },
      {
        "name": "updatedFilteredImages",
        "import_path": "./filterImage.js"
      }
    ],
    "output": {
      "type": "null",
      "description": "No return value."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "album.js",
    "method_name": "getAlbumById",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "currentUserEmail",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Retrieves an album by its ID for a specific user, including handling for shared users and filtered images, while checking for soft-deleted status.",
    "inner_function_calls": [
      {
        "name": "Album.findById",
        "import_path": "../models/Album.js"
      },
      {
        "name": "User.find",
        "import_path": "../models/rbac/User.js"
      },
      {
        "name": "getFilteredImages",
        "import_path": "./filterImage.js"
      },
      {
        "name": "createFilteredImages",
        "import_path": "./filterImage.js"
      },
      {
        "name": "albumFacesMatch",
        "import_path": ""
      },
      {
        "name": "Album.aggregate",
        "import_path": "../models/Album.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "An album object with its details and shared users."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "album.js",
    "method_name": "filterImages",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "currentUserEmail",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function filters images in an album based on a user's embedding. It verifies face embeddings against the user's profile to determine matches and creates a filtered image record.",
    "inner_function_calls": [
      {
        "name": "User.find",
        "import_path": "../models/rbac/User.js"
      },
      {
        "name": "getAllFacesByAlbumId",
        "import_path": "./face.js"
      },
      {
        "name": "verifyEmbeddings",
        "import_path": "./embedding.js"
      },
      {
        "name": "concatenateAndReduceEmbeddings",
        "import_path": "./embedding.js"
      },
      {
        "name": "createFilteredImages",
        "import_path": "./filterImage.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The created filtered images object."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "album.js",
    "method_name": "getAlbumOwner",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function retrieves the owner of the album by its ID.",
    "inner_function_calls": [
      {
        "name": "Album.findById",
        "import_path": "../models/Album.js"
      }
    ],
    "output": {
      "type": "string",
      "description": "The email of the album owner."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "album.js",
    "method_name": "createAlbum",
    "input_params": [
      {
        "type": "object",
        "name": "data",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "owner",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Creates a new album in the database with specified data and associates it with the owner's email. It also creates a default folder associated with the created album.",
    "inner_function_calls": [
      {
        "name": "Album",
        "import_path": "../models/Album.js"
      },
      {
        "name": "createFolder",
        "import_path": "./folder.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The created album with details and default folder ID."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "album.js",
    "method_name": "shareAlbum",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "array",
        "name": "userEmails",
        "is_required": "true",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "updatedBy",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Shares an album with specified user emails by adding them to the album's share list, and records the user who performed the share operation.",
    "inner_function_calls": [
      {
        "name": "getUserByEmail",
        "import_path": "./rbac/user.js"
      },
      {
        "name": "Album.findByIdAndUpdate",
        "import_path": "../models/Album.js"
      }
    ],
    "output": {
      "type": "null",
      "description": "No return value."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "album.js",
    "method_name": "updateAlbum",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "updatedData",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "updatedBy",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Updates the specified album with new data and records who performed the update operation.",
    "inner_function_calls": [
      {
        "name": "Album.findByIdAndUpdate",
        "import_path": "../models/Album.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The updated album document."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "album.js",
    "method_name": "softDelete",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "true",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "deletedBy",
        "is_required": "true",
        "optional_value": ""
      }
    ],
    "logic": "This function soft deletes an album by marking it as deleted without actually removing it from the database. It records the timestamp and the user who deleted it.",
    "inner_function_calls": [
      {
        "name": "Album.findByIdAndUpdate",
        "import_path": "../models/Album.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The updated album document indicating the soft delete."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "album.js",
    "method_name": "hardDelete",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "true",
        "optional_value": ""
      }
    ],
    "logic": "This function permanently deletes an album from the database, including its associated folders and S3 storage entries. It logs the deletion steps for auditing purposes.",
    "inner_function_calls": [
      {
        "name": "s3.deleteObject",
        "import_path": ""
      },
      {
        "name": "Folder.find",
        "import_path": "../models/Folder.js"
      },
      {
        "name": "Folder.findByIdAndDelete",
        "import_path": "../models/Folder.js"
      },
      {
        "name": "Album.findByIdAndDelete",
        "import_path": "../models/Album.js"
      }
    ],
    "output": {
      "type": "null",
      "description": "No return value."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "cluster.js",
    "method_name": "getAlbumClusters",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "This asynchronous function retrieves the clusters associated with a specific album. It uses the albumId parameter to fetch the album from the database and then performs an aggregation on the 'Cluster' collection to match clusters that correspond to the given albumId. It constructs and returns an object that contains the albumId, the owner of the album, and the matched clusters.",
    "inner_function_calls": [
      {
        "name": "findById",
        "import_path": "../models/Album.js"
      },
      {
        "name": "aggregate",
        "import_path": "../models/Cluster.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "An object containing the albumId, albumOwner, and the associated clusters."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "cluster.js",
    "method_name": "getCluster",
    "input_params": [
      {
        "type": "string",
        "name": "clusterId",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "This asynchronous function retrieves detailed information about a specific cluster identified by clusterId. It performs an aggregation on the 'Cluster' collection to find the cluster based on its _id, adds fields, and performs a lookup to associate it with the corresponding album information. The function groups the results to present the albumId along with the owner and name of the album, as well as unique image IDs.",
    "inner_function_calls": [
      {
        "name": "aggregate",
        "import_path": "../models/Cluster.js"
      },
      {
        "name": "Types.ObjectId",
        "import_path": "mongoose"
      }
    ],
    "output": {
      "type": "object",
      "description": "An object containing albumId, albumOwner, albumName, and uniqueImageIds for the specified cluster."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "cluster.js",
    "method_name": "createCluster",
    "input_params": [
      {
        "type": "object",
        "name": "data",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "string",
        "name": "faceUpdatedBy",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "This asynchronous function creates a new cluster in the database using the data provided. It first initializes a new Cluster instance with the provided data and saves it to the database. It then iterates over any faces associated with the cluster, updating each face's 'clustered' status to true, indicating it's now part of a cluster. Finally, it returns the string representation of the newly saved cluster's _id.",
    "inner_function_calls": [
      {
        "name": "save",
        "import_path": "../models/Cluster.js"
      },
      {
        "name": "updateFace",
        "import_path": "./face.js"
      }
    ],
    "output": {
      "type": "string",
      "description": "The string representation of the newly created cluster's ID."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "cluster.js",
    "method_name": "deleteAlbumClusters",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "This asynchronous function deletes all clusters associated with a specific album identified by albumId. It first calls the deleteMany method on the Cluster model to remove all clusters matching the albumId. It then updates all Faces associated with that album, setting their 'clustered' status to false, indicating they are no longer part of a cluster. It finally returns the result of the delete operation.",
    "inner_function_calls": [
      {
        "name": "deleteMany",
        "import_path": "../models/Cluster.js"
      },
      {
        "name": "updateMany",
        "import_path": "../models/Face.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The result of the delete operation, which includes information about the number of documents deleted."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "cognito.js",
    "method_name": "getCognitoToken",
    "input_params": [
      {
        "type": "string",
        "name": "username",
        "is_required": ">true",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "password",
        "is_required": ">true",
        "optional_value": "null"
      }
    ],
    "logic": "The function getCognitoToken attempts to authenticate a user via AWS Cognito using the USER_PASSWORD_AUTH flow with the provided username and password. It constructs the parameters needed for the authentication request and makes a call to the Cognito service to initiate the authentication process. If successful, it returns the authentication response; otherwise, it handles errors and returns an appropriate error message.",
    "inner_function_calls": [
      {
        "name": "initiateAuth",
        "import_path": "AWS.CognitoIdentityServiceProvider"
      }
    ],
    "output": {
      "type": "object",
      "description": "The output can either be the response from Cognito containing authentication tokens or an object with an error message if the authentication fails."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "customRecognition.js",
    "method_name": "unprocessedProfileImages",
    "input_params": [
      {
        "type": "null",
        "name": "",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function retrieves all users who do not have an associated embedding, returning specified fields such as profileImage, _id, selfies, and email.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An array of user objects that do not have an embedding, containing the specified fields."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "customRecognition.js",
    "method_name": "unprocessedImages",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function retrieves images that have not been processed yet. It checks if an albumId is provided to filter the results accordingly.",
    "inner_function_calls": [
      {
        "name": "getAllImages",
        "import_path": "./image.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "An array of unprocessed image objects possibly filtered by albumId."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "customRecognition.js",
    "method_name": "processImage",
    "input_params": [
      {
        "type": "string",
        "name": "imageId",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "updatedBy",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function marks an image as processed by updating its 'isProcessed' status to true.",
    "inner_function_calls": [
      {
        "name": "updateImage",
        "import_path": "./image.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The updated image object indicating that it has been processed."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "customRecognition.js",
    "method_name": "getUnprocessedFaces",
    "input_params": [
      {
        "type": "null",
        "name": "",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function retrieves faces that have not been matched with a profile image yet.",
    "inner_function_calls": [
      {
        "name": "getFaces",
        "import_path": "./face.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "An array of face objects that are unprocessed."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "customRecognition.js",
    "method_name": "getUnclusteredFaces",
    "input_params": [
      {
        "type": "null",
        "name": "",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function retrieves faces that have not been clustered yet.",
    "inner_function_calls": [
      {
        "name": "getFaces",
        "import_path": "./face.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "An array of face objects that are unclustered."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "customRecognition.js",
    "method_name": "reverseImageProcessing",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function reverses the processing of images in a specific album by unsetting the 'isProcessed' flag and removing all faces associated with that album.",
    "inner_function_calls": [
      {
        "name": "Image.updateMany",
        "import_path": "Image.js"
      },
      {
        "name": "Face.deleteMany",
        "import_path": "Face.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "Result of the updateMany operation indicating how many documents were modified."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "customRecognition.js",
    "method_name": "matchedFaces",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "profileImageId",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function finds faces that are matched with a particular profile image within a specified album.",
    "inner_function_calls": [
      {
        "name": "Face.find",
        "import_path": "Face.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "An array of face objects that match the given profileImageId and albumId."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "customRecognition.js",
    "method_name": "updateUserProfileImageEmbedding",
    "input_params": [
      {
        "type": "string",
        "name": "userId",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "updatedEmbedding",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function updates a user's profile image embedding by finding the user and modifying the embedding with the new data.",
    "inner_function_calls": [
      {
        "name": "User.findById",
        "import_path": "User.js"
      },
      {
        "name": "User.findByIdAndUpdate",
        "import_path": "User.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The updated user object with the new embedding."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "embedding.js",
    "method_name": "cosineSimilarity",
    "input_params": [
      {
        "type": "Array",
        "name": "embedding1",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "Array",
        "name": "embedding2",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "This function calculates the cosine similarity between two input face embeddings using the dot product and norms of the embeddings. It first computes the dot product of the two embeddings and then retrieves their norms. Finally, it divides the dot product by the product of the norms to get the cosine similarity score.",
    "inner_function_calls": [
      {
        "name": "dot",
        "import_path": "mathjs"
      },
      {
        "name": "norm",
        "import_path": "mathjs"
      },
      {
        "name": "norm",
        "import_path": "mathjs"
      }
    ],
    "output": {
      "type": "Number",
      "description": "The cosine similarity score between the two embeddings."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "embedding.js",
    "method_name": "verifyEmbeddings",
    "input_params": [
      {
        "type": "Array",
        "name": "embedding1",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "Array",
        "name": "embedding2",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "This function verifies if two face embeddings belong to the same person by comparing their cosine similarity score against a defined threshold. It retrieves the verification threshold and operator from the config and then calculates the cosine similarity. Depending on the operator, it checks if the similarity score meets the threshold criteria to determine if the embeddings are from the same person or not.",
    "inner_function_calls": [
      {
        "name": "cosineSimilarity",
        "import_path": ""
      }
    ],
    "output": {
      "type": "Object",
      "description": "An object containing 'verified' (boolean indicating if embeddings match) and 'similarityScore' (the calculated cosine similarity score)."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "embedding.js",
    "method_name": "concatenateAndReduceEmbeddings",
    "input_params": [
      {
        "type": "Array",
        "name": "embeddings",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "This function aims to concatenate multiple face embeddings and reduce their dimensionality through averaging. It takes a list of embeddings, computes their mean vector, and returns this averaged vector as the output. Note that the target dimension is indicated in the description but is not implemented in the current code.",
    "inner_function_calls": [
      {
        "name": "mean",
        "import_path": "mathjs"
      }
    ],
    "output": {
      "type": "Array",
      "description": "The averaged vector representing the concatenated embeddings."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "face.js",
    "method_name": "getAllByAlbumId",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "number",
        "name": "page",
        "is_required": "false",
        "optional_value": "1"
      },
      {
        "type": "number",
        "name": "limit",
        "is_required": "false",
        "optional_value": "1000"
      }
    ],
    "logic": "This function retrieves face embeddings associated with a specific album ID, paginates the results according to the given page and limit, and returns various metadata about the retrieved faces, including the album owner and total counts.",
    "inner_function_calls": [
      {
        "name": "Face.find",
        "import_path": "../models/Face.js"
      },
      {
        "name": "Face.countDocuments",
        "import_path": "../models/Face.js"
      },
      {
        "name": "Album.findById",
        "import_path": "../models/Album.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "An object containing the pagination information and details regarding the retrieved face embeddings, such as page number, limit, total pages, and details about the album and faces."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "face.js",
    "method_name": "getByUniqueFaceId",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "uniqueFaceId",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function retrieves face records associated with a unique face ID in a specific album, and collects details about those faces and the album, returning them in a structured result.",
    "inner_function_calls": [
      {
        "name": "Face.find",
        "import_path": "../models/Face.js"
      },
      {
        "name": "Album.findById",
        "import_path": "../models/Album.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "An object containing information about the album, the count of matched faces, and the list of matched face IDs and images."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "face.js",
    "method_name": "getFaces",
    "input_params": [
      {
        "type": "object",
        "name": "filter",
        "is_required": "false",
        "optional_value": "{}"
      },
      {
        "type": "object",
        "name": "project",
        "is_required": "false",
        "optional_value": "{}"
      }
    ],
    "logic": "This function retrieves faces from the database according to the provided filter and project parameters, allowing for flexible querying of face records.",
    "inner_function_calls": [
      {
        "name": "Face.find",
        "import_path": "../models/Face.js"
      }
    ],
    "output": {
      "type": "array",
      "description": "An array of face objects that match the given filter criteria."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "face.js",
    "method_name": "getUnprocessedAlbumFaces",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function retrieves face records from the database that belong to a specific album and that have embeddings that exist.",
    "inner_function_calls": [
      {
        "name": "Face.aggregate",
        "import_path": "../models/Face.js"
      }
    ],
    "output": {
      "type": "array",
      "description": "An array of face objects that have embeddings for the specified album."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "face.js",
    "method_name": "getUnclusteredAlbumFaces",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function retrieves faces from a specific album that are either not clustered or do not have the clustered property defined.",
    "inner_function_calls": [
      {
        "name": "Face.aggregate",
        "import_path": "../models/Face.js"
      }
    ],
    "output": {
      "type": "array",
      "description": "An array of faces that are unclustered for the specified album."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "face.js",
    "method_name": "createFace",
    "input_params": [
      {
        "type": "object",
        "name": "data",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function creates a new face record in the database using the provided data, and then saves it, returning the ID of the newly created record.",
    "inner_function_calls": [
      {
        "name": "Face.save",
        "import_path": "../models/Face.js"
      }
    ],
    "output": {
      "type": "string",
      "description": "The ID of the newly created face record as a string."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "face.js",
    "method_name": "createManyFaces",
    "input_params": [
      {
        "type": "object",
        "name": "data",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function creates multiple face records from the provided embedding data and saves them to the database, returning the result of the insert operation.",
    "inner_function_calls": [
      {
        "name": "Face.insertMany",
        "import_path": "../models/Face.js"
      }
    ],
    "output": {
      "type": "array",
      "description": "An array of the inserted face records returned from the database."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "face.js",
    "method_name": "updateFace",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "updatedData",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "updatedBy",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function updates an existing face record identified by the given ID, applying the specified updates and including metadata about who updated it.",
    "inner_function_calls": [
      {
        "name": "Face.findByIdAndUpdate",
        "import_path": "../models/Face.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The updated face record returned after the update operation."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "face.js",
    "method_name": "updateMatch",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "matchedProfileImage",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "number",
        "name": "similarityScore",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "updatedBy",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function updates matching properties of an existing face record by its ID, setting the matched profile image and similarity score.",
    "inner_function_calls": [
      {
        "name": "Face.findByIdAndUpdate",
        "import_path": "../models/Face.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The updated face record after the match update operation."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "face.js",
    "method_name": "groupByRekognition",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function groups faces in an album by using a comparison of their features, identifying unique faces and matching them into groups.",
    "inner_function_calls": [
      {
        "name": "Face.find",
        "import_path": "../models/Face.js"
      },
      {
        "name": "Album.findById",
        "import_path": "../models/Album.js"
      },
      {
        "name": "compareFaces",
        "import_path": "./rekognition.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "An object representing the groups of unique faces along with their matched faces."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "face.js",
    "method_name": "filterByFace",
    "input_params": [
      {
        "type": "string",
        "name": "guestId",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "albumId",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function filters a list of faces in an album by comparing them against a specific guest's image, returning matched faces and images.",
    "inner_function_calls": [
      {
        "name": "Guest.findById",
        "import_path": "../models/Guest.js"
      },
      {
        "name": "Album.findById",
        "import_path": "../models/Album.js"
      },
      {
        "name": "Face.find",
        "import_path": "../models/Face.js"
      },
      {
        "name": "compareFaces",
        "import_path": "./rekognition.js"
      },
      {
        "name": "Guest.findByIdAndUpdate",
        "import_path": "../models/Guest.js"
      },
      {
        "name": "sendEmail",
        "import_path": "./ses.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "An object containing the album name, owner, matched groups of faces, and images for the guest."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "filterImage.js",
    "method_name": "getFilteredImages",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "userId",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function retrieves filtered images from the database associated with a specific album and user. It performs a find operation on the FilteredImages model, using albumId and userId as filter criteria.",
    "inner_function_calls": [
      {
        "name": "find",
        "import_path": "../models/FilteredImages.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns the first matching filtered image document or an empty object if no match is found."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "filterImage.js",
    "method_name": "getAlbumUnprocessedFilteredImages",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function retrieves all unprocessed filtered images from the database for a given album. It uses the aggregate method to perform a match operation in the FilteredImages model, looking specifically for documents where isProcessed is false.",
    "inner_function_calls": [
      {
        "name": "aggregate",
        "import_path": "../models/FilteredImages.js"
      }
    ],
    "output": {
      "type": "array",
      "description": "Returns an array of unprocessed filtered image documents."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "filterImage.js",
    "method_name": "createFilteredImages",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "userId",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "array",
        "name": "images",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function creates a new filtered image entry in the database. It constructs a new instance of the FilteredImages model with the provided albumId, userId, and images, and then saves it to the database.",
    "inner_function_calls": [
      {
        "name": "FilteredImages",
        "import_path": "../models/FilteredImages.js"
      },
      {
        "name": "save",
        "import_path": "../models/FilteredImages.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns the newly created filtered image document."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "filterImage.js",
    "method_name": "updatedFilteredImages",
    "input_params": [
      {
        "type": "string",
        "name": "filteredImagesId",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "updatedData",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function updates an existing filtered image document in the database based on the provided filteredImagesId. It uses the findByIdAndUpdate method to update the document with the new data specified in updatedData, returning the updated document.",
    "inner_function_calls": [
      {
        "name": "findByIdAndUpdate",
        "import_path": "../models/FilteredImages.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns the updated filtered image document."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "filterImage.js",
    "method_name": "addFilteredImages",
    "input_params": [
      {
        "type": "string",
        "name": "filteredImagesId",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "array",
        "name": "images",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function adds images to an existing filtered image document in the database. It uses the findByIdAndUpdate method to update the images field by adding new images using the $addToSet operator to ensure uniqueness.",
    "inner_function_calls": [
      {
        "name": "findByIdAndUpdate",
        "import_path": "../models/FilteredImages.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns the updated filtered image document with the added images."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "folder.js",
    "method_name": "getAllAlbumFolders",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Fetches all folders associated with a specific album, excluding their images, from the Folder collection in the MongoDB database.",
    "inner_function_calls": [],
    "output": {
      "type": "Array",
      "description": "An array of folder documents associated with the provided album ID, excluding the images."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "folder.js",
    "method_name": "getFolder",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "userEmail",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Retrieves a folder by its ID, along with the associated album information. It checks if the provided userEmail is the album owner or has sharing permissions. If the user is authorized, it formats the images according to their ownership status and includes a count of total images.",
    "inner_function_calls": [
      {
        "name": "Folder.aggregate",
        "import_path": "../models/Folder.js"
      },
      {
        "name": "mongoose.Types.ObjectId",
        "import_path": "mongoose"
      }
    ],
    "output": {
      "type": "object",
      "description": "An object representing the folder data including the filtered images and album details, or an unauthorized message if access is denied."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "folder.js",
    "method_name": "getFilteredImages",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "sharedUserEmail",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "userEmail",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Fetches the images from a folder for a specified user, filtering them based on face match criteria from a profile image. It checks which images the user has access to and returns only those.",
    "inner_function_calls": [
      {
        "name": "Folder.findById",
        "import_path": "../models/Folder.js"
      },
      {
        "name": "User.findOne",
        "import_path": "../models/rbac/User.js"
      },
      {
        "name": "Face.aggregate",
        "import_path": "../models/Face.js"
      }
    ],
    "output": {
      "type": "Array",
      "description": "An array of image IDs that the specified user can access, filtered based on shared access and matching profile image."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "folder.js",
    "method_name": "addImages",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "Array",
        "name": "images",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "userEmail",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Adds new images to a folder, specifically updating the images array for the user identified by userEmail while ensuring no duplicates are introduced.",
    "inner_function_calls": [
      {
        "name": "Folder.updateOne",
        "import_path": "../models/Folder.js"
      },
      {
        "name": "mongoose.Types.ObjectId",
        "import_path": "mongoose"
      }
    ],
    "output": {
      "type": "string",
      "description": "A confirmation message indicating that images have been successfully added."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "folder.js",
    "method_name": "createFolder",
    "input_params": [
      {
        "type": "object",
        "name": "folderData",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "createdBy",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Creates a new folder document in the collection based on the provided folder data and the creator's details, and saves the document to the database.",
    "inner_function_calls": [
      {
        "name": "Folder.save",
        "import_path": "../models/Folder.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The newly created folder document."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "folder.js",
    "method_name": "updateFolder",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "updatedData",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "updatedBy",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Updates an existing folder's details with new information while maintaining record of who performed the update.",
    "inner_function_calls": [
      {
        "name": "Folder.updateOne",
        "import_path": "../models/Folder.js"
      },
      {
        "name": "mongoose.Types.ObjectId",
        "import_path": "mongoose"
      }
    ],
    "output": {
      "type": "object",
      "description": "The result of the update operation from the database."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "folder.js",
    "method_name": "deleteImages",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "Array",
        "name": "images",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "ownerEmail",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "albumId",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Deletes specified images from a folder, ensuring that any images deleted from the database are also removed from the corresponding S3 bucket. It counts the images deleted and processes the delete requests accordingly.",
    "inner_function_calls": [
      {
        "name": "Folder.updateOne",
        "import_path": "../models/Folder.js"
      },
      {
        "name": "s3.deleteObject",
        "import_path": "aws-sdk"
      }
    ],
    "output": {
      "type": "string",
      "description": "A confirmation message indicating the number of images that were deleted."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "folder.js",
    "method_name": "deleteFolder",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Deletes a folder from the database and takes care of removing all associated images from both the folder and the S3 bucket, if any exist.",
    "inner_function_calls": [
      {
        "name": "Folder.findById",
        "import_path": "../models/Folder.js"
      },
      {
        "name": "Album.findById",
        "import_path": "../models/Album.js"
      },
      {
        "name": "Folder.findByIdAndDelete",
        "import_path": "../models/Folder.js"
      },
      {
        "name": "deleteImages",
        "import_path": ""
      }
    ],
    "output": {
      "type": "string",
      "description": "A confirmation message that the folder has been deleted."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "guest.js",
    "method_name": "createGuest",
    "input_params": [
      {
        "type": "object",
        "name": "data",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Creates a new guest entry in the database using the provided data, including imageId, albumId, matchedFaces, email, and name. It saves the new guest document using Mongoose's .save() method.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns the created guest object."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "guest.js",
    "method_name": "getGuestById",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Fetches a guest by their unique identifier, id. It constructs a MongoDB aggregation pipeline to retrieve the guest details along with associated album information using a left join operation (lookup) and processes the results to return a formatted object.",
    "inner_function_calls": [
      {
        "name": "new mongoose.Types.ObjectId",
        "import_path": "mongoose"
      },
      {
        "name": "Guest.aggregate",
        "import_path": "../models/Guest.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns the guest object with album information, or undefined if not found."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "guest.js",
    "method_name": "filterImages",
    "input_params": [
      {
        "type": "string",
        "name": "guestId",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Filters images associated with a guest. It compares the guest's image against other guests in the same album to find matches. If matches are found, it collects matched images, updates the guest's database entry to indicate the filtering state, and returns the filtered images.",
    "inner_function_calls": [
      {
        "name": "Guest.findById",
        "import_path": "../models/Guest.js"
      },
      {
        "name": "compareFaces",
        "import_path": "./rekognition.js"
      },
      {
        "name": "Guest.find",
        "import_path": "../models/Guest.js"
      },
      {
        "name": "Album.findById",
        "import_path": "../models/Album.js"
      },
      {
        "name": "listObjectsFromS3",
        "import_path": "./s3.js"
      },
      {
        "name": "Guest.findByIdAndUpdate",
        "import_path": "../models/Guest.js"
      }
    ],
    "output": {
      "type": "array",
      "description": "Returns an array of filtered image identifiers."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "image.js",
    "method_name": "createImage",
    "input_params": [
      {
        "type": "object",
        "name": "imageData",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "createdBy",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function creates a new image instance using the provided image data and the created by user. It uses the Image model to instantiate an image object and saves it to the database. Finally, it returns the string representation of the image's ID.",
    "inner_function_calls": [
      {
        "name": "new Image",
        "import_path": "../models/Image.js"
      },
      {
        "name": "image.save",
        "import_path": "../models/Image.js"
      }
    ],
    "output": {
      "type": "string",
      "description": "The string representation of the newly created image's ID."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "image.js",
    "method_name": "getAllUnprocessedImages",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function retrieves all images that have not been processed from the database. It constructs a MongoDB aggregation pipeline that matches images based on their processed status and optionally filters by the provided album ID. The results are enriched with album information and returned.",
    "inner_function_calls": [
      {
        "name": "Image.aggregate",
        "import_path": "../models/Image.js"
      }
    ],
    "output": {
      "type": "array",
      "description": "An array of unprocessed images with their details."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "image.js",
    "method_name": "getAllImages",
    "input_params": [
      {
        "type": "object",
        "name": "filter",
        "is_required": "",
        "optional_value": "{}"
      },
      {
        "type": "object",
        "name": "project",
        "is_required": "",
        "optional_value": "{}"
      }
    ],
    "logic": "This function retrieves all images from the database based on specified filter and projection parameters. It executes a find query using the Image model and returns the results.",
    "inner_function_calls": [
      {
        "name": "Image.find",
        "import_path": "../models/Image.js"
      }
    ],
    "output": {
      "type": "array",
      "description": "An array of images matching the filter criteria."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "image.js",
    "method_name": "getImage",
    "input_params": [
      {
        "type": "string",
        "name": "imageId",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "project",
        "is_required": "",
        "optional_value": "{}"
      }
    ],
    "logic": "This function retrieves a single image by its ID from the database. It performs a find operation and returns the first result if found, otherwise returns an empty object.",
    "inner_function_calls": [
      {
        "name": "Image.find",
        "import_path": "../models/Image.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "An object representing the image if found, or an empty object."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "image.js",
    "method_name": "updateImage",
    "input_params": [
      {
        "type": "string",
        "name": "imageId",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "updatedData",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "updatedBy",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function updates an image's data in the database using the provided image ID, updated data, and user who updated it. It executes an update operation and returns the result of the update action.",
    "inner_function_calls": [
      {
        "name": "Image.updateOne",
        "import_path": "../models/Image.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "An object representing the result of the update operation."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "imageCustom.js",
    "method_name": "createImage",
    "input_params": [
      {
        "type": "object",
        "name": "imageData",
        "is_required": "/true/",
        "optional_value": "null"
      }
    ],
    "logic": "The createImage function is an asynchronous function that takes an 'imageData' object as input, extracts properties like albumId, imageId, faces, and createdBy from it, constructs a new ImageCustom instance using these properties, saves the image instance to the database, and does not return any value (undefined).",
    "inner_function_calls": [
      {
        "name": "save",
        "import_path": "../models/ImageCustom.js"
      }
    ],
    "output": {
      "type": "undefined",
      "description": "This function does not return a value."
    }
  },
  {
    "folder_path": "src/services/rbac",
    "module_name": "role.js",
    "method_name": "getAllRoles",
    "input_params": [],
    "logic": "The function retrieves all role records from the database using the Role model's find method.",
    "inner_function_calls": [
      {
        "name": "find",
        "import_path": "../../models/rbac/Role.js"
      }
    ],
    "output": {
      "type": "array",
      "description": "An array of role objects representing all the roles in the database."
    }
  },
  {
    "folder_path": "src/services/rbac",
    "module_name": "role.js",
    "method_name": "getRoleByName",
    "input_params": [
      {
        "type": "string",
        "name": "name",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function retrieves a single role record from the database by the role's name using the Role model's findOne method.",
    "inner_function_calls": [
      {
        "name": "findOne",
        "import_path": "../../models/rbac/Role.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "A role object representing the role retrieved from the database by name, or null if not found."
    }
  },
  {
    "folder_path": "src/services/rbac",
    "module_name": "user.js",
    "method_name": "getAllUsers",
    "input_params": [
      {
        "type": "object",
        "name": "filter",
        "is_required": "",
        "optional_value": "{}"
      },
      {
        "type": "object",
        "name": "project",
        "is_required": "",
        "optional_value": "{}"
      }
    ],
    "logic": "This function retrieves all users from the database that match the given filter and projection. It ensures that the 'embedding' field is excluded from the results.",
    "inner_function_calls": [],
    "output": {
      "type": "Promise<Array<User>>",
      "description": "Returns a promise that resolves to an array of User objects that match the provided filter."
    }
  },
  {
    "folder_path": "src/services/rbac",
    "module_name": "user.js",
    "method_name": "getUser",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function fetches a single user from the database by their unique identifier (id).",
    "inner_function_calls": [],
    "output": {
      "type": "Promise<User>",
      "description": "Returns a promise that resolves to a User object corresponding to the provided id."
    }
  },
  {
    "folder_path": "src/services/rbac",
    "module_name": "user.js",
    "method_name": "getUserByEmail",
    "input_params": [
      {
        "type": "string",
        "name": "email",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function looks up a user in the database using their email address and excludes the 'embedding' field in the result.",
    "inner_function_calls": [],
    "output": {
      "type": "Promise<User>",
      "description": "Returns a promise that resolves to a User object matching the provided email address, or null if no user is found."
    }
  },
  {
    "folder_path": "src/services/rbac",
    "module_name": "user.js",
    "method_name": "createUser",
    "input_params": [
      {
        "type": "object",
        "name": "user",
        "is_required": "true",
        "optional_value": "undefined"
      },
      {
        "type": "string",
        "name": "createdBy",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function creates a new user in the database using the provided user details and the creator's identifier. It returns the saved User object.",
    "inner_function_calls": [],
    "output": {
      "type": "Promise<User>",
      "description": "Returns a promise that resolves to the newly created User object."
    }
  },
  {
    "folder_path": "src/services/rbac",
    "module_name": "user.js",
    "method_name": "createGuestUser",
    "input_params": [],
    "logic": "This function creates a guest user in the database with default values, specifically assigning a name of 'guest' and dynamically generating an email address based on the user's ID.",
    "inner_function_calls": [],
    "output": {
      "type": "Promise<User>",
      "description": "Returns a promise that resolves to the newly created guest User object."
    }
  },
  {
    "folder_path": "src/services/rbac",
    "module_name": "user.js",
    "method_name": "generateUserProfileImageEmbedding",
    "input_params": [
      {
        "type": "string",
        "name": "userId",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This private function sends a PUT request to an external service to process the user's profile image based on their user ID. It handles any errors but does not return data.",
    "inner_function_calls": [
      {
        "name": "axios.put",
        "import_path": "axios"
      }
    ],
    "output": {
      "type": "undefined",
      "description": "No output is returned as this function handles image processing in the background."
    }
  },
  {
    "folder_path": "src/services/rbac",
    "module_name": "user.js",
    "method_name": "updateUser",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "updatedData",
        "is_required": "true",
        "optional_value": "undefined"
      },
      {
        "type": "string",
        "name": "updatedBy",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function updates an existing user's data in the database using the provided user ID. If the user's profile image is changed, it triggers an embedding generation for the new profile image.",
    "inner_function_calls": [
      {
        "name": "generateUserProfileImageEmbedding",
        "import_path": "."
      },
      {
        "name": "User.findByIdAndUpdate",
        "import_path": "../../models/rbac/User.js"
      }
    ],
    "output": {
      "type": "Promise<User>",
      "description": "Returns a promise that resolves to the updated User object."
    }
  },
  {
    "folder_path": "src/services/rbac",
    "module_name": "user.js",
    "method_name": "updateUserByEmail",
    "input_params": [
      {
        "type": "string",
        "name": "email",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "updatedData",
        "is_required": "true",
        "optional_value": "undefined"
      },
      {
        "type": "string",
        "name": "updatedBy",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function updates a user's information based on their email. If no user matches the email, it creates a new user. It also handles profile image updates.",
    "inner_function_calls": [
      {
        "name": "User.findOneAndUpdate",
        "import_path": "../../models/rbac/User.js"
      },
      {
        "name": "createUser",
        "import_path": "."
      },
      {
        "name": "generateUserProfileImageEmbedding",
        "import_path": ".decorator.js"
      }
    ],
    "output": {
      "type": "Promise<User>",
      "description": "Returns a promise that resolves to the updated User object, or a newly created User object if no matching user was found."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "rekognition.js",
    "method_name": "compareFaces",
    "input_params": [
      {
        "type": "string",
        "name": "sourceImageKey",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "targetImageKey",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function compares two faces using AWS Rekognition service. It takes two image keys as input and returns the matches found by the comparison.",
    "inner_function_calls": [
      {
        "name": "rekognition.compareFaces",
        "import_path": "aws-sdk"
      }
    ],
    "output": {
      "type": "array",
      "description": "An array of face matches found between the source and target images."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "rekognition.js",
    "method_name": "createCollection",
    "input_params": [
      {
        "type": "string",
        "name": "collectionId",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function creates a new collection in AWS Rekognition with the specified collection ID.",
    "inner_function_calls": [
      {
        "name": "rekognition.createCollection",
        "import_path": "aws-sdk"
      }
    ],
    "output": {
      "type": "object",
      "description": "The result of the collection creation operation."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "rekognition.js",
    "method_name": "listFaces",
    "input_params": [
      {
        "type": "string",
        "name": "collectionId",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function lists all faces in a specified collection using AWS Rekognition.",
    "inner_function_calls": [
      {
        "name": "rekognition.listFaces",
        "import_path": "aws-sdk"
      }
    ],
    "output": {
      "type": "object",
      "description": "The result containing a list of faces in the specified collection."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "rekognition.js",
    "method_name": "indexProfileImage",
    "input_params": [
      {
        "type": "string",
        "name": "userProfileImage",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "userEmail",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function indexes a user profile image to all albums the user has been shared with. It fetches shared albums based on the user's email and indexes the profile image in each album.",
    "inner_function_calls": [
      {
        "name": "getAllSharedAlbums",
        "import_path": "./album.js"
      },
      {
        "name": "indexFaces",
        "import_path": "none"
      }
    ],
    "output": {
      "type": "undefined",
      "description": "This function does not return a value."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "rekognition.js",
    "method_name": "indexFaces",
    "input_params": [
      {
        "type": "string",
        "name": "collectionId",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "imageId",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "imageKey",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function indexes a face in a specified collection. It uses an image from S3 to index the face, either from the provided image key or constructs it using the image ID.",
    "inner_function_calls": [
      {
        "name": "rekognition.indexFaces",
        "import_path": "aws-sdk"
      }
    ],
    "output": {
      "type": "object",
      "description": "The result of the indexing operation, including face details."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "rekognition.js",
    "method_name": "ensureCollectionExists",
    "input_params": [
      {
        "type": "string",
        "name": "collectionId",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function checks if a specified collection exists. If it doesn't, it creates the collection.",
    "inner_function_calls": [
      {
        "name": "rekognition.describeCollection",
        "import_path": "aws-sdk"
      },
      {
        "name": "createCollection",
        "import_path": "none"
      }
    ],
    "output": {
      "type": "undefined",
      "description": "This function does not return a value."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "rekognition.js",
    "method_name": "detectFaces",
    "input_params": [
      {
        "type": "string",
        "name": "imageKey",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function detects faces in the provided image using AWS Rekognition.",
    "inner_function_calls": [
      {
        "name": "rekognition.detectFaces",
        "import_path": "aws-sdk"
      }
    ],
    "output": {
      "type": "array",
      "description": "An array of face details detected in the image."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "rekognition.js",
    "method_name": "getS3Image",
    "input_params": [
      {
        "type": "string",
        "name": "imageKey",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function retrieves an image from an S3 bucket using the provided image key.",
    "inner_function_calls": [
      {
        "name": "s3.getObject",
        "import_path": "aws-sdk"
      }
    ],
    "output": {
      "type": "buffer",
      "description": "The image data retrieved from S3."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "rekognition.js",
    "method_name": "cropFace",
    "input_params": [
      {
        "type": "buffer",
        "name": "imageBuffer",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "boundingBox",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function crops a face from an image buffer using the provided bounding box dimensions.",
    "inner_function_calls": [
      {
        "name": "sharp",
        "import_path": "sharp"
      },
      {
        "name": "image.metadata",
        "import_path": "none"
      },
      {
        "name": "image.extract",
        "import_path": "none"
      }
    ],
    "output": {
      "type": "buffer",
      "description": "The cropped face image buffer."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "rekognition.js",
    "method_name": "searchFaces",
    "input_params": [
      {
        "type": "string",
        "name": "collectionId",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "buffer",
        "name": "croppedFaceBuffer",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "number",
        "name": "maxFaces",
        "is_required": "",
        "optional_value": "config.max_face_search"
      },
      {
        "type": "number",
        "name": "faceMatchThreshold",
        "is_required": "",
        "optional_value": "config.face_match_threshold"
      }
    ],
    "logic": "This function searches for faces in a collection using a cropped face buffer. It allows specifying the maximum number of faces to return and the face match threshold.",
    "inner_function_calls": [
      {
        "name": "rekognition.searchFacesByImage",
        "import_path": "aws-sdk"
      }
    ],
    "output": {
      "type": "object",
      "description": "The result of the face search operation, including matched faces."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "rekognition.js",
    "method_name": "processImage",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "imageId",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "createdBy",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function processes an image by fetching face details, retrieving the image from S3, and creating an image with matched faces by cropping detected faces and searching them in a participant collection.",
    "inner_function_calls": [
      {
        "name": "Album.findById",
        "import_path": "../models/Album.js"
      },
      {
        "name": "detectFaces",
        "import_path": "none"
      },
      {
        "name": "getS3Image",
        "import_path": "none"
      },
      {
        "name": "cropFace",
        "import_path": "none"
      },
      {
        "name": "searchFaces",
        "import_path": "none"
      },
      {
        "name": "Promise.all",
        "import_path": "none"
      },
      {
        "name": "createImage",
        "import_path": "./image.js"
      }
    ],
    "output": {
      "type": "undefined",
      "description": "This function does not return a value."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "s3.js",
    "method_name": "listObjectsFromS3",
    "input_params": [
      {
        "type": "string",
        "name": "Prefix",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "ContinuationToken",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "number",
        "name": "MaxKeys",
        "is_required": "",
        "optional_value": "100"
      }
    ],
    "logic": "This function lists objects from an S3 bucket. It constructs parameters for the AWS S3 listObjectsV2 API call using the provided prefix, continuation token (if any), and maximum number of keys to return. The method handles an optional continuation token and performs the API call asynchronously, returning the result of the call.",
    "inner_function_calls": [
      {
        "name": "listObjectsV2",
        "import_path": "aws-sdk"
      }
    ],
    "output": {
      "type": "object",
      "description": "The output is the result of the listObjectsV2 API call, which contains a list of objects stored in the specified S3 bucket under the given prefix."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "ses.js",
    "method_name": "sendEmail",
    "input_params": [
      {
        "type": "string",
        "name": "emailAddress",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "string",
        "name": "subject",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "string",
        "name": "body",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "string",
        "name": "sourceSubDomain",
        "is_required": "",
        "optional_value": "api"
      }
    ],
    "logic": "This function sends an email using AWS Simple Email Service (SES). It constructs the email with the provided email address, subject, body, and a source subdomain that defaults to 'api'. The email is sent asynchronously using the SES service, and if the operation is successful, the Message ID of the sent email is returned. If an error occurs while sending the email, it logs the error to the console but does not return any value.",
    "inner_function_calls": [
      {
        "name": "sendEmail",
        "import_path": "AWS.SES"
      },
      {
        "name": "promise",
        "import_path": "AWS.SES.sendEmail"
      }
    ],
    "output": {
      "type": "string",
      "description": "The unique Message ID of the sent email. If an error occurs, it returns undefined."
    }
  },
  {
    "folder_path": "src/utils",
    "module_name": "logger.js",
    "method_name": "createLogger",
    "input_params": [
      {
        "type": "object",
        "name": "options",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function is called to create a new logger instance using the provided options, which specify the level, format, and transports for logging output.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a logger instance configured according to the supplied options."
    }
  },
  {
    "folder_path": "src/utils",
    "module_name": "logger.js",
    "method_name": "transports.Console",
    "input_params": [],
    "logic": "This is a constructor call to create a console transport, allowing log messages to be output to the console.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a transport object that writes logs to the console."
    }
  },
  {
    "folder_path": "src/utils",
    "module_name": "logger.js",
    "method_name": "transports.File",
    "input_params": [
      {
        "type": "object",
        "name": "options",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This constructor creates a file transport that writes logs to a specified file, in this case, 'app.log'.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a transport object that writes logs to the specified file."
    }
  }
]