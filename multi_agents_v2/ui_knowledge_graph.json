[
  {
    "folder_path": "",
    "module_name": "global",
    "method_name": "global_setup",
    "input_params": [
      {
        "type": "function",
        "name": "async",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function is an asynchronous global setup hook that loads environment variables and provides a place for further global configurations, which is especially useful in testing scenarios within Next.js applications.",
    "inner_function_calls": [
      {
        "name": "config",
        "import_path": "dotenv"
      }
    ],
    "output": {
      "type": "undefined",
      "description": "The function does not return a value, as it is meant for setting up the environment."
    }
  },
  {
    "folder_path": "",
    "module_name": "playwright.config.js",
    "method_name": "defineConfig",
    "input_params": [
      {
        "type": "object",
        "name": "config",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "The function `defineConfig` is used to create a configuration object for Playwright's test framework, allowing developers to specify various testing settings and parameters in a straightforward way.",
    "inner_function_calls": [
      {
        "name": "require",
        "import_path": "@playwright/test"
      }
    ],
    "output": {
      "type": "object",
      "description": "The function returns a configuration object that Playwright uses for running tests, including settings like timeout, test directory, retries, reporting, and project configuration."
    }
  },
  {
    "folder_path": "",
    "module_name": "playwright.config.js",
    "method_name": "require.resolve",
    "input_params": [
      {
        "type": "string",
        "name": "module",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "The `require.resolve` function is used to get the full path of the module specified, which in this case is the global setup module needed for tests.",
    "inner_function_calls": [],
    "output": {
      "type": "string",
      "description": "Returns the resolved path of the module (in this case, './global-setup'), which will be used for global test configuration."
    }
  },
  {
    "folder_path": "src/api/main",
    "module_name": "albums.js",
    "method_name": "getAlbum",
    "input_params": [
      {
        "type": "object",
        "name": "id",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Fetches a specific album based on the provided ID by calling the main API's getAlbum method. It retrieves the user's idToken before making the request, which is a common practice to ensure secure API access in Next.js applications.",
    "inner_function_calls": [
      {
        "name": "getTokens",
        "import_path": "@/src/utils/functions"
      },
      {
        "name": "mainApi.getAlbum",
        "import_path": "@/src/utils/apiInstance.js/mainInstance"
      }
    ],
    "output": {
      "type": "Promise",
      "description": "Returns a promise that resolves to the album data fetched from the API."
    }
  },
  {
    "folder_path": "src/api/main",
    "module_name": "albums.js",
    "method_name": "createAlbum",
    "input_params": [
      {
        "type": "object",
        "name": "formData",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Creates a new album by sending form data to the main API's createAlbum method. The idToken is retrieved to ensure that the request is authenticated, adhering to best practices for security in Next.js API interactions.",
    "inner_function_calls": [
      {
        "name": "getTokens",
        "import_path": "@/src/utils/functions"
      },
      {
        "name": "mainApi.createAlbum",
        "import_path": "@/src/utils/apiInstance.js/mainInstance"
      }
    ],
    "output": {
      "type": "Promise",
      "description": "Returns a promise that resolves to the response from the API, indicating the result of the album creation."
    }
  },
  {
    "folder_path": "src/api/main",
    "module_name": "albums.js",
    "method_name": "getAllAlbums",
    "input_params": [],
    "logic": "Retrieves a list of all albums by calling the getAllAlbums method on the main API. This function ensures that the user is authenticated by obtaining their idToken before making the API request.",
    "inner_function_calls": [
      {
        "name": "getTokens",
        "import_path": "@/src/utils/functions"
      },
      {
        "name": "mainApi.getAllAlbums",
        "import_path": "@/src/utils/apiInstance.js/mainInstance"
      }
    ],
    "output": {
      "type": "Promise",
      "description": "Returns a promise that resolves to the list of all albums fetched from the API."
    }
  },
  {
    "folder_path": "src/api/main",
    "module_name": "albums.js",
    "method_name": "shareAlbum",
    "input_params": [
      {
        "type": "object",
        "name": "formData",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "id",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Shares an album using the provided form data and album ID. Like other functions, it retrieves the userâ€™s idToken to authenticate the request and communicates with the main API's shareAlbum method.",
    "inner_function_calls": [
      {
        "name": "getTokens",
        "import_path": "@/src/utils/functions"
      },
      {
        "name": "mainApi.shareAlbum",
        "import_path": "@/src/utils/apiInstance.js/mainInstance"
      }
    ],
    "output": {
      "type": "Promise",
      "description": "Returns a promise resolving to the response from the API, indicating the result of the album sharing."
    }
  },
  {
    "folder_path": "src/api/main",
    "module_name": "albums.js",
    "method_name": "updateAlbum",
    "input_params": [
      {
        "type": "object",
        "name": "formData",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "id",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Updates a specific album's details using the provided form data and album ID. The function ensures proper authentication by obtaining an idToken before calling the main API's updateAlbum method.",
    "inner_function_calls": [
      {
        "name": "getTokens",
        "import_path": "@/src/utils/functions"
      },
      {
        "name": "mainApi.updateAlbum",
        "import_path": "@/src/utils/apiInstance.js/mainInstance"
      }
    ],
    "output": {
      "type": "Promise",
      "description": "Returns a promise that resolves to the response from the API, reflecting the result of the album update."
    }
  },
  {
    "folder_path": "src/api/main",
    "module_name": "folder.js",
    "method_name": "getFolderbyAlbumId",
    "input_params": [
      {
        "type": "object",
        "name": "id",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Fetches folder data by its associated album ID. Utilizes the getTokens method to obtain an authorization token before calling the mainApi to retrieve the folder information.",
    "inner_function_calls": [
      {
        "name": "getTokens",
        "import_path": "@/src/utils/functions"
      },
      {
        "name": "mainApi.getFolderbyAlbumId",
        "import_path": "@/src/utils/apiInstance.js/mainInstance"
      }
    ],
    "output": {
      "type": "Promise",
      "description": "A promise that resolves to the folder data associated with the given album ID."
    }
  },
  {
    "folder_path": "src/api/main",
    "module_name": "folder.js",
    "method_name": "getFolder",
    "input_params": [
      {
        "type": "object",
        "name": "id",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Retrieves folder data using the specified ID. It first gets the necessary authorization token through getTokens and then calls mainApi to fetch the folder details.",
    "inner_function_calls": [
      {
        "name": "getTokens",
        "import_path": "@/src/utils/functions"
      },
      {
        "name": "mainApi.getFolder",
        "import_path": "@/src/utils/apiInstance.js/mainInstance"
      }
    ],
    "output": {
      "type": "Promise",
      "description": "A promise that resolves to the folder data corresponding to the specified ID."
    }
  },
  {
    "folder_path": "src/api/main",
    "module_name": "folder.js",
    "method_name": "createFolder",
    "input_params": [
      {
        "type": "object",
        "name": "formData",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Creates a new folder using the provided form data. The function retrieves an authorization token via getTokens and then calls mainApi to create the folder.",
    "inner_function_calls": [
      {
        "name": "getTokens",
        "import_path": "@/src/utils/functions"
      },
      {
        "name": "mainApi.createFolder",
        "import_path": "@/src/utils/apiInstance.js/mainInstance"
      }
    ],
    "output": {
      "type": "Promise",
      "description": "A promise that resolves to the data of the newly created folder."
    }
  },
  {
    "folder_path": "src/api/main",
    "module_name": "folder.js",
    "method_name": "updateFolder",
    "input_params": [
      {
        "type": "object",
        "name": "formData",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "id",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Updates an existing folder with new data specified in formData. Requires both the folder ID and the updated data. It retrieves an ID token through getTokens and calls mainApi to perform the update.",
    "inner_function_calls": [
      {
        "name": "getTokens",
        "import_path": "@/src/utils/functions"
      },
      {
        "name": "mainApi.updateFolder",
        "import_path": "@/src/utils/apiInstance.js/mainInstance"
      }
    ],
    "output": {
      "type": "Promise",
      "description": "A promise that resolves to the updated folder data."
    }
  },
  {
    "folder_path": "src/api/main",
    "module_name": "folder.js",
    "method_name": "addImgFolder",
    "input_params": [
      {
        "type": "object",
        "name": "formData",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "id",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Adds an image to the specified folder using the provided form data. It first retrieves an authorization token through getTokens before calling mainApi to add the image.",
    "inner_function_calls": [
      {
        "name": "getTokens",
        "import_path": "@/src/utils/functions"
      },
      {
        "name": "mainApi.addImgFolder",
        "import_path": "@/src/utils/apiInstance.js/mainInstance"
      }
    ],
    "output": {
      "type": "Promise",
      "description": "A promise that resolves to the data of the folder after the image has been added."
    }
  },
  {
    "folder_path": "src/api/main",
    "module_name": "folder.js",
    "method_name": "deleteImgFolder",
    "input_params": [
      {
        "type": "object",
        "name": "formData",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "id",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Deletes an image from the specified folder. Requires the image data via formData and the folder ID. Uses getTokens to obtain the necessary token and then calls mainApi to execute the deletion.",
    "inner_function_calls": [
      {
        "name": "getTokens",
        "import_path": "@/src/utils/functions"
      },
      {
        "name": "mainApi.deleteImgFolder",
        "import_path": "@/src/utils/apiInstance.js/mainInstance"
      }
    ],
    "output": {
      "type": "Promise",
      "description": "A promise that resolves to the folder's data after the image has been deleted."
    }
  },
  {
    "folder_path": "src/api/main",
    "module_name": "folder.js",
    "method_name": "deleteFolder",
    "input_params": [
      {
        "type": "object",
        "name": "id",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Deletes a folder based on the provided folder ID. It retrieves an authorization ID token through getTokens and calls mainApi to perform the deletion.",
    "inner_function_calls": [
      {
        "name": "getTokens",
        "import_path": "@/src/utils/functions"
      },
      {
        "name": "mainApi.deleteFolder",
        "import_path": "@/src/utils/apiInstance.js/mainInstance"
      }
    ],
    "output": {
      "type": "Promise",
      "description": "A promise that resolves to a confirmation of the folder deletion."
    }
  },
  {
    "folder_path": "src/api/main",
    "module_name": "user.js",
    "method_name": "updateUser",
    "input_params": [
      {
        "type": "object",
        "name": "params",
        "is_required": "true",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "params.id",
        "is_required": "true",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "params.formData",
        "is_required": "true",
        "optional_value": ""
      }
    ],
    "logic": "The 'updateUser' function is an asynchronous function that takes an object containing 'id' and 'formData' as input. It retrieves an 'idToken' using the 'getTokens' function, and then it calls the 'updateUser' method from the 'mainApi' to update user data, sending the token along with the id and formData. This is typically used in Next.js for actions like updating user profiles or information on the server-side.",
    "inner_function_calls": [
      {
        "name": "getTokens",
        "import_path": "@/src/utils/functions"
      },
      {
        "name": "mainApi.updateUser",
        "import_path": "@/src/utils/apiInstance.js/mainInstance"
      }
    ],
    "output": {
      "type": "Promise",
      "description": "The output is a Promise that resolves to the response of the 'mainApi.updateUser' method, which represents the result of the user update operation. In the context of Next.js, it could be used in a server-side function or an API route to communicate with backend services."
    }
  },
  {
    "folder_path": "src/api/root",
    "module_name": "Image.js",
    "method_name": "getPreSignedUrl",
    "input_params": [
      {
        "type": "object",
        "name": "params",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "params.key",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "params.contentType",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function retrieves a pre-signed URL for uploading a file. It constructs a GET request to the API using Axios with the specified parameters, which include the key and content type of the file.",
    "inner_function_calls": [
      {
        "name": "api.get",
        "import_path": "axios"
      }
    ],
    "output": {
      "type": "Promise",
      "description": "Returns a Promise that resolves with the API response containing the pre-signed URL."
    }
  },
  {
    "folder_path": "src/api/root",
    "module_name": "Image.js",
    "method_name": "uploadFile",
    "input_params": [
      {
        "type": "object",
        "name": "params",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "params.url",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "params.file",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "params.contentType",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function uploads a file to a specified URL using a PUT request. It requires the URL, the file data, and the content type, setting the appropriate headers for the request.",
    "inner_function_calls": [
      {
        "name": "axios.put",
        "import_path": "axios"
      }
    ],
    "output": {
      "type": "Promise",
      "description": "Returns a Promise that resolves with the response from the file upload request."
    }
  },
  {
    "folder_path": "src/api/root",
    "module_name": "Image.js",
    "method_name": "getImages",
    "input_params": [
      {
        "type": "object",
        "name": "params",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "array",
        "name": "params.mediaKeys",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "params.path",
        "is_required": "",
        "optional_value": "\"\""
      }
    ],
    "logic": "This function sends a POST request to retrieve signed URLs for a list of media files. It converts the request body to JSON and sets the Content-Type header accordingly.",
    "inner_function_calls": [
      {
        "name": "fetch",
        "import_path": "window"
      }
    ],
    "output": {
      "type": "Promise",
      "description": "Returns a Promise that resolves with the response from the API containing the signed URLs."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/(comingSoon)",
    "module_name": "page.styled.js",
    "method_name": "HeroWrapper",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "margin",
        "is_required": "",
        "optional_value": "140px 0"
      }
    ],
    "logic": "Creates a styled Box component for a hero section, allowing customization through props like margin, while adhering to specified layout and theme conventions.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box component configured for the hero section."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/(comingSoon)",
    "module_name": "page.styled.js",
    "method_name": "NoFolderIcon",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Creates a styled Icon component that includes additional styling for the no-folder visual representation, specifically with left margin adjustment.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Icon component representing a no-folder state."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/(comingSoon)",
    "module_name": "page.styled.js",
    "method_name": "LottieWrapper",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Creates a styled Lottie animation wrapper with a fixed width, aligning with design specifications of the hero component.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Lottie component for animations within the hero section."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/(comingSoon)",
    "module_name": "page.styled.js",
    "method_name": "HeroTitle",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Creates a styled Box component for the hero title, with specific font weight and size to ensure visual prominence within the layout.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box component used as the title in the hero section."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/(comingSoon)",
    "module_name": "page.styled.js",
    "method_name": "HeroDescription",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Creates a styled Box component intended for the description in the hero section, defining its color and font size for consistency and readability.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box component used for the hero section's description."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/[folderId]",
    "module_name": "page.styled.js",
    "method_name": "FolderCoverImageCard",
    "input_params": [],
    "logic": "This function creates a styled component based on MUI's Card component. It sets specific styles like margin and height, allowing for easy reuse within Next.js applications, particularly for organizing UI layout.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Card component with specified styles."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/[folderId]",
    "module_name": "page.styled.js",
    "method_name": "FolderCoverImageTabs",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "true",
        "optional_value": ""
      }
    ],
    "logic": "This function creates a styled Tabs component based on MUI's Tabs component. It receives a theme object to adjust styles responsively. This approach fits the Next.js ecosystem, where dynamic theming is common.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Tabs component that is responsive and utilizes MUI theming."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "AlbumCoverImageCard",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Creates a styled Card component with specific styling for an album cover image, following Material-UI conventions.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Card component that serves as a container for the album cover image."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "AlbumCoverImageTabs",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Creates a styled Tabs component that is positioned at the bottom of the album cover area, utilizing Material-UI for tab navigation.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Tabs component for navigating through different sections of the album."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "AlbumSharedPersonsBox",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Creates a styled Box component for containing shared persons within an album, ensuring the layout is responsive.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box component to display shared persons in the album."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "AlbumPeoplesBox",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Creates a styled Box component designed to hold a list of people associated with the album, utilizing flex properties for layout.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box component that lays out the people associated with the album."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "AlbumPeoplesText",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Creates a styled Box component with custom typography for displaying text related to people's names or roles within the album.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box presenting text centered with specified font characteristics."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "AlbumSharedPersonsStack",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Creates a styled Stack component that manages the layout of shared persons in a horizontal line, hiding overflow when necessary.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Stack that organizes shared persons in a row, allowing for scrollbar-less overflow display."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "AlbumSharedPersonText",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Creates a styled Typography component for displaying text descriptions about shared persons, adjusting the size for visibility.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Typography component that provides descriptions for shared persons."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "AlbumSharedPersonsListButtonBox",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Creates a styled Box component that serves as a control area for shared persons, including a gradient for visual effect in overflow scenarios.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box for providing additional controls for shared persons with a gradient background effect."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people/faces/[faceId]",
    "module_name": "page.styled.js",
    "method_name": "MidComponentWrapper",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Defines a styled wrapper component using MUI's styled utility, which is centered with flex properties and a margin.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box component suitable for wrapping mid-level components."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people/faces/[faceId]",
    "module_name": "page.styled.js",
    "method_name": "GuestLoaderWrapper",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Creates a styled container that is positioned relatively, ideal for loading animations or overlays.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box component for guest loading state."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people/faces/[faceId]",
    "module_name": "page.styled.js",
    "method_name": "BackButtonBox",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Sets up a styled Box for a back button with fixed positioning and responsive styles based on the theme breakpoints.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box for back navigation button."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people/faces/[faceId]",
    "module_name": "page.styled.js",
    "method_name": "FacesBox",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Defines a styled Box using flex properties suitable for displaying children in a row with wrapping enabled.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box for arranging face elements."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people/faces/[faceId]",
    "module_name": "page.styled.js",
    "method_name": "AnimationWrapper",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Creates a styled Box for animations with absolute positioning to center the animation in relation to its parent.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box for wrapping animation components."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people/faces/[faceId]",
    "module_name": "page.styled.js",
    "method_name": "AnimationComp",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Defines a styled component based on the Lottie animation library, setting its width for display purposes.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Lottie component for playing animations."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people/faces/[faceId]",
    "module_name": "page.styled.js",
    "method_name": "LoadingTitle",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Creates a styled Box for a loading title with centered text and custom font styles from the theme.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box for displaying a loading title."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "Container",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Creates a styled Box component, structured as a responsive container aligning items in a column with defined gaps, adapting to different screen sizes according to the theme breakpoints.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Box component that acts as a container for other UI elements."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "FacesMain",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Creates a styled Box component, primarily used for laying out faces dynamically with margin and width settings.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Box component that serves as the main wrapper for faces."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "FacesBox",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Defines a styled Box that displays its children in a flex row, allowing for wrapping and centering, along with specified gaps.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Box component for organizing facial images."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "BackIconWrapper",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Creates a styled Box component for the back icon with fixed positioning and various responsive styles for different screen sizes.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Box component that encapsulates the back icon."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "FileUploaderWrapper",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Defines a Box component for the file uploader with specified width, ensuring it takes full width for responsiveness.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Box that houses the file uploader."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "CoverImageUploadWrapper",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Creates a styled Box that provides a layout for a cover image upload UI, including responsive height settings based on breakpoints.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Box component specifically for uploading cover images."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "CoverImageIconWrapper",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Defines a styled Box that centers the upload icons for cover images, incorporating responsive gap adjustments.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Box for organizing the cover image upload icons."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "CoverImageUploadIcon",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Creates a styled icon for upload functionality specific to cover images with responsive sizes based on the theme's breakpoints.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled icon component for uploading cover images."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "CircularProgressWrapper",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Defines a styled Box component intended for wrapping circular progress indicators, ensuring proper layout and alignment.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Box component dedicated to displaying circular progress indicators."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "TitleContainer",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Creates a styled Box for containing titles, with width adjustments for responsiveness across various screen sizes.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Box component for title display."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "PageTitleWrapper",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Defines a styled Box to wrap around page titles, facilitating a flexible layout with responsive styling for gaps and alignment.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Box component for page title arrangement."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "PageTitle",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Creates a styled Box for page titles, setting font properties and responsiveness according to different screen size breakpoints.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Box component for presenting the page title."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "PageTitleEditIcon",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Defines a styled icon for editing the page title, with hover state management for interactivity.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled icon component for editing page titles."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "PageTitleTextField",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Creates a styled TextField for editing page titles, accommodating responsive font size modifications.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled TextField component for editing purposes."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "PageTitleForm",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Defines a styled Form component of Formik, organizing its layout for the page title editing interface.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Form component for handling page title edits."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "ImageGroupsContainer",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Creates a styled Box component for organizing groups of images in a grid format, responsive to different screen size requirements.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Box that serves as a container for image groups."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "ArrowAnimation",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Defines a styled Lottie component for arrow animations, adjusting its width based on responsive breakpoints.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Lottie component specifically for arrow animations."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "AddGroupCardWrapper",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Creates a styled Box to encapsulate the add group card interface, with responsive layout attributes including height and width adjustments.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Box component for the add group card."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "AddGroupIcon",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Defines a styled icon component for adding groups with responsive size adjustments for varying screen widths.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled icon component for adding groups."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "ImagesHeaderWrapper",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Creates a styled Box for the images header, managing its layout and responsive font sizing through theme breakpoints.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Box component that acts as a header for images."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "ImagesPrimaryHeaderWrapper",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Defines a styled Box for a primary header layout over images, ensuring responsive padding and font-adjustments based on screen size.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Box component for the primary image header."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "ImagesSecondaryHeaderWrapper",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Creates a styled Box for secondary headers pertaining to images, accommodating responsive font and layout changes.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Box component for the secondary image header."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "HeaderTabsWrapper",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Defines a styled Box to wrap header tabs, allowing flex alignment and responsive gap adjustments to maintain a consistent layout.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Box component for the tabbed header."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "HeaderTab",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Creates a styled Box component representing individual header tabs, with hover effects and responsive gaps.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Box for an individual header tab."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "SecondaryHeaderTab",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      },
      {
        "type": "boolean",
        "name": "selected",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Defines a styled header tab with conditional styling based on selection, handling hover and active states for UI interaction.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Box component representing a secondary header tab."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "ImagesContainer",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Creates a styled Box container that wraps images in a flex layout, ensuring responsive top margins based on screen sizes.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Box component for image containers."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "ImagesGridColumn",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Defines a styled Box for grid columns that hold images, managing responsiveness across varying screen widths.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Box component for a grid column of images."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "ImageWrapper",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Creates a styled Box component specifically for wrapping individual images with positioning capabilities.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Box component for individual images."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "DeleteIconWrapper",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Defines a styled IconButton component positioned absolutely to allow for delete icon functionality within images, managing opacity changes on hover.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled IconButton for the delete icon."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "DroppingImagesIcon",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Creates a styled SaveAlt icon for drop functionality, adjusting its size responsively based on the theme's breakpoints.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled icon component for dropping images."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "ScanFaceWrapper",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Defines a styled Box for scanning face functionality, comprising dimensions, borders, and hover effects with responsive adjustments.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Box facilitating face scanning."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "ScanAnimation",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Creates a styled Lottie component to display scanning animations with adjusted dimensions responsive to various screen sizes.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Lottie component for scanning animations."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "ScanContentWrapper",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Defines a styled Box for containing scan-related text and content, integrating responsive font sizing and flex layout.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Box for scan content display."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "ScanContentText",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Creates a styled Box specifically for text within scan content, managing color and responsive font sizes according to the theme's specifications.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Box component for text in the scan content."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "FacesWrapper",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Creates a styled Box that displays face images in a grid layout, with responsive features for gap management and alignment.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Box component for displaying a grid of faces."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "FaceImageCommon",
    "input_params": [
      {
        "type": "object",
        "name": "component",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Defines a higher-order function that creates a styled version of a given component with common styles for face images, managing dimensions and hover behavior.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled component representing face images."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "ScanFaceWrapper2",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Defines a styled Box for a second scanning face wrapper with properties for layout, height, width, and responsiveness to screen sizes.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Box for the second scanning face interface."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "ScanAnimation2",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Creates a styled Lottie animation component for the second scan function, adjusting its size responsively according to breakpoints.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Lottie component for the second scan animation."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "ScanContentWrapper2",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Defines a styled Box for the second scan content display, containing text and images with responsive sizing features.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Box for the second scan content."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "ScanContentText2",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Creates a styled Box for the second scan content text with color and responsive adjustments based on the theme.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Box for the second scan content text."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "WebcamWrapper",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Defines a styled Box component for webcam functionality, managing layout dimensions and margins with responsive adjustments.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Box for webcam interaction components."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "UploadPageWrapper",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Creates a styled Box for the upload page layout, containing necessary components, with responsive gap management for flexible design.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Box component for the upload page layout."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "SelfieWrapper",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Defines a styled Box component for organizing selfie-related UI elements, ensuring proper alignment and responsive sizing.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Box for organizing selfie-related components."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "FormWrapper",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Creates a styled Box for wrapping forms, incorporating width specifications and responsive styles pertinent to the theme.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Box component for form wrapping."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "FormInnerWrapper",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Defines a styled Form component for the inner structure of forms, ensuring a flex display and alignment of inner form elements.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Form component for internal form organization."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "WebcamTitle",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Creates a styled Box to display the title of the webcam interface, managing font size and color responsively based on screen size.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Box component for the webcam title."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "WebcamButtonsWrapper",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Defines a styled Box that wraps the buttons used in the webcam component, aligning them and ensuring responsiveness.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Box for organizing webcam buttons."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "DoneAnimation",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Creates a styled Lottie component for representing a done or success animation with responsive width adjustments based on screen size.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Lottie component for done animations."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "UploadingAnimation",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Defines a styled Lottie component that represents an uploading animation with responsive width settings adjusted across breakpoints.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Lottie component for uploading animations."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "DoneWrapper",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Creates a styled Box component for holding the done message, including responsive adjustments for width and text alignment.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Box for displaying a completion message."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "ResponsiveBox",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Defines a styled Box with responsive styles based on screen size, affecting padding and font size within different themes.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Box component with responsive design features."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "BlurBox",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Creates a styled Box with blur effects applied, paired with box shadows for a soft appearance in the UI.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Box component with a blur effect."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "ShadowBox",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Defines a styled Box with shadows applied for depth in the UI without any specific added effects.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Box component with shadow effects."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "fadeIn",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Defines a keyframe animation for fading in elements, enhancing user experience with gradual appearance effects.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a keyframe setup for fade-in animation."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "FadeInBox",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Creates a styled Box component that incorporates fade-in animation to enhance presentation and user experience.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Box component that applies fade-in animation."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "ScaleOnHoverBox",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Defines a styled Box component that scales slightly when hovered over, creating interactive feedback to users in the UI.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Box component that scales on hover."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "MediaBox",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Creates a styled Box with responsive background color adjustments based on the theme breakpoints for better visibility.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Box component with media query responsiveness."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "TextBox",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Defines a styled Box for containing text, adjusting its font size responsively based on screen size and theme color.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Box component for presenting text."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "HoverBox",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Creates a styled Box component with hover effects to change background color, enhancing user engagement with visual feedback.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Box component that alters on hover."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "HoverTextBox",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Defines a styled Box that alters its text color during hover, providing interactive feedback to users.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Box component for text that changes color on hover."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "FlexBox",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Creates a styled Box designed for flex layouts, ensuring proper alignment and spacing within contained components.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Box component set up for flexbox layouts."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "GridBox",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Defines a styled Box in a grid layout with dynamically adjustable columns depending on screen size, enhancing layout versatility.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Box component that utilizes a grid layout."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "ResponsiveText",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Creates a styled Box for text that adjusts font size responsively according to screen sizes, improving visual hierarchy.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Box component for responsive text."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "IconBox",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Defines a styled Box that organizes icons with gap management for a consistent and structured layout.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Box component for arranging icons."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "InteractiveBox",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Creates a styled Box incorporating hover and active effects to provide dynamic feedback during user interactions in the UI.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Box component with interactive behavior."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "FormGroup",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Defines a styled Box for grouping form elements together, allowing for consistent spacing and layout management under various screen sizes.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Box for grouping form elements."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "FloatingBox",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Creates a styled Box that remains fixed in position, with a background and shadow for enhanced visibility and usability in applications.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Box component fixed to the screen."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums/[albumId]/people",
    "module_name": "page.styled.js",
    "method_name": "MidComponentWrapper",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "Defines a styled Box for mid-level components centering their contents with margins and alignment.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Box for organizing mid-level UI components."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums",
    "module_name": "page.styled.js",
    "method_name": "AlbumGridBox",
    "input_params": [],
    "logic": "Creates a styled Box component that lays out its children in a grid format. This component adapts to the screen size, ensuring a responsive layout in line with Next.js UI conventions using the MUI library.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled grid container component for organizing album items in a responsive layout."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums",
    "module_name": "page.styled.js",
    "method_name": "AlbumStack",
    "input_params": [],
    "logic": "Defines a styled Stack component. It organizes its children in a column, with a fallback to a row layout on larger screens. This is used for better layout management of the album items.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Stack component for vertically or horizontally organizing album elements."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums",
    "module_name": "page.styled.js",
    "method_name": "HeroWrapper",
    "input_params": [
      {
        "type": "object",
        "name": "props",
        "is_required": "true",
        "optional_value": "undefined"
      }
    ],
    "logic": "Creates a styled Box component that serves as a wrapper for hero content. It uses props to dynamically set the margin and applies styling that emphasizes centered alignment and spacing, in alignment with design principles used in Next.js applications.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled component for the hero section, encapsulating content with specific alignment and spacing."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums",
    "module_name": "page.styled.js",
    "method_name": "NoFolderIcon",
    "input_params": [],
    "logic": "Creates a styled Icon component specifically for displaying an icon related to 'No Folder'. It uses theme spacing for visual alignment.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled icon component representing the 'No Folder' state."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums",
    "module_name": "page.styled.js",
    "method_name": "LottieWrapper",
    "input_params": [],
    "logic": "Defines a styled Lottie component for rendering animations. It sets a specific width for the animation to align with the overall design of the application.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Lottie animation component for displaying animations."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums",
    "module_name": "page.styled.js",
    "method_name": "HeroTitle",
    "input_params": [],
    "logic": "Creates a styled Box component specifically for the hero title's typography. It applies specific font weight and size styling according to design requirements.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled component for displaying the title in the hero section."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/albums",
    "module_name": "page.styled.js",
    "method_name": "HeroDescription",
    "input_params": [],
    "logic": "Defines a styled Box component dedicated to displaying descriptive text in the hero section. It sets color and font size to ensure good readability and aesthetic alignment.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled component for displaying descriptions in the hero section."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)",
    "module_name": "layout.stlyed.js",
    "method_name": "WithHeaderLayoutBox",
    "input_params": [
      {
        "type": "function",
        "name": "theme",
        "is_required": "true",
        "optional_value": ""
      }
    ],
    "logic": "This function defines a styled component using Material-UI's styled utility, which allows for custom styles based on the theme's breakpoints. It's purpose is to create a responsive layout that adjusts its display and minHeight properties when the viewport is larger than the 'lg' breakpoint as defined in the theme.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "The output is a styled component that can be used in a Next.js application to apply specific styles conditionally based on the screen size."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/process_image",
    "module_name": "page.styled.js",
    "method_name": "styled",
    "input_params": [
      {
        "type": "object",
        "name": "Box",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "function",
        "name": "() => ({ display: 'flex', height: 'calc(100vh - 72px)', backgroundColor: '#f0f1f2', width: '100%' })",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function creates a styled component named ProcessImageMain that serves as a container with flexbox layout properties and a specified height and background color suitable for a main processing area in a Next.js application.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "This returns a styled Box component configured for layout in the Process Image feature of a Next.js app."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/process_image",
    "module_name": "page.styled.js",
    "method_name": "styled",
    "input_params": [
      {
        "type": "object",
        "name": "Box",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "function",
        "name": "({ theme }) => ({ height: '100%', padding: '16px', width: '280px', backgroundColor: '#2b2c2f' })",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function creates a styled component named ProcessImageFiltersMainBox, which has set dimensions and a background color appropriate for a filters section in the user interface of a processing image application.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "This returns a styled Box component configured to contain the filters in the image processing layout."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/process_image",
    "module_name": "page.styled.js",
    "method_name": "styled",
    "input_params": [
      {
        "type": "string",
        "name": "h3",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "function",
        "name": "({ theme }) => ({ fontWeight: 600, color: '#bec0c8', marginBottom: '8px', lineHeight: '22px', fontSize: '13px', [theme.breakpoints.up('lg')]: { fontSize: '14px' } })",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function generates a styled header component for the filters section, defining its aesthetics based on the Material UI theme, making it responsive and appropriately styled for a header element in the Next.js layout.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "This returns a styled h3 component for the filter header displaying in the processing images section."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/process_image",
    "module_name": "page.styled.js",
    "method_name": "styled",
    "input_params": [
      {
        "type": "object",
        "name": "Box",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "function",
        "name": "({ theme }) => ({ borderRadius: '6px', '&:hover video': { display: 'block' }, '&:hover img': { display: 'none' } })",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Creates a styled component named ProcessImageFilter, defining both visual appearance and behavior on hover, relevant for an interactive element in a Next.js application.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "This returns a styled Box that represents the filter, which shows or hides media elements based on user interaction."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/process_image",
    "module_name": "page.styled.js",
    "method_name": "styled",
    "input_params": [
      {
        "type": "string",
        "name": "img",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "function",
        "name": "({ theme }) => ({ width: '100%', height: '100%', objectFit: 'cover', borderRadius: '6px' })",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Defines a styled image component for the filter visuals. It sets sizing and fit ensuring the image remains proportionate while framed within a circular border.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "This returns a styled img component suitable for rendering as a filter image."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/process_image",
    "module_name": "page.styled.js",
    "method_name": "styled",
    "input_params": [
      {
        "type": "string",
        "name": "video",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "function",
        "name": "({ theme }) => ({ width: '100%', objectFit: 'cover', borderRadius: '6px', display: 'none' })",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function styles a video component intended for displaying filter videos, with display properties initially hidden, to be revealed on hover over its parent component.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "This returns a styled video component that is hidden by default and intended for use as a filter."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/process_image",
    "module_name": "page.styled.js",
    "method_name": "styled",
    "input_params": [
      {
        "type": "string",
        "name": "p",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "function",
        "name": "({ theme }) => ({ marginTop: '4px', width: '100%', height: '36px' })",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Creates a styled paragraph component that displays text within the filter, providing margin and width settings particularly for textual feedback.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "This returns a styled p component to contain text within the filter display area."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/process_image",
    "module_name": "page.styled.js",
    "method_name": "styled",
    "input_params": [
      {
        "type": "string",
        "name": "span",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "function",
        "name": "({ theme }) => ({ fontSize: '12px', fontWeight: 500, textAlign: 'center', fontFamily: 'Poppins', color: '#9da2ad', [theme.breakpoints.up('lg')]: { fontSize: '13px' } })",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Defines a styled span component that presents text, ensuring it aligns well and is visually distinct within the UI structure for filter descriptions.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "This returns a styled span component presenting the descriptive text for filters."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/process_image",
    "module_name": "page.styled.js",
    "method_name": "styled",
    "input_params": [
      {
        "type": "object",
        "name": "Box",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "function",
        "name": "() => ({ width: '100%', display: 'flex', justifyContent: 'center', alignItems: 'center' })",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Creates a styled main container that aligns its child elements centrally in the image processing feature, ensuring visual balance within the layout of the application.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "This returns a styled Box component serving as a central container for the image processing elements."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/process_image",
    "module_name": "page.styled.js",
    "method_name": "styled",
    "input_params": [
      {
        "type": "object",
        "name": "Box",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "function",
        "name": "() => ({ maxWidth: '600px', minWidth: '400px', display: 'flex', justifyContent: 'center', alignItems: 'center', margin: '24px', width: '100%' })",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Defines a styled box that includes maximum and minimum width settings for responsive design, aiding layout configuration within the image processing aspect of the app.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "This returns a styled Box component representing the main content area for processing images."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/process_image",
    "module_name": "page.styled.js",
    "method_name": "styled",
    "input_params": [
      {
        "type": "object",
        "name": "Box",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "function",
        "name": "() => ({ width: '100%', minHeight: '226px', border: '2px', borderStyle: 'dashed', borderColor: '#d2d3d4', borderRadius: '12px', display: 'flex', justifyContent: 'space-around', alignItems: 'center', backgroundColor: 'white', '&:hover': { backgroundColor: '#f7faff', borderColor: '#2c7dfa' } })",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Establishes a styled box that serves as an upload area for image processing, providing visual cues for interaction and responsiveness characteristic of file uploads in a web interface.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "This returns a styled Box component configured to serve as an upload container."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/process_image",
    "module_name": "page.styled.js",
    "method_name": "styled",
    "input_params": [
      {
        "type": "object",
        "name": "Box",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "function",
        "name": "() => ({ fontSize: '13px', display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center' })",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Creates a styled content area within the upload box, ensuring proper flex layout for organizing content related to the upload feature.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "This returns a styled Box component for organizing upload content layout."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withHeader)/process_image",
    "module_name": "page.styled.js",
    "method_name": "styled",
    "input_params": [
      {
        "type": "string",
        "name": "p",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "function",
        "name": "() => ({ textAlign: 'center', fontSize: '16px', fontWeight: 500, marginTop: '22px', color: '#1e1f22' })",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Defines a styled paragraph component that provides feedback to users regarding upload actions, emphasizing text presentation and responsiveness.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "This returns a styled p component intended for user feedback in the upload content area."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)",
    "module_name": "layout.js",
    "method_name": "UnNavLayout",
    "input_params": [
      {
        "type": "object",
        "name": "children",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function serves as a React component layout in Next.js that simply renders its children. It is marked as a client component with 'use client'.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "The output is the children elements passed to this component, rendered directly as part of the DOM."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]/faces/[faceId]",
    "module_name": "page.styled.js",
    "method_name": "MidComponentWrapper",
    "input_params": [],
    "logic": "Creates a styled wrapper component using Material-UI's Box. This component is primarily configured for layout, centering its content both horizontally and vertically according to common React component patterns.",
    "inner_function_calls": [],
    "output": {
      "type": "string",
      "description": "The MidComponentWrapper component which is a styled Box element used for layout purposes."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]/faces/[faceId]",
    "module_name": "page.styled.js",
    "method_name": "GuestLoaderWrapper",
    "input_params": [],
    "logic": "Creates a styled wrapper for a guest loading component, positioned relatively to contain animated elements or loaders, following the React component paradigm.",
    "inner_function_calls": [],
    "output": {
      "type": "string",
      "description": "The GuestLoaderWrapper component which is a styled Box element used for layout and positioning relative components."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]/faces/[faceId]",
    "module_name": "page.styled.js",
    "method_name": "AnimationWrapper",
    "input_params": [],
    "logic": "Defines a styled Box component that positions its content absolutely, useful for centering animations and ensuring proper overlap with other components.",
    "inner_function_calls": [],
    "output": {
      "type": "string",
      "description": "The AnimationWrapper component allowing for absolute positioning of animations within a relative context."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]/faces/[faceId]",
    "module_name": "page.styled.js",
    "method_name": "AnimationComp",
    "input_params": [],
    "logic": "Creates a styled version of the Lottie animation component integrated dynamically, setting its width to ensure proper display of the animation size in the UI.",
    "inner_function_calls": [],
    "output": {
      "type": "string",
      "description": "The AnimationComp component which is a styled version of the Lottie animation renderer."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]/faces/[faceId]",
    "module_name": "page.styled.js",
    "method_name": "LoadingTitle",
    "input_params": [],
    "logic": "Defines a styled title component designed to display loading text, using specific text properties that align with the theme's design language, often used in loaders or introductory screens.",
    "inner_function_calls": [],
    "output": {
      "type": "string",
      "description": "The LoadingTitle component which is a styled Box containing loading-related textual information."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "Container",
    "input_params": [],
    "logic": "Styled Box component that serves as a container for other components. It uses theme properties for responsive design based on the width of the viewport and adapts the gap between child elements.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box component that adjusts its alignment and layout responsively."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "BackIconWrapper",
    "input_params": [],
    "logic": "Styled Box component that wraps the back icon with a fixed position. It ensures responsiveness and includes hover effects to enhance user interaction.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box that serves as a wrapper for the back icon, featuring responsive styles and hover effects."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "FileUploaderWrapper",
    "input_params": [],
    "logic": "Styled Box component that wraps around file uploader elements, defining its width to adapt responsively.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box component that adjusts width responsively, used for file upload functionality."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "CoverImageUploadWrapper",
    "input_params": [],
    "logic": "Styled Box component for wrapper purposes around image upload areas, featuring responsive design aspects.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box component designed for image upload functionality, with responsive styling."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "CoverImageIconWrapper",
    "input_params": [],
    "logic": "Styled Box component that organizes the icons associated with the cover image, supporting responsive design and hover effects.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box for arranging cover image icons with responsive and interactive styling."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "CoverImageUploadIcon",
    "input_params": [],
    "logic": "Styled icon component that visually represents the action of uploading a cover image with responsive size adjustments.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled icon configured for uploading a cover image, maintaining size responsiveness."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "CircularProgressWrapper",
    "input_params": [],
    "logic": "Styled Box focused on displaying a circular loading indicator, handling alignment and positioning.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box component used primarily for showing loading progress in a circular format."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "TitleContainer",
    "input_params": [],
    "logic": "Styled Box component that acts as a container specifically tailored for a title, with specified responsive width adjustments.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box used to contain a title, featuring responsive width properties."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "PageTitleWrapper",
    "input_params": [],
    "logic": "Styled Box designed to wrap the page title, ensuring alignment and spacing adjustments based on screen size.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box that wraps the page title, featuring responsive styling related to alignment and spacing."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "PageTitle",
    "input_params": [],
    "logic": "Styled Box representing the page title, with adjustable font properties responsive to screen size.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box specifically for displaying the page title, which is responsive for different screen sizes."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "PageTitleEditIcon",
    "input_params": [],
    "logic": "Styled edit icon that offers an interactive feature for the page title, changing cursor on hover.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled icon used for editing the page title, including hover interaction for better usability."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "PageTitleTextField",
    "input_params": [],
    "logic": "Styled TextField component for inputting the title, integrating specific font styles and responsive text size.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Styled TextField designed for user input related to the page title, which is responsive in nature."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "PageTitleForm",
    "input_params": [],
    "logic": "Styled Form component that centralizes the form elements related to the page title, providing alignment and spacing.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Form component used for submitting the page title with responsive spacing."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "ImageGroupsContainer",
    "input_params": [],
    "logic": "Styled Box employing a grid layout for displaying image groups, adapting to screen size variations.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box for organizing image groups in a responsive grid layout."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "ArrowAnimation",
    "input_params": [],
    "logic": "Styled Lottie component that displays an animation representing an arrow, with responsive width adaptations.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Lottie animation component representing an arrow, designed responsively."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "AddGroupCardWrapper",
    "input_params": [],
    "logic": "Styled Box to serve as a card for adding group elements, featuring manageability of style based on viewport dimensions.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box designed as a card to add new groups, with responsive dimensions."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "AddGroupIcon",
    "input_params": [],
    "logic": "Styled icon component representing the action of adding a group, with responsive size adjustments.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled icon used for the add group action, which adjusts its size responsively."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "ImagesHeaderWrapper",
    "input_params": [],
    "logic": "Styled Box component to hold the headers of images, ensuring responsiveness and appropriate design elements.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box dedicated to the header section of images, with responsive properties."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "ImagesPrimaryHeaderWrapper",
    "input_params": [],
    "logic": "Styled Box that wraps primary image headers, detailing background design and responsive padding adjustments.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box for primary image headers, providing responsive styling."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "ImagesSecondaryHeaderWrapper",
    "input_params": [],
    "logic": "Styled Box meant for secondary image headers, adapting layout and styles based on screen size.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box for secondary image headers, ensuring responsive adjustments."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "HeaderTabsWrapper",
    "input_params": [],
    "logic": "Styled Box component focused on organizing the header tabs with responsiveness in mind.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box containing header tabs, designed responsively."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "HeaderTab",
    "input_params": [],
    "logic": "Styled Box representing individual header tabs with hover effects for interactivity.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box for individual header tabs, providing hover interaction."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "SecondaryHeaderTab",
    "input_params": [
      {
        "type": "string",
        "name": "selected",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Styled Box for secondary header tabs, conditionally styled based on whether the tab is selected.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box representing a secondary header tab with dynamic styles based on selection."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "ImagesContainer",
    "input_params": [],
    "logic": "Styled Box managing a flexible layout for images, with wrapping capabilities for responsive designs.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box for containing images in a flexible, responsive layout."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "ImagesGridColumn",
    "input_params": [],
    "logic": "Styled Box that acts as a grid column for images, ensuring responsive flex properties for dynamic layouts.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box representing a grid column for images, adjusting responsively."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "ImageWrapper",
    "input_params": [],
    "logic": "Styled Box serving as a wrapper for individual images, organized for layout purposes.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box wrapping individual images, facilitating their layout."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "DeleteIconWrapper",
    "input_params": [],
    "logic": "Styled IconButton for deleting an item, with opacity effects handled on hover.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled IconButton component for delete action, featuring hover effects."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "DroppingImagesIcon",
    "input_params": [],
    "logic": "Styled icon to represent the action of dropping images, designed responsively.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled icon depicting the drop action for images, responsive in design."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "ScanFaceWrapper",
    "input_params": [],
    "logic": "Styled Box component that organizes scanning interfaces related to facial recognition, designed to handle responsiveness.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box that serves as a wrapper for face scanning components in a responsive way."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "ScanAnimation",
    "input_params": [],
    "logic": "Styled Lottie component representing a scanning animation, maintaining responsive height and width.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Lottie animation component for scanning, proportionally responsive."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "ScanContentWrapper",
    "input_params": [],
    "logic": "Styled Box for content in the scanning process, employing responsive font settings and layout.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box managing the content layout during the scan process, responding to size changes."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "ScanContentText",
    "input_params": [],
    "logic": "Styled Box for text content during the scanning operation, designed with responsive font adjustments.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box for displaying text during scanning, featuring responsive typography."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "FacesWrapper",
    "input_params": [],
    "logic": "Styled Box component for containing faces in a grid layout with responsible design attributes.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box that organizes face images in a responsive grid layout."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "FaceImageCommon",
    "input_params": [
      {
        "type": "object",
        "name": "component",
        "is_required": "true",
        "optional_value": ""
      }
    ],
    "logic": "Higher-order function creating styled components for face images, managing size and hover properties responsively.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A function to generate styled components for face images with responsive attributes."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "ScanFaceWrapper2",
    "input_params": [],
    "logic": "Styled Box for organizing scanning interfaces focused on facial recognition in a different layout compared to the previous wrapper.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box for an alternative face scanning interface, designed responsively."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "ScanAnimation2",
    "input_params": [],
    "logic": "Styled Lottie component for a secondary scanning animation, with responsive design considerations.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Lottie animation component displaying a scanning effect, responsive to viewport size."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "ScanContentWrapper2",
    "input_params": [],
    "logic": "Styled Box for alternative scanning content, with responsive design adjustments applied to its text and layout.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box managing the layout for scanning content in an alternate design."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "ScanContentText2",
    "input_params": [],
    "logic": "Styled Box designed for secondary text during scanning, featuring responsive styling for typography.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box for displaying alternate text during the scan process, maintaining responsive features."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "WebcamWrapper",
    "input_params": [],
    "logic": "Styled Box for organization of webcam-related components, managing responsive dimensions.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box component for webcam functionalities, designed responsively."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "UploadPageWrapper",
    "input_params": [],
    "logic": "Styled Box to organize elements of the upload page, applying responsive design principles throughout.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box container for the upload page, thoughtfully designed to accommodate various screen sizes."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "SelfieWrapper",
    "input_params": [],
    "logic": "Styled Box that organizes selfie elements in a structured layout with responsive size management.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box designed for the selfie capture area, responsive to different screen sizes."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "FormWrapper",
    "input_params": [],
    "logic": "Styled Box for wrapping form elements with responsive width and font styling.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box designed to wrap form elements, maintaining responsive structuring."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "FormInnerWrapper",
    "input_params": [],
    "logic": "Styled Form to provide layout for input elements related to forms, ensuring consistency with responsive designs.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Form element that organizes inner contents in a responsive context."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "WebcamTitle",
    "input_params": [],
    "logic": "Styled Box representing the title for webcam functionality, maintaining responsiveness in font size and color.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box for the webcam title, designed to be responsive."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "WebcamButtonsWrapper",
    "input_params": [],
    "logic": "Styled Box for organizing buttons related to webcam functionality, applying responsive attributes for layout.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box that manages the layout for webcam functionality buttons, optimized for responsiveness."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "DoneAnimation",
    "input_params": [],
    "logic": "Styled Lottie component representing a completion animation, ensuring responsiveness for the display size.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Lottie animation component indicating a completion state, designed responsively."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "UploadingAnimation",
    "input_params": [],
    "logic": "Styled Lottie component depicting an uploading animation, tasked with responsive size adaptations.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Lottie animation illustrating uploading progress, responsive in size."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "DoneWrapper",
    "input_params": [],
    "logic": "Styled Box that wraps content related to the finish state, providing responsive design features for layout and text.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box serving as a container for completed actions, ensuring responsiveness in its design."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "ResponsiveBox",
    "input_params": [],
    "logic": "Styled Box component managing responsive design elements through media queries, optimizing padding and font size based on screen size.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box designed to adjust padding and font size responsively via media queries."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "BlurBox",
    "input_params": [],
    "logic": "Styled Box applying a blur effect and box shadow, enhancing visual appearance with responsiveness in mind.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box with a blur effect and shadow for design enhancement, maintaining responsive properties."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "ShadowBox",
    "input_params": [],
    "logic": "Styled Box with shadow attributes designed for aesthetic depth, adapting to responsive layouts.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box that employs shadow features for visual depth, accommodating responsive layouts."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "fadeIn",
    "input_params": [],
    "logic": "Keyframes for a fade-in animation effect, enhancing transitions in components through styled animations.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Keyframes used for fade-in animation effects in styled components."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "FadeInBox",
    "input_params": [],
    "logic": "Styled Box utilizing fade-in animation on mount for a dynamic visual effect, enhancing user experience.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box that engages a fade-in animation for visibility on component mount."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "ScaleOnHoverBox",
    "input_params": [],
    "logic": "Styled Box that applies a transform scale effect on hover, enhancing interactivity in component functionality.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box that scales on hover, providing a dynamic interaction."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "MediaBox",
    "input_params": [],
    "logic": "Styled Box applying different background colors based on responsive breakpoints, creating adaptable visual styles.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box with color variations based on screen size via media queries."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "TextBox",
    "input_params": [],
    "logic": "Styled Box for standard text display, applying font size responsiveness through media queries.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box for displaying text with responsive font size adjustments."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "HoverBox",
    "input_params": [],
    "logic": "Styled Box that changes background color when hovered over, providing interactive visual cues.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box that changes its background color on hover for interactive feedback."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "HoverTextBox",
    "input_params": [],
    "logic": "Styled Box that alters text color on hover, enhancing user interaction with visual feedback.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box that changes text color on hover, providing interaction cues."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "FlexBox",
    "input_params": [],
    "logic": "Styled Box implementing flex layout for aligning child components centrally, adaptable to different screen sizes.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box that utilizes flexbox for responsive layout."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "GridBox",
    "input_params": [],
    "logic": "Styled Box using grid layout to arrange child elements, adapting to responsive guidelines.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box that organizes its children in a grid layout, responsive to screen sizes."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "ResponsiveText",
    "input_params": [],
    "logic": "Styled Box for text content with responsive font sizes, altering based on screen size changes.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box for text that is responsive to screen size alterations."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "IconBox",
    "input_params": [],
    "logic": "Styled Box designed to hold icons, implementing flexbox for alignment against various layouts.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box that organizes icons in a flex container."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "InteractiveBox",
    "input_params": [],
    "logic": "Styled Box engaging in hover and active states for responsive interactivity for elements within the UI.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box enabling interactive states during user engagement."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "FormGroup",
    "input_params": [],
    "logic": "Styled Box to arrange form controls in a vertical stack, adapting spacing based on screen sizes.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box used to organize form elements in a responsive, vertical layout."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "FloatingBox",
    "input_params": [],
    "logic": "Styled Box that creates a floating action button or notification area, positioned based on layout requirements.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box positioned fixed to provide floating actions in the UI."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)/(withoutHeader)/peoples/[albumId]",
    "module_name": "page.styled.js",
    "method_name": "MidComponentWrapper",
    "input_params": [],
    "logic": "Styled Box for middle component alignment allowing central organization of the UI elements, adapting to responsive designs.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box facilitating the wrapping of central UI components with responsive styling."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)",
    "module_name": "layout.js",
    "method_name": "MainLayout",
    "input_params": [
      {
        "type": "object",
        "name": "children",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "MainLayout serves as a layout component that wraps around its children. It uses Redux to manage user data, checking for a user's profile image and fetching it via an API call if necessary. It also sets up theme and snackbar providers for consistent styling and notifications in the app.",
    "inner_function_calls": [
      {
        "name": "useDispatch",
        "import_path": "react-redux"
      },
      {
        "name": "useSelector",
        "import_path": "react-redux"
      },
      {
        "name": "useRouter",
        "import_path": "next/navigation"
      },
      {
        "name": "useEffect",
        "import_path": "react"
      },
      {
        "name": "getImage",
        "import_path": ""
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "Returns a layout comprising ThemeProvider, SnackbarProvider, and UserProfileUpload component, used within the Next.js application."
    }
  },
  {
    "folder_path": "src/app/(root)/(auth)",
    "module_name": "layout.js",
    "method_name": "getImage",
    "input_params": [
      {
        "type": "object",
        "name": "userData",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Fetches the user's profile image from an API. If the profile image is present, it uses the image key to make an API call to retrieve the image URL, then updates the Redux state with the image URL. If no profile image is present, it triggers a sign-out process.",
    "inner_function_calls": [
      {
        "name": "ApiRoot.getImages",
        "import_path": "@/src/api/root/Image"
      },
      {
        "name": "dispatch",
        "import_path": "redux"
      },
      {
        "name": "signoutUser",
        "import_path": "@/src/utils/auth"
      }
    ],
    "output": {
      "type": "Promise<void>",
      "description": "Performs asynchronous operations to retrieve and possibly store the profile picture URL."
    }
  },
  {
    "folder_path": "src/app/(root)/(unauth)",
    "module_name": "AnimationBox.styled.js",
    "method_name": "AnimationLogoBox",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "The AnimationLogoBox is a styled component that styles the MUI Box component. It applies a filter to invert colors and sets the height responsively based on the theme's breakpoints, specifically adjusting the height for medium-sized screens and above.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "The output is a styled React component that represents a Box with specific height and color inversion styling based on the provided theme."
    }
  },
  {
    "folder_path": "src/app/(root)/(unauth)/accounts",
    "module_name": "layout.js",
    "method_name": "LoginLayout",
    "input_params": [
      {
        "type": "object",
        "name": "children",
        "is_required": "/",
        "optional_value": ""
      }
    ],
    "logic": "LoginLayout is a React component designed to render a layout for the login page, wrapping its children inside a styled outer layout while also displaying an image.",
    "inner_function_calls": [],
    "output": {
      "type": "React.Element",
      "description": "Returns a React element that represents the login layout, including an image and the rendered children."
    }
  },
  {
    "folder_path": "src/app/(root)/(unauth)/accounts",
    "module_name": "layout.styled.js",
    "method_name": "OuterWrapperLayout",
    "input_params": [
      {
        "type": "object",
        "name": "props",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Defines a styled component using MUI's styled function, applying flexbox layout and responsive design based on material-ui's breakpoints. It helps to create a flexible outer layout that adjusts according to screen size, typical in Next.js applications for UI components.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Box component that serves as a flexible layout for its child components."
    }
  },
  {
    "folder_path": "src/app/(root)/(unauth)/accounts",
    "module_name": "layout.styled.js",
    "method_name": "PhotoImg",
    "input_params": [
      {
        "type": "object",
        "name": "props",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Creates a styled image component using MUI's styled function, defined to fill the container while maintaining aspect ratio. This is common when dealing with responsive images in Next.js, ensuring the image adapts to different screen sizes.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled image component that adapts to the layout, particularly useful for displaying responsive photos in a Next.js application."
    }
  },
  {
    "folder_path": "src/app/(root)/(unauth)/accounts",
    "module_name": "page.styled.js",
    "method_name": "OuterWrapper",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Creates a styled Box component that serves as an outer wrapper for layout, adjusting its flex direction based on the screen size, following Material-UI responsive design principles.",
    "inner_function_calls": [],
    "output": {
      "type": "React component",
      "description": "Returns a styled Box component for layout purposes."
    }
  },
  {
    "folder_path": "src/app/(root)/(unauth)/accounts",
    "module_name": "page.styled.js",
    "method_name": "FormOuterWrapper",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Creates a styled Box for the form outer wrapper, with responsive padding, font settings, and positioning, enhancing the UI in accordance with Material-UI guidelines.",
    "inner_function_calls": [],
    "output": {
      "type": "React component",
      "description": "Returns a styled Box designed to hold form elements with responsive design."
    }
  },
  {
    "folder_path": "src/app/(root)/(unauth)/accounts",
    "module_name": "page.styled.js",
    "method_name": "FormTitle",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Styles the form title with specific font attributes and responsive font size adjustments, adhering to Material-UI design principles.",
    "inner_function_calls": [],
    "output": {
      "type": "React component",
      "description": "Delivers a styled Box component for the form title."
    }
  },
  {
    "folder_path": "src/app/(root)/(unauth)/accounts",
    "module_name": "page.styled.js",
    "method_name": "FormDescription",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Styles the description of the form, providing margins and responsive width to enhance readability, following Material-UI styling conventions.",
    "inner_function_calls": [],
    "output": {
      "type": "React component",
      "description": "Returns a styled Box component for the form description."
    }
  },
  {
    "folder_path": "src/app/(root)/(unauth)/accounts",
    "module_name": "page.styled.js",
    "method_name": "InputsWrapper",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Creates a styled Box component dedicated to wrapping input fields, ensuring proper alignment and spacing within the form layout, in compliance with Material-UI standards.",
    "inner_function_calls": [],
    "output": {
      "type": "React component",
      "description": "Provides a styled Box for holding input elements."
    }
  },
  {
    "folder_path": "src/app/(root)/(unauth)/accounts",
    "module_name": "page.styled.js",
    "method_name": "HorizontalLine",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Defines a horizontal line separator styled with color and height properties, serving to visually distinguish sections within the form layout, consistent with Material-UI practices.",
    "inner_function_calls": [],
    "output": {
      "type": "React component",
      "description": "Returns a styled Box that acts as a horizontal line within the UI."
    }
  },
  {
    "folder_path": "src/app/(root)/(unauth)/accounts",
    "module_name": "page.styled.js",
    "method_name": "FormFooterWrapper",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Creates a styled Box for the footer of the form, offering responsive alignment and font styling that fits within the overall theme.",
    "inner_function_calls": [],
    "output": {
      "type": "React component",
      "description": "Delivers a styled Box component for the footer section of the form."
    }
  },
  {
    "folder_path": "src/app/(root)/(unauth)/accounts",
    "module_name": "page.styled.js",
    "method_name": "TextCTA",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Styles a text call-to-action component with hover effects for user interaction, using Material-UI styling conventions to enhance user experience.",
    "inner_function_calls": [],
    "output": {
      "type": "React component",
      "description": "Returns a styled Box component designed for call-to-action text."
    }
  },
  {
    "folder_path": "src/app/(root)/(unauth)/accounts",
    "module_name": "page.styled.js",
    "method_name": "IndependentTextCTA",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Creates a styled Box for independent call-to-action text, incorporating hover transformations and responsive font size adjustments for better aesthetic appeal.",
    "inner_function_calls": [],
    "output": {
      "type": "React component",
      "description": "Returns a styled Box for independent call-to-action text."
    }
  },
  {
    "folder_path": "src/app/(root)/(unauth)/accounts",
    "module_name": "page.styled.js",
    "method_name": "ButtonsWrapper",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Generates a styled Box for containing buttons, ensuring responsive layout and alignment based on screen size, in keeping with Material-UI's layout practices.",
    "inner_function_calls": [],
    "output": {
      "type": "React component",
      "description": "Provides a styled Box for organizing button elements."
    }
  },
  {
    "folder_path": "src/app/(root)/(unauth)",
    "module_name": "layout.js",
    "method_name": "TestLayout",
    "input_params": [
      {
        "type": "object",
        "name": "children",
        "is_required": "true",
        "optional_value": "undefined"
      }
    ],
    "logic": "The TestLayout component serves as a layout wrapper that includes a navigation bar (NavBar) and renders any child components passed to it. This pattern is common in Next.js for structuring components in a way that maintains a consistent layout across pages.",
    "inner_function_calls": [
      {
        "name": "NavBar",
        "import_path": "@/src/components/layout/unauth"
      }
    ],
    "output": {
      "type": "JSX Element",
      "description": "The function returns a JSX element that represents the layout structure, including the NavBar and any child elements."
    }
  },
  {
    "folder_path": "src/app/(root)/(unauth)",
    "module_name": "page.styled.js",
    "method_name": "HomeHeroSection",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Defines a styled Box component for the hero section of the homepage with specific styles applied using the Material-UI styled API.",
    "inner_function_calls": [
      {
        "name": "styled",
        "import_path": "@mui/material/styles"
      }
    ],
    "output": {
      "type": "object",
      "description": "A styled Box component representing the homepage hero section."
    }
  },
  {
    "folder_path": "src/app/(root)/(unauth)",
    "module_name": "page.styled.js",
    "method_name": "HomeHeroSectionMainBox",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Creates a styled Box component that acts as a container for the main content of the home hero section.",
    "inner_function_calls": [
      {
        "name": "styled",
        "import_path": "@mui/material/styles"
      }
    ],
    "output": {
      "type": "object",
      "description": "A styled Box component for the main content of the hero section."
    }
  },
  {
    "folder_path": "src/app/(root)/(unauth)",
    "module_name": "page.styled.js",
    "method_name": "HomeSectionBox1",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Styles a Box component for the first section of the homepage, with responsive padding based on the screen size.",
    "inner_function_calls": [
      {
        "name": "styled",
        "import_path": "@mui/material/styles"
      }
    ],
    "output": {
      "type": "object",
      "description": "A styled Box component for the first homepage section."
    }
  },
  {
    "folder_path": "src/app/(root)/(unauth)",
    "module_name": "page.styled.js",
    "method_name": "HeroTitleBox",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Creates a styled Box component specifically for holding the hero title, with responsive padding.",
    "inner_function_calls": [
      {
        "name": "styled",
        "import_path": "@mui/material/styles"
      }
    ],
    "output": {
      "type": "object",
      "description": "A styled Box for the hero title section."
    }
  },
  {
    "folder_path": "src/app/(root)/(unauth)",
    "module_name": "page.styled.js",
    "method_name": "HeroTitle",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Defines a styled Typography component representing the title in the hero section, with variations based on screen size.",
    "inner_function_calls": [
      {
        "name": "styled",
        "import_path": "@mui/material/styles"
      }
    ],
    "output": {
      "type": "object",
      "description": "A styled Typography component specifically for the hero title."
    }
  },
  {
    "folder_path": "src/app/(root)/(unauth)",
    "module_name": "page.styled.js",
    "method_name": "HeroDescriptionBox",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Creates a styled Box component for the hero description content, centered and constrained by maximum width.",
    "inner_function_calls": [
      {
        "name": "styled",
        "import_path": "@mui/material/styles"
      }
    ],
    "output": {
      "type": "object",
      "description": "A styled Box component for the hero description."
    }
  },
  {
    "folder_path": "src/app/(root)/(unauth)",
    "module_name": "page.styled.js",
    "method_name": "HeroDescription",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Styles a Typography component to serve as the description in the hero section, with specific font sizes and color themes that adapt to different screens.",
    "inner_function_calls": [
      {
        "name": "styled",
        "import_path": "@mui/material/styles"
      }
    ],
    "output": {
      "type": "object",
      "description": "A styled Typography component for the hero description."
    }
  },
  {
    "folder_path": "src/app/(root)/(unauth)",
    "module_name": "page.styled.js",
    "method_name": "HeroButtonBox",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Defines a styled Box component that serves as a container for buttons in the hero section, aligning them center.",
    "inner_function_calls": [
      {
        "name": "styled",
        "import_path": "@mui/material/styles"
      }
    ],
    "output": {
      "type": "object",
      "description": "A styled Box for containing buttons in the hero section."
    }
  },
  {
    "folder_path": "src/app/(root)/(unauth)",
    "module_name": "page.styled.js",
    "method_name": "HeroButton",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Creates a styled Button component for the hero section with specific padding, font size, and hover states.",
    "inner_function_calls": [
      {
        "name": "styled",
        "import_path": "@mui/material/styles"
      }
    ],
    "output": {
      "type": "object",
      "description": "A styled Button component for the hero section."
    }
  },
  {
    "folder_path": "src/app/(root)/(unauth)",
    "module_name": "page.styled.js",
    "method_name": "HeroButtonIconBox",
    "input_params": [],
    "logic": "A styled Box component for layout of icon buttons within the hero section, centering its content.",
    "inner_function_calls": [
      {
        "name": "styled",
        "import_path": "@mui/material/styles"
      }
    ],
    "output": {
      "type": "object",
      "description": "A styled Box for containing icons associated with buttons."
    }
  },
  {
    "folder_path": "src/app/(root)/(unauth)",
    "module_name": "page.styled.js",
    "method_name": "HomeSectionBox2",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Defines styles for the second section of the homepage, applying padding and border radius.",
    "inner_function_calls": [
      {
        "name": "styled",
        "import_path": "@mui/material/styles"
      }
    ],
    "output": {
      "type": "object",
      "description": "A styled Box component for the second homepage section."
    }
  },
  {
    "folder_path": "src/app/(root)/(unauth)",
    "module_name": "page.styled.js",
    "method_name": "HomeSectionBox3",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Creates a styled Box component for the third section of the homepage, with specified bottom padding for spacing.",
    "inner_function_calls": [
      {
        "name": "styled",
        "import_path": "@mui/material/styles"
      }
    ],
    "output": {
      "type": "object",
      "description": "A styled Box component for the third homepage section."
    }
  },
  {
    "folder_path": "src/app/(root)/(unauth)",
    "module_name": "page.styled.js",
    "method_name": "HeroBrandTitleBox",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Defines a styled Box component for the title area of the brand section with bottom margin spacing.",
    "inner_function_calls": [
      {
        "name": "styled",
        "import_path": "@mui/material/styles"
      }
    ],
    "output": {
      "type": "object",
      "description": "A styled Box component for the brand title."
    }
  },
  {
    "folder_path": "src/app/(root)/(unauth)",
    "module_name": "page.styled.js",
    "method_name": "HeroBrandTitle",
    "input_params": [],
    "logic": "Styles a Typography component specifically for the brand title with centered alignment and bottom margin.",
    "inner_function_calls": [
      {
        "name": "styled",
        "import_path": "@mui/material/styles"
      }
    ],
    "output": {
      "type": "object",
      "description": "A styled Typography component for the brand title."
    }
  },
  {
    "folder_path": "src/app/(root)/(unauth)",
    "module_name": "page.styled.js",
    "method_name": "HomeReviewSection",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Styles a Box component for the review section of the homepage, with padding and automatic margin for centering.",
    "inner_function_calls": [
      {
        "name": "styled",
        "import_path": "@mui/material/styles"
      }
    ],
    "output": {
      "type": "object",
      "description": "A styled Box component for displaying reviews."
    }
  },
  {
    "folder_path": "src/app/(root)/(unauth)",
    "module_name": "page.styled.js",
    "method_name": "ReviewCard",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Creates a styled Box component for review cards, configured as a flex container that vertically stacks its contents.",
    "inner_function_calls": [
      {
        "name": "styled",
        "import_path": "@mui/material/styles"
      }
    ],
    "output": {
      "type": "object",
      "description": "A styled Box component that formats individual review cards."
    }
  },
  {
    "folder_path": "src/app/(root)/(unauth)",
    "module_name": "page.styled.js",
    "method_name": "ReviewCardDescripition",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Defines a styled Typography component for individual review descriptions with centered text alignment and specific color theme.",
    "inner_function_calls": [
      {
        "name": "styled",
        "import_path": "@mui/material/styles"
      }
    ],
    "output": {
      "type": "object",
      "description": "A styled Typography component for the description within review cards."
    }
  },
  {
    "folder_path": "src/app/(root)/(unauth)",
    "module_name": "page.styled.js",
    "method_name": "ReviewCardPersonBox",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Styles a Box component for properly aligning the person's details in review cards, spacing them evenly.",
    "inner_function_calls": [
      {
        "name": "styled",
        "import_path": "@mui/material/styles"
      }
    ],
    "output": {
      "type": "object",
      "description": "A styled Box for aligning person's review details."
    }
  },
  {
    "folder_path": "src/app/(root)/(unauth)",
    "module_name": "page.styled.js",
    "method_name": "ReviewCardPersonAvatar",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Creates a styled Avatar component for displaying reviewers' images, set to specific dimensions.",
    "inner_function_calls": [
      {
        "name": "styled",
        "import_path": "@mui/material/styles"
      }
    ],
    "output": {
      "type": "object",
      "description": "A styled Avatar component for reviewers' profile pictures."
    }
  },
  {
    "folder_path": "src/app/(root)/(unauth)",
    "module_name": "page.styled.js",
    "method_name": "ReviewCardPersonDetailsBox",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Defines a styled Box component that houses details of the reviewer, including their name and position.",
    "inner_function_calls": [
      {
        "name": "styled",
        "import_path": "@mui/material/styles"
      }
    ],
    "output": {
      "type": "object",
      "description": "A styled Box for encapsulating review person's details."
    }
  },
  {
    "folder_path": "src/app/(root)/(unauth)",
    "module_name": "page.styled.js",
    "method_name": "ReviewCardPersonName",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Styles a Box component for the reviewer's name field, specifying font sizes and color.",
    "inner_function_calls": [
      {
        "name": "styled",
        "import_path": "@mui/material/styles"
      }
    ],
    "output": {
      "type": "object",
      "description": "A styled Box element presenting reviewer's name."
    }
  },
  {
    "folder_path": "src/app/(root)/(unauth)",
    "module_name": "page.styled.js",
    "method_name": "ReviewCardPersonPosition",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Creates a styled Box component for the reviewer's position or title, with defined font size and color attributes.",
    "inner_function_calls": [
      {
        "name": "styled",
        "import_path": "@mui/material/styles"
      }
    ],
    "output": {
      "type": "object",
      "description": "A styled Box for displaying reviewer's job title."
    }
  },
  {
    "folder_path": "src/app/(root)/(unauth)",
    "module_name": "page.styled.js",
    "method_name": "HomeFeaturedSection",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Creates a styled Box component representing a featured section of the homepage, with its background image and other styles.",
    "inner_function_calls": [
      {
        "name": "styled",
        "import_path": "@mui/material/styles"
      }
    ],
    "output": {
      "type": "object",
      "description": "A styled Box component for a featured items section."
    }
  },
  {
    "folder_path": "src/app/(root)/(unauth)",
    "module_name": "page.styled.js",
    "method_name": "FeatureGrid",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "string",
        "name": "direction",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Defines a styled Grid component that helps organize featured content with configurable direction and spacing.",
    "inner_function_calls": [
      {
        "name": "styled",
        "import_path": "@mui/material/styles"
      }
    ],
    "output": {
      "type": "object",
      "description": "A styled Grid component to structure featured items."
    }
  },
  {
    "folder_path": "src/app/(root)/(unauth)",
    "module_name": "page.styled.js",
    "method_name": "FeatureImageBox",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Styles a Box component specifically for holding feature images with maximum width constraints.",
    "inner_function_calls": [
      {
        "name": "styled",
        "import_path": "@mui/material/styles"
      }
    ],
    "output": {
      "type": "object",
      "description": "A styled Box for containing images related to features."
    }
  },
  {
    "folder_path": "src/app/(root)/(unauth)",
    "module_name": "page.styled.js",
    "method_name": "FeatureImage",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Creates a styled Box to display feature images, ensuring full cover with radius effects.",
    "inner_function_calls": [
      {
        "name": "styled",
        "import_path": "@mui/material/styles"
      }
    ],
    "output": {
      "type": "object",
      "description": "A styled Box for actual feature images with visual styles."
    }
  },
  {
    "folder_path": "src/app/(root)/(unauth)",
    "module_name": "page.styled.js",
    "method_name": "FeatureContentBox",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Styles a Box component for the content of features, applicable with centering styles and maximum width.",
    "inner_function_calls": [
      {
        "name": "styled",
        "import_path": "@mui/material/styles"
      }
    ],
    "output": {
      "type": "object",
      "description": "A styled Box component for organizing feature content."
    }
  },
  {
    "folder_path": "src/app/(root)/(unauth)",
    "module_name": "page.styled.js",
    "method_name": "FeatureContentTitle",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Defines a styled Typography component for the feature title with multi-screen font adjustments.",
    "inner_function_calls": [
      {
        "name": "styled",
        "import_path": "@mui/material/styles"
      }
    ],
    "output": {
      "type": "object",
      "description": "A styled Typography for feature content titles."
    }
  },
  {
    "folder_path": "src/app/(root)/(unauth)",
    "module_name": "page.styled.js",
    "method_name": "FeatureContentDescripion",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Styles a Typography component to represent feature descriptions with specific typography adjustments.",
    "inner_function_calls": [
      {
        "name": "styled",
        "import_path": "@mui/material/styles"
      }
    ],
    "output": {
      "type": "object",
      "description": "A styled Typography component for descriptions of features."
    }
  },
  {
    "folder_path": "src/app/(root)/(unauth)",
    "module_name": "page.styled.js",
    "method_name": "HomeServicesSection",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Styles a Box component to serve as a services section with background styling.",
    "inner_function_calls": [
      {
        "name": "styled",
        "import_path": "@mui/material/styles"
      }
    ],
    "output": {
      "type": "object",
      "description": "A styled Box for displaying service offerings."
    }
  },
  {
    "folder_path": "src/app/(root)/(unauth)",
    "module_name": "page.styled.js",
    "method_name": "ServicesBox",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Defines a styled Box component that centers the services content while maintaining vertical layout characteristics.",
    "inner_function_calls": [
      {
        "name": "styled",
        "import_path": "@mui/material/styles"
      }
    ],
    "output": {
      "type": "object",
      "description": "A styled Box to layout service items."
    }
  },
  {
    "folder_path": "src/app/(root)/(unauth)",
    "module_name": "page.styled.js",
    "method_name": "ServicesTitle",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Creates a styled Typography component for the services section's title, adapting its styles based on screen sizes.",
    "inner_function_calls": [
      {
        "name": "styled",
        "import_path": "@mui/material/styles"
      }
    ],
    "output": {
      "type": "object",
      "description": "A styled Typography for showcasing the services section title."
    }
  },
  {
    "folder_path": "src/app/(root)/(unauth)",
    "module_name": "page.styled.js",
    "method_name": "ServicesContentsBox",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Styles a Box component for containing the main content of services, ensuring responsive design and visuals.",
    "inner_function_calls": [
      {
        "name": "styled",
        "import_path": "@mui/material/styles"
      }
    ],
    "output": {
      "type": "object",
      "description": "A styled Box for the main content of service offerings."
    }
  },
  {
    "folder_path": "src/app/(root)/(unauth)",
    "module_name": "page.styled.js",
    "method_name": "ContactSection",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Defines a Box component styled as the contact section with specific background color settings.",
    "inner_function_calls": [
      {
        "name": "styled",
        "import_path": "@mui/material/styles"
      }
    ],
    "output": {
      "type": "object",
      "description": "A styled Box for the contact section, ensuring visual consistency."
    }
  },
  {
    "folder_path": "src/app/(root)/(unauth)",
    "module_name": "page.styled.js",
    "method_name": "ContactSectionBox",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Creates a styled Box for the layout of contact information, adjusting for vertical centering.",
    "inner_function_calls": [
      {
        "name": "styled",
        "import_path": "@mui/material/styles"
      }
    ],
    "output": {
      "type": "object",
      "description": "A styled Box component for laying out contact information."
    }
  },
  {
    "folder_path": "src/app/(root)/(unauth)",
    "module_name": "page.styled.js",
    "method_name": "ContactSectionMainBox",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Defines a styled Box component with vertical padding adjustments for content spacing in contact sections.",
    "inner_function_calls": [
      {
        "name": "styled",
        "import_path": "@mui/material/styles"
      }
    ],
    "output": {
      "type": "object",
      "description": "A styled Box component for the main area in the contact section."
    }
  },
  {
    "folder_path": "src/app/(root)/(unauth)",
    "module_name": "page.styled.js",
    "method_name": "ContactWelcomeTitle",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Styles a Typography component for displaying a welcome message in the contact section, adhering to responsive styles and typography levels.",
    "inner_function_calls": [
      {
        "name": "styled",
        "import_path": "@mui/material/styles"
      }
    ],
    "output": {
      "type": "object",
      "description": "A styled Typography for welcome title in contact section."
    }
  },
  {
    "folder_path": "src/app/(root)/(unauth)",
    "module_name": "page.styled.js",
    "method_name": "ContactInfoSectionBox",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Creates a styled Box component for displaying contact information with flexible layout and margins.",
    "inner_function_calls": [
      {
        "name": "styled",
        "import_path": "@mui/material/styles"
      }
    ],
    "output": {
      "type": "object",
      "description": "A styled Box for grouping content in the contact info section."
    }
  },
  {
    "folder_path": "src/app/(root)/(unauth)",
    "module_name": "page.styled.js",
    "method_name": "ContactInfoContainer",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Defines a styled Container component that houses contact information while maintaining width constraints and automatic margins.",
    "inner_function_calls": [
      {
        "name": "styled",
        "import_path": "@mui/material/styles"
      }
    ],
    "output": {
      "type": "object",
      "description": "A styled Container for organizing contact info."
    }
  },
  {
    "folder_path": "src/app/(root)/(unauth)",
    "module_name": "page.styled.js",
    "method_name": "ContactInfoTitleBox",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Creates a styled Box component for the title of contact information, with border and padding layout defined.",
    "inner_function_calls": [
      {
        "name": "styled",
        "import_path": "@mui/material/styles"
      }
    ],
    "output": {
      "type": "object",
      "description": "A styled Box for the title area of contact information."
    }
  },
  {
    "folder_path": "src/app/(root)/(unauth)",
    "module_name": "page.styled.js",
    "method_name": "ContactInfoTitle",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Styles a Typography component to serve as the title within contact information, with responsive font sizes and styles.",
    "inner_function_calls": [
      {
        "name": "styled",
        "import_path": "@mui/material/styles"
      }
    ],
    "output": {
      "type": "object",
      "description": "A styled Typography for contact information titles."
    }
  },
  {
    "folder_path": "src/app/(root)/(unauth)",
    "module_name": "page.styled.js",
    "method_name": "ContactInfoValue",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Defines a styled Typography component representing values in contact information with responsive size adjustments.",
    "inner_function_calls": [
      {
        "name": "styled",
        "import_path": "@mui/material/styles"
      }
    ],
    "output": {
      "type": "object",
      "description": "A styled Typography for displaying values in contact information."
    }
  },
  {
    "folder_path": "src/app/(root)/(unauth)",
    "module_name": "page.styled.js",
    "method_name": "ContactInfoTitle2Box",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Creates a styled Box component similar to the first title area for displaying secondary title with border and padding.",
    "inner_function_calls": [
      {
        "name": "styled",
        "import_path": "@mui/material/styles"
      }
    ],
    "output": {
      "type": "object",
      "description": "A styled Box for a secondary title in contact information."
    }
  },
  {
    "folder_path": "src/app/(root)/api/downloadFile",
    "module_name": "route.js",
    "method_name": "GET",
    "input_params": [
      {
        "type": "object",
        "name": "request",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "The GET function handles incoming requests, extracts the 'key' parameter from the request URL, retrieves an object from AWS S3 using the specified key, and returns the object as a response with a modified filename. This is useful in a Next.js API route context for serving files stored in S3.",
    "inner_function_calls": [
      {
        "name": "s3.getObject",
        "import_path": "aws-sdk"
      },
      {
        "name": "new URL",
        "import_path": "native"
      },
      {
        "name": "NextResponse.json",
        "import_path": "next/server"
      }
    ],
    "output": {
      "type": "object",
      "description": "The output represents an HTTP response returning either the requested file or an error message in JSON format."
    }
  },
  {
    "folder_path": "src/app/(root)/api/getSignedUrl",
    "module_name": "route.js",
    "method_name": "GET",
    "input_params": [
      {
        "type": "Object",
        "name": "request",
        "is_required": "true",
        "optional_value": "undefined"
      }
    ],
    "logic": "This function handles a GET request to generate a signed URL for accessing an object stored in an AWS S3 bucket. It extracts parameters from the request URL to identify the object key and optional content type required for fetching the signed URL, implementing error handling for missing parameters.",
    "inner_function_calls": [
      {
        "name": "json",
        "import_path": "next/server"
      },
      {
        "name": "getSignedUrlPromise",
        "import_path": "aws-sdk"
      }
    ],
    "output": {
      "type": "Object",
      "description": "Returns a JSON response containing either the signed URL for the requested object in S3 or an error message depending on the success or failure of the operation."
    }
  },
  {
    "folder_path": "src/app/(root)/api/getSignedUrls",
    "module_name": "route.js",
    "method_name": "POST",
    "input_params": [
      {
        "type": "object",
        "name": "request",
        "is_required": "true",
        "optional_value": ""
      }
    ],
    "logic": "This function handles the POST request to generate signed URLs for media stored in an AWS S3 bucket. It extracts data from the request body, generates signed URLs for each media key, and returns these URLs in a structured JSON response according to Next.js API route conventions.",
    "inner_function_calls": [
      {
        "name": "json",
        "import_path": "next/server"
      },
      {
        "name": "map",
        "import_path": "built-in"
      },
      {
        "name": "getSignedUrlPromise",
        "import_path": "aws-sdk"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns a JSON response containing either the generated signed URLs or an error message, conforming to the NextResponse API route response format."
    }
  },
  {
    "folder_path": "src/app/(root)/api/getSignedUrls",
    "module_name": "route.js",
    "method_name": "generateGetObjectUrl",
    "input_params": [
      {
        "type": "string",
        "name": "key",
        "is_required": "true",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "id",
        "is_required": "true",
        "optional_value": ""
      }
    ],
    "logic": "This inner function creates a signed URL for accessing an object stored in S3 based on the provided key and optional path. It uses the AWS SDK to generate a URL that grants temporary access to the resource for a limited time.",
    "inner_function_calls": [
      {
        "name": "getSignedUrlPromise",
        "import_path": "aws-sdk"
      }
    ],
    "output": {
      "type": "string",
      "description": "Produces a signed URL string that can be used to access an S3 object, valid for a limited period."
    }
  },
  {
    "folder_path": "src/app/(root)/api/uploadSignedUrl",
    "module_name": "route.js",
    "method_name": "GET",
    "input_params": [
      {
        "type": "Request",
        "name": "request",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Handles GET requests to generate a signed URL for uploading files to an S3 bucket. It extracts parameters from the request URL, validates them, and uses AWS SDK to return a pre-signed URL if valid, or an error response if parameters are missing or if an error occurs during the URL generation.",
    "inner_function_calls": [
      {
        "name": "new URL",
        "import_path": ""
      },
      {
        "name": "searchParams.get",
        "import_path": ""
      },
      {
        "name": "s3.getSignedUrlPromise",
        "import_path": "aws-sdk"
      },
      {
        "name": "NextResponse.json",
        "import_path": "next/server"
      }
    ],
    "output": {
      "type": "JSON",
      "description": "Returns a JSON object containing the signed URL for the S3 upload or an error message with the appropriate status code."
    }
  },
  {
    "folder_path": "src/app/(root)",
    "module_name": "layout.js",
    "method_name": "RootLayout",
    "input_params": [
      {
        "type": "object",
        "name": "children",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function serves as the main layout component for the application. It sets up internationalization, theme context, and other necessary providers for the application to function correctly within a Next.js environment.",
    "inner_function_calls": [
      {
        "name": "getLocale",
        "import_path": "next-intl/server"
      },
      {
        "name": "getMessages",
        "import_path": "next-intl/server"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "Returns a structured HTML layout for the application that includes the body content and applies various providers for state management, internationalization, theming, and notifications."
    }
  },
  {
    "folder_path": "src/assets/icons",
    "module_name": "facebook.js",
    "method_name": "FacebookSVG",
    "input_params": [
      {
        "type": "number",
        "name": "size",
        "is_required": "/required/",
        "optional_value": "50"
      },
      {
        "type": "string",
        "name": "color",
        "is_required": "/required/",
        "optional_value": "#798897"
      }
    ],
    "logic": "This functional component renders an SVG representation of the Facebook logo. It accepts props for customization, specifically for size and color, falling back on default values if not provided. This demonstrates React's way of creating reusable UI components that can be integrated within various parts of a Next.js application.",
    "inner_function_calls": [],
    "output": {
      "type": "JSX.Element",
      "description": "The output is a React element containing an SVG image, which can be rendered as part of a UI in a Next.js application. It allows for dynamic styling based on the input props."
    }
  },
  {
    "folder_path": "src/assets/icons",
    "module_name": "index.js",
    "method_name": "Icon",
    "input_params": [
      {
        "type": "string",
        "name": "name",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "number",
        "name": "size",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "color",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "props",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "The Icon component dynamically renders an icon based on the provided 'name' prop. It looks up the corresponding icon component in the 'icons' object. If found, it renders the icon with the specified size and color, along with any additional props. If the icon name does not match, it displays a placeholder div with a '?' character.",
    "inner_function_calls": [
      {
        "name": "IconComponent",
        "import_path": "./facebook, ./instagram, ./linkedin, ./logo, ./noFolders"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "The output is either a rendered icon component (if the name matches) or a placeholder element containing '?'. This ties into Next.js as the component can be part of a dynamic UI."
    }
  },
  {
    "folder_path": "src/assets/icons",
    "module_name": "instagram.js",
    "method_name": "InstagramSVG",
    "input_params": [
      {
        "type": "number",
        "name": "size",
        "is_required": "/",
        "optional_value": "/"
      },
      {
        "type": "string",
        "name": "color",
        "is_required": "/",
        "optional_value": "#798897"
      },
      {
        "type": "object",
        "name": "props",
        "is_required": "/",
        "optional_value": "/"
      }
    ],
    "logic": "This functional component renders an SVG icon resembling the Instagram logo with customizable size and color props. It follows standard React component conventions and allows additional props to be spread onto the containing div element, enhancing flexibility in usage. It aligns with Next.js principles of using React components for UI generation.",
    "inner_function_calls": [],
    "output": {
      "type": "JSX.Element",
      "description": "Returns a JSX element representing the Instagram SVG icon, which can be integrated into a Next.js page or component."
    }
  },
  {
    "folder_path": "src/assets/icons",
    "module_name": "linkedin.js",
    "method_name": "LinkedInSVG",
    "input_params": [
      {
        "type": "number",
        "name": "size",
        "is_required": "",
        "optional_value": "50"
      },
      {
        "type": "string",
        "name": "color",
        "is_required": "",
        "optional_value": "#798897"
      },
      {
        "type": "object",
        "name": "props",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "This function is a React functional component that renders an SVG icon representing LinkedIn. It takes optional size and color props, assigning default values if not provided.",
    "inner_function_calls": [],
    "output": {
      "type": "JSX.Element",
      "description": "The component returns a JSX Element representing the LinkedIn SVG wrapped in a div, which is a visual representation appropriate for use in a Next.js component."
    }
  },
  {
    "folder_path": "src/assets/icons",
    "module_name": "logo.js",
    "method_name": "LogoSVG",
    "input_params": [
      {
        "type": "number",
        "name": "size",
        "is_required": "",
        "optional_value": "57"
      },
      {
        "type": "string",
        "name": "color",
        "is_required": "",
        "optional_value": "#ffffff"
      }
    ],
    "logic": "The LogoSVG component generates a scalable vector graphic for a logo, accepting size and color as props, with default values for both. It's used in a React environment, especially suitable for a Next.js application where SVG icons might be employed for layout and branding.",
    "inner_function_calls": [],
    "output": {
      "type": "React element",
      "description": "Returns a div containing the SVG representation of the logo, allowing for optional additional props to be passed."
    }
  },
  {
    "folder_path": "src/assets/icons",
    "module_name": "noFolders.js",
    "method_name": "NoFoldersSVG",
    "input_params": [
      {
        "type": "number",
        "name": "size",
        "is_required": "",
        "optional_value": "159"
      },
      {
        "type": "object",
        "name": "...props",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This is a functional component that renders an SVG representing a 'No Folders' icon. It allows an optional size parameter for customizing the size of the SVG, while spreading any additional props onto the div element that wraps the SVG.",
    "inner_function_calls": [],
    "output": {
      "type": "JSX.Element",
      "description": "Renders a React component representing the 'No Folders' SVG image."
    }
  },
  {
    "folder_path": "src/assets/illustrations",
    "module_name": "BackgroundIllustration.js",
    "method_name": "BackgroundIllustration",
    "input_params": [],
    "logic": "The BackgroundIllustration function is a React functional component that utilizes the Material-UI's useTheme hook to obtain the current theme's primary color. It returns an SVG background illustration with a linear gradient and a complex path, contributing to the component's visual design. This follows Next.js conventions by ensuring the component is optimized for rendering with memoization using React's memo.",
    "inner_function_calls": [
      {
        "name": "useTheme",
        "import_path": "@mui/material/styles"
      },
      {
        "name": "memo",
        "import_path": "react"
      }
    ],
    "output": {
      "type": "ReactNode",
      "description": "The output represents the JSX structure of the background illustration, including SVG definitions and paths, which forms part of a React component rendering in a Next.js application."
    }
  },
  {
    "folder_path": "src/assets/illustrations",
    "module_name": "UploadIllustration.js",
    "method_name": "UploadIllustration",
    "input_params": [
      {
        "type": "object",
        "name": "other",
        "is_required": "",
        "optional_value": "{}"
      }
    ],
    "logic": "The UploadIllustration function is a React functional component that utilizes the MUI Box component to render an SVG illustration. It retrieves color values from the theme and uses them to define colors within the SVG elements. This function exemplifies a component rendering custom illustrations in a modular React/Next.js setup.",
    "inner_function_calls": [
      {
        "name": "useTheme",
        "import_path": "@mui/material/styles"
      },
      {
        "name": "BackgroundIllustration",
        "import_path": "./BackgroundIllustration"
      }
    ],
    "output": {
      "type": "JSX Element",
      "description": "An SVG embedded within a Box component styled with Material UI. This represents a visual illustration component designed for upload interactions."
    }
  },
  {
    "folder_path": "src/assets/illustrations",
    "module_name": "index.js",
    "method_name": "Illustration",
    "input_params": [
      {
        "type": "string",
        "name": "name",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "number",
        "name": "height",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "number",
        "name": "width",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "The Illustration component conditionally renders a Hero component or a default placeholder based on the 'name' prop. It uses a switch statement to determine which component to render, adhering to typical React component logic.",
    "inner_function_calls": [
      {
        "name": "Hero",
        "import_path": "./hero"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "The output is a JSX element representing either the Hero component or a default div, depending on the name prop."
    }
  },
  {
    "folder_path": "src/components",
    "module_name": "AuthWithSocial.js",
    "method_name": "AuthWithSocial",
    "input_params": [
      {
        "type": "function",
        "name": "setProfilePic",
        "is_required": "true",
        "optional_value": ""
      },
      {
        "type": "function",
        "name": "setUserData",
        "is_required": "true",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "profilePic",
        "is_required": "true",
        "optional_value": ""
      }
    ],
    "logic": "Defines the AuthWithSocial component for handling Google authentication within a Next.js application. It makes use of hooks for managing user data retrieval and authentication flow, maintaining the component's state around user profiles.",
    "inner_function_calls": [
      {
        "name": "useLazyGetUserQuery",
        "import_path": "../redux/slices"
      },
      {
        "name": "useDispatch",
        "import_path": "react-redux"
      },
      {
        "name": "useRouter",
        "import_path": "next/navigation"
      },
      {
        "name": "useSearchParams",
        "import_path": "next/navigation"
      },
      {
        "name": "signoutUser",
        "import_path": "../utils/auth"
      },
      {
        "name": "signInWithRedirect",
        "import_path": "aws-amplify/auth"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "Renders a JSX element containing authentication UI, including a Google sign-in button, wrapped in a conditional based on the profile picture's presence."
    }
  },
  {
    "folder_path": "src/components",
    "module_name": "AuthWithSocial.js",
    "method_name": "handleGoogleLogin",
    "input_params": [],
    "logic": "Handles the login process with Google by signing out any existing user session and redirecting the user to the Google sign-in page.",
    "inner_function_calls": [
      {
        "name": "signoutUser",
        "import_path": "../utils/auth"
      },
      {
        "name": "signInWithRedirect",
        "import_path": "aws-amplify/auth"
      }
    ],
    "output": {
      "type": "Promise<void>",
      "description": "Executes asynchronous login logic, leading to the user being redirected to the Google authentication page."
    }
  },
  {
    "folder_path": "src/components",
    "module_name": "VideoPlayer.js",
    "method_name": "VideoPlayer",
    "input_params": [
      {
        "type": "string",
        "name": "srcKey",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "The VideoPlayer component fetches a signed URL for a video file using a specified key and renders a video player with the appropriate source URL. It employs the useEffect hook to perform the fetch operation when the component is mounted, leveraging React's state management via useState to manage the video URL's state.",
    "inner_function_calls": [
      {
        "name": "getPrivatefile",
        "import_path": ""
      },
      {
        "name": "setVidUrl",
        "import_path": ""
      },
      {
        "name": "fetch",
        "import_path": ""
      },
      {
        "name": "encodeURIComponent",
        "import_path": ""
      },
      {
        "name": "json",
        "import_path": ""
      }
    ],
    "output": {
      "type": "JSX Element",
      "description": "The component returns a styled video element based on the state variable vidUrl, suitable for playback with options such as autoplay, loop, and muted."
    }
  },
  {
    "folder_path": "src/components",
    "module_name": "VideoPlayer.js",
    "method_name": "getPrivatefile",
    "input_params": [],
    "logic": "The getPrivatefile function asynchronously fetches a signed URL from the API endpoint, using the provided srcKey. It checks the response status and updates the vhUrl state with the received URL, enabling the video element to load the video accordingly.",
    "inner_function_calls": [
      {
        "name": "fetch",
        "import_path": ""
      },
      {
        "name": "response.json",
        "import_path": ""
      },
      {
        "name": "setVidUrl",
        "import_path": ""
      },
      {
        "name": "console.error",
        "import_path": ""
      }
    ],
    "output": {
      "type": "Promise",
      "description": "The function performs API fetching and updates the component's state based on the success of the response, thereby managing the side effect of fetching external resources in a React component."
    }
  },
  {
    "folder_path": "src/components/customStyle/animate",
    "module_name": "IconButtonAnimate.js",
    "method_name": "IconButtonAnimate",
    "input_params": [
      {
        "type": "object",
        "name": "props",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "ref",
        "name": "ref",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "This is a forwardRef functional component that wraps an IconButton with animation effects defined in AnimateWrap. It allows passing down props including size and children to the IconButton.",
    "inner_function_calls": [
      {
        "name": "AnimateWrap",
        "import_path": ""
      },
      {
        "name": "IconButton",
        "import_path": "@mui/material"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "Returns an animated IconButton wrapped within the AnimateWrap component."
    }
  },
  {
    "folder_path": "src/components/customStyle/animate",
    "module_name": "IconButtonAnimate.js",
    "method_name": "AnimateWrap",
    "input_params": [
      {
        "type": "string",
        "name": "size",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "node",
        "name": "children",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "This function component applies animation variants based on the button size and wraps its children within a Box component, providing hover and tap animations.",
    "inner_function_calls": [
      {
        "name": "Box",
        "import_path": "@mui/material"
      },
      {
        "name": "m.div",
        "import_path": "framer-motion"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "Returns a Box element that animates its child elements based on the specified size."
    }
  },
  {
    "folder_path": "src/components/customStyle/animate",
    "module_name": "index.js",
    "method_name": "IconButtonAnimate",
    "input_params": [],
    "logic": "This module exports the default component 'IconButtonAnimate' from the './IconButtonAnimate' file. It follows Next.js conventions for exporting React components that can provide enhanced functionality or styling to a button element in a Next.js application.",
    "inner_function_calls": [],
    "output": {
      "type": "React Component",
      "description": "It represents a button component that animates its icon, which can be used in Next.js applications to enhance user interface interactions."
    }
  },
  {
    "folder_path": "src/components/customStyle/animate/variants",
    "module_name": "fade.js",
    "method_name": "varFade",
    "input_params": [
      {
        "type": "object",
        "name": "props",
        "is_required": "true",
        "optional_value": ""
      }
    ],
    "logic": "The varFade function generates animation configurations for elements entering and exiting the screen. It accepts an object of properties to customize the transition effects and distances. In Next.js, it can be used to enhance component interactivity during transitions, providing a dynamic user experience.",
    "inner_function_calls": [
      {
        "name": "varTranEnter",
        "import_path": "./transition"
      },
      {
        "name": "varTranExit",
        "import_path": "./transition"
      },
      {
        "name": "varTranEnter",
        "import_path": "./transition"
      },
      {
        "name": "varTranExit",
        "import_path": "./transition"
      },
      {
        "name": "varTranEnter",
        "import_path": "./transition"
      },
      {
        "name": "varTranExit",
        "import_path": "./transition"
      },
      {
        "name": "varTranEnter",
        "import_path": "./transition"
      },
      {
        "name": "varTranExit",
        "import_path": "./transition"
      },
      {
        "name": "varTranEnter",
        "import_path": "./transition"
      },
      {
        "name": "varTranExit",
        "import_path": "./transition"
      },
      {
        "name": "varTranEnter",
        "import_path": "./transition"
      },
      {
        "name": "varTranExit",
        "import_path": "./transition"
      },
      {
        "name": "varTranEnter",
        "import_path": "./transition"
      },
      {
        "name": "varTranExit",
        "import_path": "./transition"
      },
      {
        "name": "varTranEnter",
        "import_path": "./transition"
      },
      {
        "name": "varTranExit",
        "import_path": "./transition"
      }
    ],
    "output": {
      "type": "object",
      "description": "An object containing configuration settings for animations, with properties for different entry and exit transitions, such as in, out, inUp, outDown, and so on. This structure can be used in React components for implementing animated transitions easily."
    }
  },
  {
    "folder_path": "src/components/customStyle/animate/variants",
    "module_name": "transition.js",
    "method_name": "varTranHover",
    "input_params": [
      {
        "type": "object",
        "name": "props",
        "is_required": "false",
        "optional_value": "null"
      }
    ],
    "logic": "This function returns a configuration object for a hover transition, extracting duration and easing values from the props provided, with sensible defaults if not specified.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An object containing 'duration' and 'ease' properties for the hover transition, useful for animating UI elements."
    }
  },
  {
    "folder_path": "src/components/customStyle/animate/variants",
    "module_name": "transition.js",
    "method_name": "varTranEnter",
    "input_params": [
      {
        "type": "object",
        "name": "props",
        "is_required": "false",
        "optional_value": "null"
      }
    ],
    "logic": "This function returns a configuration object for an enter transition, looking up duration and easing values from the props, providing defaults if they're not specified.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An object containing 'duration' and 'ease' properties for the enter transition, essential for entrance animations in UI."
    }
  },
  {
    "folder_path": "src/components/customStyle/animate/variants",
    "module_name": "transition.js",
    "method_name": "varTranExit",
    "input_params": [
      {
        "type": "object",
        "name": "props",
        "is_required": "false",
        "optional_value": "null"
      }
    ],
    "logic": "This function provides a configuration object for an exit transition, extracting duration and EaseOut values from the props, with defaults in the absence of input.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An object containing 'duration' and 'ease' properties for the exit transition, crucial for exit animations in UI."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/confirm",
    "module_name": "6l11eqdm4wf5ijw",
    "method_name": "ConfirmDialog",
    "input_params": [
      {
        "type": "boolean",
        "name": "open",
        "is_required": "true",
        "optional_value": ""
      },
      {
        "type": "node",
        "name": "title",
        "is_required": "true",
        "optional_value": ""
      },
      {
        "type": "node",
        "name": "action",
        "is_required": "true",
        "optional_value": ""
      },
      {
        "type": "node",
        "name": "content",
        "is_required": "true",
        "optional_value": ""
      },
      {
        "type": "function",
        "name": "onClose",
        "is_required": "true",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "other",
        "is_required": "false",
        "optional_value": ""
      }
    ],
    "logic": "The ConfirmDialog component is a reusable dialog that presents a confirmation interface, allowing users to respond with a specified action or cancel. It utilizes Material-UI components and Next.js internationalization (i18n) for dynamic text.",
    "inner_function_calls": [
      {
        "name": "useTranslations",
        "import_path": "next-intl"
      },
      {
        "name": "Dialog",
        "import_path": "@mui/material"
      },
      {
        "name": "DialogTitle",
        "import_path": "@mui/material"
      },
      {
        "name": "DialogContent",
        "import_path": "@mui/material"
      },
      {
        "name": "DialogActions",
        "import_path": "@mui/material"
      },
      {
        "name": "Button",
        "import_path": "@mui/material"
      }
    ],
    "output": {
      "type": "object",
      "description": "The component returns a JSX element that represents a Dialog containing title, content, actions, and handles closure through the onClose function."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/confirm",
    "module_name": "6l11eqdm4wf5ijx",
    "method_name": "default",
    "input_params": [],
    "logic": "This module re-exports the default export from the file './ConfirmDialog'. It acts as an alias, allowing other components or modules to import ConfirmDialog from this module without having to specify the direct path.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "The default export from './ConfirmDialog'. This typically represents a React component, which can be used within other components or pages in a Next.js application."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/custom",
    "module_name": "6l11eqdm4wf5ijy",
    "method_name": "getCharAtName",
    "input_params": [
      {
        "type": "string",
        "name": "name",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Returns the first character of the provided name string in uppercase. This function is useful for extracting display initials in avatars.",
    "inner_function_calls": [],
    "output": {
      "type": "string",
      "description": "A single uppercase character representing the first letter of the name, or undefined if the name is not provided."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/custom",
    "module_name": "6l11eqdm4wf5ijy",
    "method_name": "getColorByName",
    "input_params": [
      {
        "type": "string",
        "name": "name",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Determines the color category for the avatar based on the first character of the name. This logic is useful for styling avatars with different colors based on their initials.",
    "inner_function_calls": [
      {
        "name": "getCharAtName",
        "import_path": ""
      }
    ],
    "output": {
      "type": "string",
      "description": "A color category string (e.g., 'primary', 'info', 'success', etc.) based on the first character of the name."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/custom",
    "module_name": "6l11eqdm4wf5ijy",
    "method_name": "CustomAvatar",
    "input_params": [
      {
        "type": "string",
        "name": "color",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "name",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "BadgeProps",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "node",
        "name": "children",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "sx",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "...other",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "A functional component that renders an avatar with optional badge functionality and theme-based styling. It determines the avatar's color based on props or the initial letter of the name, providing a customizable avatar display.",
    "inner_function_calls": [
      {
        "name": "getCharAtName",
        "import_path": ""
      },
      {
        "name": "getColorByName",
        "import_path": ""
      },
      {
        "name": "useTheme",
        "import_path": "@mui/material/styles"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "The rendered avatar component, possibly wrapped in a badge, which is suitable for display in a Next.js application."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/custom",
    "module_name": "6l11eqdm4wf5ijz",
    "method_name": "CustomAvatarGroup",
    "input_params": [
      {
        "type": "string",
        "name": "size",
        "is_required": "",
        "optional_value": "small"
      },
      {
        "type": "boolean",
        "name": "compact",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "number",
        "name": "max",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "node",
        "name": "children",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "sx",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "other",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "ref",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "The CustomAvatarGroup function is a React functional component created using the forwardRef function. This component renders a customized AvatarGroup component from Material-UI, supporting various size options and conditional styling based on the provided props. This component is effectively used in a Next.js application for rendering user avatars in a group format while allowing custom styles and configurations.",
    "inner_function_calls": [
      {
        "name": "AvatarGroup",
        "import_path": "@mui/material"
      }
    ],
    "output": {
      "type": "object",
      "description": "The function returns a customized AvatarGroup component with avatars of specified sizes and styles based on the props provided."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/custom",
    "module_name": "6l11eqdm4wf5ik1",
    "method_name": "CustomBreadcrumbs",
    "input_params": [
      {
        "type": "array",
        "name": "links",
        "is_required": "/required/",
        "optional_value": ""
      },
      {
        "type": "node",
        "name": "action",
        "is_required": "/optional/",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "heading",
        "is_required": "/optional/",
        "optional_value": ""
      },
      {
        "type": "array",
        "name": "moreLink",
        "is_required": "/optional/",
        "optional_value": ""
      },
      {
        "type": "boolean",
        "name": "activeLast",
        "is_required": "/optional/",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "sx",
        "is_required": "/optional/",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "other",
        "is_required": "/optional/",
        "optional_value": ""
      }
    ],
    "logic": "The CustomBreadcrumbs component is a UI component designed to display breadcrumb navigation alongside an optional heading and action. It leverages Material-UI components and is structured to handle different prop configurations, ensuring responsiveness and flexibility in rendering the UI based on received props.",
    "inner_function_calls": [
      {
        "name": "LinkItem",
        "import_path": "./LinkItem"
      },
      {
        "name": "Separator",
        "import_path": "./Separator"
      },
      {
        "name": "Box",
        "import_path": "@mui/material"
      },
      {
        "name": "Typography",
        "import_path": "@mui/material"
      },
      {
        "name": "Breadcrumbs",
        "import_path": "@mui/material"
      },
      {
        "name": "Link",
        "import_path": "@mui/material"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "The output of the CustomBreadcrumbs function is a React element containing a styled box that encapsulates breadcrumbs navigation, potentially with a heading and additional action links, conforming to Next.js page structure."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/custom",
    "module_name": "6l11eqdm4wf5ik1",
    "method_name": "Separator",
    "input_params": [],
    "logic": "The Separator component renders a small circular element that acts as a visual separator in the breadcrumbs, enhancing the overall UI by defining spaces between breadcrumb items.",
    "inner_function_calls": [
      {
        "name": "Box",
        "import_path": "@mui/material"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "The output of the Separator function is a React element that visually separates breadcrumb items, ensuring better readability and organization of the breadcrumbs."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/custom",
    "module_name": "6l11eqdm4wf5ik2",
    "method_name": "BreadcrumbsLink",
    "input_params": [
      {
        "type": "object",
        "name": "link",
        "is_required": "/true/",
        "optional_value": "undefined"
      },
      {
        "type": "boolean",
        "name": "activeLast",
        "is_required": "/false/",
        "optional_value": "false"
      },
      {
        "type": "boolean",
        "name": "disabled",
        "is_required": "/false/",
        "optional_value": "false"
      }
    ],
    "logic": "The 'BreadcrumbsLink' component is a functional React component designed to render a navigational link with optional icon support. It conditionally applies styles based on the 'activeLast' and 'disabled' props to indicate if the link is interactive or not, in line with Material-UI conventions.",
    "inner_function_calls": [
      {
        "name": "Box",
        "import_path": "@mui/material"
      },
      {
        "name": "Link",
        "import_path": "@mui/material"
      },
      {
        "name": "NextLink",
        "import_path": "next/link"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "The output is a JSX element representing a styled link or box. If 'href' is provided, a link is rendered; otherwise, a box is displayed. This aligns with Next.js component structures for navigation."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/custom",
    "module_name": "6l11eqdm4wf5ik3",
    "method_name": "default",
    "input_params": [],
    "logic": "The module exports a default component from another module named 'CustomBreadcrumbs'. This is a common practice in Next.js to encapsulate and re-export components to streamline imports across the application.",
    "inner_function_calls": [],
    "output": {
      "type": "component",
      "description": "The output is the 'CustomBreadcrumbs' component, which can be utilized in other parts of the Next.js application."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/custom",
    "module_name": "6l11eqdm4wf5ik4",
    "method_name": "CustomSmallSelect",
    "input_params": [
      {
        "type": "object",
        "name": "props",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "The CustomSmallSelect is a styled component that renders a Material-UI TextField optimized for select inputs. It wraps the TextField component, altering its appearance to fit specific styles defined using MUI's styling solution, allowing for a customized select input within a React component.",
    "inner_function_calls": [
      {
        "name": "styled",
        "import_path": "@mui/material/styles"
      },
      {
        "name": "TextField",
        "import_path": "@mui/material"
      }
    ],
    "output": {
      "type": "object",
      "description": "A React component serving as a styled TextField, which functions as a select input with customized styles for use within Next.js applications."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/custom",
    "module_name": "6l11eqdm4wf5ik5",
    "method_name": "CustomTextField",
    "input_params": [
      {
        "type": "string",
        "name": "width",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "A styled component based on MUI's TextField. It customizes the display and transition effects for the input field based on the provided width and theme. The component is designed following Next.js and MUI conventions, allowing for responsive styles and aesthetic adjustments when the input is focused.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled TextField component that can be used in a Next.js application for user input, reflecting custom styles and responsive design."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/custom",
    "module_name": "6l11eqdm4wf5ik6",
    "method_name": "IncrementerButton",
    "input_params": [
      {
        "type": "number",
        "name": "quantity",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "function",
        "name": "onIncrease",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "function",
        "name": "onDecrease",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "boolean",
        "name": "disabledIncrease",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "boolean",
        "name": "disabledDecrease",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "sx",
        "is_required": "",
        "optional_value": "{}"
      },
      {
        "type": "object",
        "name": "...other",
        "is_required": "",
        "optional_value": "{}"
      }
    ],
    "logic": "The IncrementerButton component is a functional React component created using forwardRef from React. It renders a stack of buttons for increasing and decreasing a quantity in a UI, and it incorporates MUI's components for styling and functionality. This component is structured to be reused in a variety of contexts, making it flexible for quantity adjustments in forms or shopping applications.",
    "inner_function_calls": [
      {
        "name": "Stack",
        "import_path": "@mui/material"
      },
      {
        "name": "IconButton",
        "import_path": "@mui/material"
      },
      {
        "name": "Iconify",
        "import_path": "../iconify"
      }
    ],
    "output": {
      "type": "JSX",
      "description": "The output is a React component which returns a stack containing two IconButtons (for increasing and decreasing the quantity) and the quantity itself, styled according to MUI standards. This is suitable for integration within pages or other components in a Next.js application."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/file/portal",
    "module_name": "FileNewFolderDialog.js",
    "method_name": "FileNewFolderDialog",
    "input_params": [
      {
        "type": "boolean",
        "name": "open",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "function",
        "name": "onClose",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "title",
        "is_required": "",
        "optional_value": "Upload Images"
      },
      {
        "type": "function",
        "name": "onCreate",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "function",
        "name": "onUpdate",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "folderName",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "function",
        "name": "onChangeFolderName",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "array",
        "name": "progress",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "actionData",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "The FileNewFolderDialog component is a modal dialog used for uploading images and managing folders. It leverages React hooks (useState, useEffect, useCallback) and Material-UI components to create a user interface for users to input folder names, upload images, and see upload progress. The component handles file state management and integrates translation features using next-intl.",
    "inner_function_calls": [
      {
        "name": "useEffect",
        "import_path": "react"
      },
      {
        "name": "useCallback",
        "import_path": "react"
      },
      {
        "name": "debounce",
        "import_path": "lodash/debounce"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "The component returns a dialog element from Material-UI that can display a title, an input for folder naming, an upload component, and action buttons to trigger upload creation or updates. It follows standard practices for modal handling in Next.js."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/file/portal",
    "module_name": "FileNewFolderDialog.js",
    "method_name": "handleDrop",
    "input_params": [
      {
        "type": "array",
        "name": "acceptedFiles",
        "is_required": "true",
        "optional_value": ""
      }
    ],
    "logic": "This function handles the event when files are dropped into the upload area. It maps each accepted file to create a preview URL using Object.assign and URL.createObjectURL. It then updates the main state of files in the component.",
    "inner_function_calls": [
      {
        "name": "URL.createObjectURL",
        "import_path": ""
      }
    ],
    "output": {
      "type": "void",
      "description": "The function modifies the local state of the component by adding new files to the state."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/file/portal",
    "module_name": "FileNewFolderDialog.js",
    "method_name": "handleRemoveFile",
    "input_params": [
      {
        "type": "object",
        "name": "inputFile",
        "is_required": "true",
        "optional_value": ""
      }
    ],
    "logic": "This function filters out a specific file from the current state of files when a user requests to remove it. It updates the main file state accordingly.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "This function modifies the local files state by removing the selected file."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/file/portal",
    "module_name": "FileNewFolderDialog.js",
    "method_name": "handleRemoveAllFiles",
    "input_params": [],
    "logic": "Removes all files from the current state in the component. It's typically called to clear the upload area.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "This function clears the files state, removing all currently stored files."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/file/portal",
    "module_name": "FileShareDialog.js",
    "method_name": "FileShareDialog",
    "input_params": [
      {
        "type": "boolean",
        "name": "open",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "function",
        "name": "onClose",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "array",
        "name": "shared",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "function",
        "name": "onCopyLink",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "inviteEmail",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "function",
        "name": "onChangeInvite",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "other",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "The FileShareDialog component is a modal dialog that presents users with a list of individuals (shared) and their details. It uses Material-UI components for formatting and layout, providing a scrollable list of invited members. It includes functionality for closing the dialog and invites users to copy links, change invitations, etc.",
    "inner_function_calls": [
      {
        "name": "useTranslations",
        "import_path": "next-intl"
      },
      {
        "name": "FileInvitedItem",
        "import_path": ""
      },
      {
        "name": "Dialog",
        "import_path": "@mui/material"
      },
      {
        "name": "DialogTitle",
        "import_path": "@mui/material"
      },
      {
        "name": "DialogContent",
        "import_path": "@mui/material"
      },
      {
        "name": "Scrollbar",
        "import_path": "../../scrollbar"
      },
      {
        "name": "List",
        "import_path": "@mui/material"
      },
      {
        "name": "DialogActions",
        "import_path": "@mui/material"
      },
      {
        "name": "Button",
        "import_path": "@mui/material"
      }
    ],
    "output": {
      "type": "JSX",
      "description": "The output represents a dialog component which contains a title, a scrollable list of invited users, and action buttons, aligning with the Next.js conventions of component-based architecture."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/file/portal",
    "module_name": "FileShareDialog.js",
    "method_name": "FileInvitedItem",
    "input_params": [
      {
        "type": "object",
        "name": "user",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "The FileInvitedItem component renders an individual userâ€™s information within the list of shared files, displaying the user's profile image, name, email with a tooltip, total images shared, and user role. It provides a visual representation of invited users in a readable format adhering to Material-UI design principles.",
    "inner_function_calls": [
      {
        "name": "Avatar",
        "import_path": "@mui/material"
      },
      {
        "name": "ListItem",
        "import_path": "@mui/material"
      },
      {
        "name": "ListItemAvatar",
        "import_path": "@mui/material"
      },
      {
        "name": "ListItemText",
        "import_path": "@mui/material"
      },
      {
        "name": "Tooltip",
        "import_path": "@mui/material"
      },
      {
        "name": "Button",
        "import_path": "@mui/material"
      }
    ],
    "output": {
      "type": "JSX",
      "description": "The output of FileInvitedItem is a JSX structure that encapsulates user-related information making it suitable for display in a list format."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/file",
    "module_name": "6l11eqdm4wf5ika",
    "method_name": "DownloadButton",
    "input_params": [
      {
        "type": "function",
        "name": "onDownload",
        "is_required": "false",
        "optional_value": "null"
      }
    ],
    "logic": "This component represents a button that triggers a download action when clicked. It uses Material-UI's IconButton and applies custom styling for hover effects and theming, following typical React component conventions in Next.js.",
    "inner_function_calls": [
      {
        "name": "useTheme",
        "import_path": "@mui/material/styles"
      },
      {
        "name": "IconButton",
        "import_path": "@mui/material"
      },
      {
        "name": "bgBlur",
        "import_path": "@src/utils/cssStyles"
      },
      {
        "name": "Iconify",
        "import_path": "../iconify"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "The component returns a stylized IconButton containing an icon, which visually represents a download action."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/file",
    "module_name": "6l11eqdm4wf5ikb",
    "method_name": "FileThumbnail",
    "input_params": [
      {
        "type": "object",
        "name": "file",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "boolean",
        "name": "tooltip",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "boolean",
        "name": "imageView",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "function",
        "name": "onDownload",
        "is_required": "false",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "sx",
        "is_required": "false",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "imgSx",
        "is_required": "false",
        "optional_value": "null"
      }
    ],
    "logic": "The FileThumbnail component is responsible for displaying a thumbnail preview of a file. It determines if the file is an image and whether to display it accordingly. The component also optionally wraps the thumbnail in a tooltip and includes a download button if the download functionality is provided. This aligns with common use cases within the Next.js framework where file handling and user interaction are required.",
    "inner_function_calls": [
      {
        "name": "fileData",
        "import_path": "./utils"
      },
      {
        "name": "fileFormat",
        "import_path": "./utils"
      },
      {
        "name": "fileThumb",
        "import_path": "./utils"
      },
      {
        "name": "DownloadButton",
        "import_path": "./DownloadButton"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "The output is a rendered component that displays either an image or a thumbnail, optionally wrapped in a tooltip, and includes a download button if applicable. This structure is typical for presentation components in Next.js."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/file",
    "module_name": "6l11eqdm4wf5ikd",
    "method_name": "fileFormat",
    "input_params": [
      {
        "type": "string",
        "name": "fileUrl",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Determines the format of a file based on its URL by checking against predefined formats and utilizing the fileTypeByUrl helper function.",
    "inner_function_calls": [
      {
        "name": "fileTypeByUrl",
        "import_path": ""
      }
    ],
    "output": {
      "type": "string",
      "description": "Returns a string representing the file format (e.g., 'txt', 'pdf', etc.)."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/file",
    "module_name": "6l11eqdm4wf5ikd",
    "method_name": "fileThumb",
    "input_params": [
      {
        "type": "string",
        "name": "fileUrl",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Generates the thumbnail URL for a file based on its file format, using the iconUrl helper function to construct the thumbnail path.",
    "inner_function_calls": [
      {
        "name": "fileFormat",
        "import_path": ""
      },
      {
        "name": "iconUrl",
        "import_path": ""
      }
    ],
    "output": {
      "type": "string",
      "description": "Returns a string URL for the corresponding thumbnail icon."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/file",
    "module_name": "6l11eqdm4wf5ikd",
    "method_name": "fileTypeByUrl",
    "input_params": [
      {
        "type": "string",
        "name": "fileUrl",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Extracts the file type from the file URL by splitting the string at the last period and taking the last segment as the file extension.",
    "inner_function_calls": [],
    "output": {
      "type": "string",
      "description": "Returns a string representing the file extension."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/file",
    "module_name": "6l11eqdm4wf5ikd",
    "method_name": "fileNameByUrl",
    "input_params": [
      {
        "type": "string",
        "name": "fileUrl",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Extracts the file name from the URL by splitting the URL at each forward slash and returning the last segment.",
    "inner_function_calls": [],
    "output": {
      "type": "string",
      "description": "Returns a string representing the file name."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/file",
    "module_name": "6l11eqdm4wf5ikd",
    "method_name": "fileData",
    "input_params": [
      {
        "type": "object|string",
        "name": "file",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Returns an object containing metadata about the file depending on whether the input is a string (URL) or a file object. It provides either a generated object or mapped properties based on the input type.",
    "inner_function_calls": [
      {
        "name": "fileNameByUrl",
        "import_path": ""
      },
      {
        "name": "fileTypeByUrl",
        "import_path": ""
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns an object with metadata about the file including keys like 'key', 'preview', 'name', 'type', etc."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/hook",
    "module_name": "6l11eqdm4wf5ike",
    "method_name": "FormProvider",
    "input_params": [
      {
        "type": "node",
        "name": "children",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "methods",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "func",
        "name": "onSubmit",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "The FormProvider component acts as a wrapper for a form element, utilizing React Hook Form's FormProvider to manage form state and validation. It takes children components and a submit handler, allowing for organized form management in a Next.js application.",
    "inner_function_calls": [
      {
        "name": "Form",
        "import_path": "react-hook-form"
      },
      {
        "name": "onSubmit",
        "import_path": "not applicable"
      }
    ],
    "output": {
      "type": "node",
      "description": "Returns a JSX node representing a form that encapsulates the provided children and binds them to the React Hook Form context."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/hook",
    "module_name": "6l11eqdm4wf5ikf",
    "method_name": "RHFAutocomplete",
    "input_params": [
      {
        "type": "string",
        "name": "name",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "label",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "node",
        "name": "helperText",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "...other",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "The RHFAutocomplete function is a React component designed for use within a React Hook Form context, specifically integrating Material-UI components. Its primary role is to render an autocomplete input that interacts with the form state managed by react-hook-form, allowing for streamlined validation and state handling in forms.",
    "inner_function_calls": [
      {
        "name": "useFormContext",
        "import_path": "react-hook-form"
      },
      {
        "name": "Controller",
        "import_path": "react-hook-form"
      },
      {
        "name": "Autocomplete",
        "import_path": "@mui/material"
      },
      {
        "name": "TextField",
        "import_path": "@mui/material"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "The function returns a JSX element that integrates the Autocomplete component from Material-UI, wrapped within the Controller component from react-hook-form, effectively allowing form management for the autocomplete input."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/hook",
    "module_name": "6l11eqdm4wf5ikg",
    "method_name": "RHFCheckbox",
    "input_params": [
      {
        "type": "string",
        "name": "name",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "node",
        "name": "helperText",
        "is_required": "false",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "...other",
        "is_required": "false",
        "optional_value": "null"
      }
    ],
    "logic": "This function is a React component that integrates a MUI Checkbox with react-hook-form for form handling. It uses the Controller component from react-hook-form to bind the checkbox state with the form context. It also handles the display of error messages or helper text.",
    "inner_function_calls": [
      {
        "name": "useFormContext",
        "import_path": "react-hook-form"
      },
      {
        "name": "Controller",
        "import_path": "react-hook-form"
      },
      {
        "name": "FormControlLabel",
        "import_path": "@mui/material"
      },
      {
        "name": "Checkbox",
        "import_path": "@mui/material"
      },
      {
        "name": "FormHelperText",
        "import_path": "@mui/material"
      }
    ],
    "output": {
      "type": "JSX",
      "description": "A rendered JSX component that includes a checkbox with optional helper text and error display, making it suitable for integration with forms."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/hook",
    "module_name": "6l11eqdm4wf5ikg",
    "method_name": "RHFMultiCheckbox",
    "input_params": [
      {
        "type": "boolean",
        "name": "row",
        "is_required": "false",
        "optional_value": "false"
      },
      {
        "type": "string",
        "name": "name",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "label",
        "is_required": "false",
        "optional_value": "null"
      },
      {
        "type": "array",
        "name": "options",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "number",
        "name": "spacing",
        "is_required": "false",
        "optional_value": "0"
      },
      {
        "type": "node",
        "name": "helperText",
        "is_required": "false",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "...other",
        "is_required": "false",
        "optional_value": "null"
      }
    ],
    "logic": "This function is a React component designed to handle multiple checkboxes in a group using react-hook-form. It utilizes the Controller component to manage form state, alongside MUI components to render the checkboxes and handle errors. It supports a flexible layout depending on the row prop and dynamically adjusts spacing between checkboxes.",
    "inner_function_calls": [
      {
        "name": "useFormContext",
        "import_path": "react-hook-form"
      },
      {
        "name": "Controller",
        "import_path": "react-hook-form"
      },
      {
        "name": "FormControl",
        "import_path": "@mui/material"
      },
      {
        "name": "FormLabel",
        "import_path": "@mui/material"
      },
      {
        "name": "FormGroup",
        "import_path": "@mui/material"
      },
      {
        "name": "FormControlLabel",
        "import_path": "@mui/material"
      },
      {
        "name": "Checkbox",
        "import_path": "@mui/material"
      },
      {
        "name": "FormHelperText",
        "import_path": "@mui/material"
      }
    ],
    "output": {
      "type": "JSX",
      "description": "A rendered JSX component that displays a group of checkboxes with appropriate labels, handles selection logic, and shows error messages or helper text."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/hook",
    "module_name": "6l11eqdm4wf5ikh",
    "method_name": "RHFRadioGroup",
    "input_params": [
      {
        "type": "boolean",
        "name": "row",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "name",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "label",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "array",
        "name": "options",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "number",
        "name": "spacing",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "node",
        "name": "helperText",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "other",
        "is_required": "",
        "optional_value": "{}"
      }
    ],
    "logic": "The RHFRadioGroup component is a custom radio group input that integrates with react-hook-form. It allows the management of radio button selections in a form context. The component renders a group of radio buttons based on the options provided, handles form validation errors, and offers visual feedback based on the form state.",
    "inner_function_calls": [
      {
        "name": "Controller",
        "import_path": "react-hook-form"
      },
      {
        "name": "FormControl",
        "import_path": "@mui/material"
      },
      {
        "name": "FormLabel",
        "import_path": "@mui/material"
      },
      {
        "name": "RadioGroup",
        "import_path": "@mui/material"
      },
      {
        "name": "FormControlLabel",
        "import_path": "@mui/material"
      },
      {
        "name": "FormHelperText",
        "import_path": "@mui/material"
      }
    ],
    "output": {
      "type": "JSX Element",
      "description": "The component returns a section of a form containing a radio button group which can be controlled by react-hook-form, including labels, radio buttons, error states, and any helper texts."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/hook",
    "module_name": "6l11eqdm4wf5iki",
    "method_name": "RHFSelect",
    "input_params": [
      {
        "type": "string",
        "name": "name",
        "is_required": "true",
        "optional_value": "undefined"
      },
      {
        "type": "boolean",
        "name": "native",
        "is_required": "false",
        "optional_value": "undefined"
      },
      {
        "type": "node",
        "name": "children",
        "is_required": "false",
        "optional_value": "undefined"
      },
      {
        "type": "node",
        "name": "helperText",
        "is_required": "false",
        "optional_value": "undefined"
      },
      {
        "type": "number",
        "name": "maxHeight",
        "is_required": "false",
        "optional_value": "220"
      }
    ],
    "logic": "This function represents a custom select component integrated with react-hook-form. It uses the Controller component to manage form state, illustrating the integration of MUI's TextField as a select input within Next.js forms.",
    "inner_function_calls": [
      {
        "name": "useFormContext",
        "import_path": "react-hook-form"
      },
      {
        "name": "Controller",
        "import_path": "react-hook-form"
      },
      {
        "name": "TextField",
        "import_path": "@mui/material"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "Returns a controlled TextField configured as a select input, which serves as part of a form component in Next.js."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/hook",
    "module_name": "6l11eqdm4wf5iki",
    "method_name": "RHFMultiSelect",
    "input_params": [
      {
        "type": "string",
        "name": "name",
        "is_required": "true",
        "optional_value": "undefined"
      },
      {
        "type": "boolean",
        "name": "chip",
        "is_required": "false",
        "optional_value": "undefined"
      },
      {
        "type": "string",
        "name": "label",
        "is_required": "false",
        "optional_value": "undefined"
      },
      {
        "type": "array",
        "name": "options",
        "is_required": "true",
        "optional_value": "undefined"
      },
      {
        "type": "boolean",
        "name": "checkbox",
        "is_required": "false",
        "optional_value": "undefined"
      },
      {
        "type": "string",
        "name": "placeholder",
        "is_required": "false",
        "optional_value": "undefined"
      },
      {
        "type": "node",
        "name": "helperText",
        "is_required": "false",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "sx",
        "is_required": "false",
        "optional_value": "undefined"
      }
    ],
    "logic": "This function creates a multi-select component that integrates with react-hook-form, allowing for multiple selections with optional checkboxes and chips. It handles rendering selected values and integrates visual styling with Material-UI components, adhering to Next.js's component-driven architecture.",
    "inner_function_calls": [
      {
        "name": "useFormContext",
        "import_path": "react-hook-form"
      },
      {
        "name": "Controller",
        "import_path": "react-hook-form"
      },
      {
        "name": "FormControl",
        "import_path": "@mui/material"
      },
      {
        "name": "InputLabel",
        "import_path": "@mui/material"
      },
      {
        "name": "Select",
        "import_path": "@mui/material"
      },
      {
        "name": "OutlinedInput",
        "import_path": "@mui/material"
      },
      {
        "name": "MenuItem",
        "import_path": "@mui/material"
      },
      {
        "name": "Chip",
        "import_path": "@mui/material"
      },
      {
        "name": "Checkbox",
        "import_path": "@mui/material"
      },
      {
        "name": "FormHelperText",
        "import_path": "@mui/material"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "Returns a custom multi-select input component, rendered with Material-UI elements, suitable for use within forms in a Next.js application."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/hook",
    "module_name": "6l11eqdm4wf5ikj",
    "method_name": "RHFSlider",
    "input_params": [
      {
        "type": "string",
        "name": "name",
        "is_required": "/PropTypes.string.isRequired/",
        "optional_value": ""
      },
      {
        "type": "node",
        "name": "helperText",
        "is_required": "/PropTypes.node/",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "other",
        "is_required": "/The rest of the props/",
        "optional_value": ""
      }
    ],
    "logic": "This function defines a custom slider component that integrates with React Hook Form. It utilizes the Controller from react-hook-form to connect the sliders' state with the form context, allowing easy validation and state management of form fields within a Next.js application.",
    "inner_function_calls": [
      {
        "name": "useFormContext",
        "import_path": "react-hook-form"
      },
      {
        "name": "Controller",
        "import_path": "react-hook-form"
      },
      {
        "name": "Slider",
        "import_path": "@mui/material"
      },
      {
        "name": "FormHelperText",
        "import_path": "@mui/material"
      }
    ],
    "output": {
      "type": "JSX",
      "description": "This function returns a piece of JSX that includes a Slider component and a FormHelperText for displaying error messages or helper text. It acts as a within-form component for user input in Next.js."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/hook",
    "module_name": "6l11eqdm4wf5ikk",
    "method_name": "RHFSwitch",
    "input_params": [
      {
        "type": "string",
        "name": "name",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "node",
        "name": "helperText",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "other",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "The RHFSwitch component uses React Hook Form to manage the state of a switch input. It renders a MUI Switch wrapped with a Controller to ensure that the switch's state is synchronized with the form state. It also handles helper text based on validation errors.",
    "inner_function_calls": [
      {
        "name": "useFormContext",
        "import_path": "react-hook-form"
      },
      {
        "name": "Controller",
        "import_path": "react-hook-form"
      },
      {
        "name": "FormControlLabel",
        "import_path": "@mui/material"
      },
      {
        "name": "Switch",
        "import_path": "@mui/material"
      },
      {
        "name": "FormHelperText",
        "import_path": "@mui/material"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "The output is a React component that returns the UI for a switch input along with an optional helper text, making it suitable for use in forms managed by React Hook Form."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/hook",
    "module_name": "6l11eqdm4wf5ikl",
    "method_name": "RHFTextField",
    "input_params": [
      {
        "type": "string",
        "name": "name",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "node",
        "name": "helperText",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "...other",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function serves as a wrapper around MUI's TextField component for integration with React Hook Form, allowing for easy form validation and data management.",
    "inner_function_calls": [
      {
        "name": "useFormContext",
        "import_path": "react-hook-form"
      },
      {
        "name": "Controller",
        "import_path": "react-hook-form"
      },
      {
        "name": "TextField",
        "import_path": "@mui/material"
      }
    ],
    "output": {
      "type": "React.Component",
      "description": "The output is a component that renders a controlled TextField connected to React Hook Form, offering validation feedback through error messages."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/hook",
    "module_name": "6l11eqdm4wf5ikm",
    "method_name": "RHFUploadAvatar",
    "input_params": [
      {
        "type": "string",
        "name": "name",
        "is_required": "true",
        "optional_value": ""
      },
      {
        "type": "function",
        "name": "action",
        "is_required": "false",
        "optional_value": "undefined"
      }
    ],
    "logic": "This component integrates the `UploadAvatar` component with React Hook Form's context. It uses the `Controller` from react-hook-form to link the avatar upload functionality with the form state. It conditionally displays an error message from the form state if there's an error.",
    "inner_function_calls": [
      {
        "name": "useFormContext",
        "import_path": "react-hook-form"
      },
      {
        "name": "Controller",
        "import_path": "react-hook-form"
      },
      {
        "name": "UploadAvatar",
        "import_path": "../upload"
      },
      {
        "name": "FormHelperText",
        "import_path": "@mui/material"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "Renders a controlled avatar upload component integrated with React Hook Form, allowing for avatar file uploads and validation feedback."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/hook",
    "module_name": "6l11eqdm4wf5ikm",
    "method_name": "RHFUploadBox",
    "input_params": [
      {
        "type": "string",
        "name": "name",
        "is_required": "true",
        "optional_value": ""
      }
    ],
    "logic": "Renders the `UploadBox` component using the `Controller` from react-hook-form. It connects the files state with the form state, ensuring proper form validation through error handling.",
    "inner_function_calls": [
      {
        "name": "useFormContext",
        "import_path": "react-hook-form"
      },
      {
        "name": "Controller",
        "import_path": "react-hook-form"
      },
      {
        "name": "UploadBox",
        "import_path": "../upload"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "Provides a file upload box component linked with the form's state and handles error display."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/hook",
    "module_name": "6l11eqdm4wf5ikm",
    "method_name": "RHFUpload",
    "input_params": [
      {
        "type": "string",
        "name": "name",
        "is_required": "true",
        "optional_value": ""
      },
      {
        "type": "boolean",
        "name": "multiple",
        "is_required": "false",
        "optional_value": "false"
      },
      {
        "type": "node",
        "name": "helperText",
        "is_required": "false",
        "optional_value": "null"
      }
    ],
    "logic": "This component handles both single and multiple file uploads through the `Upload` component using the `Controller` from react-hook-form. It displays appropriate helper text or error messages based on the form state validation.",
    "inner_function_calls": [
      {
        "name": "useFormContext",
        "import_path": "react-hook-form"
      },
      {
        "name": "Controller",
        "import_path": "react-hook-form"
      },
      {
        "name": "Upload",
        "import_path": "../upload"
      },
      {
        "name": "FormHelperText",
        "import_path": "@mui/material"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "Produces a file upload interface that processes both single and multiple file inputs while managing error notifications and helper text."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/hook",
    "module_name": "6l11eqdm4wf5ikn",
    "method_name": "RHFUpload",
    "input_params": [],
    "logic": "Exports all named exports from the RHFUpload module, effectively re-exporting its functionalities for use in other parts of the application.",
    "inner_function_calls": [],
    "output": {
      "type": "undefined",
      "description": "No direct return value; it facilitates access to exported components or functions from RHFUpload."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/hook",
    "module_name": "6l11eqdm4wf5ikn",
    "method_name": "RHFSelect",
    "input_params": [],
    "logic": "Re-exports all named exports from the RHFSelect module, allowing other parts of the application to utilize the functionalities defined in RHFSelect.",
    "inner_function_calls": [],
    "output": {
      "type": "undefined",
      "description": "No direct return value; it allows other modules to import functionalities from RHFSelect."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/hook",
    "module_name": "6l11eqdm4wf5ikn",
    "method_name": "RHFCheckbox",
    "input_params": [],
    "logic": "Exports all named exports from the RHFCheckbox module, centralizing the access to RHFCheckbox functionalities for easier imports elsewhere.",
    "inner_function_calls": [],
    "output": {
      "type": "undefined",
      "description": "No direct return value; it makes functionalities from RHFCheckbox available for use in other parts of the app."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/hook",
    "module_name": "6l11eqdm4wf5ikn",
    "method_name": "default",
    "input_params": [],
    "logic": "Exports a default export from the FormProvider module. This approach is common in Next.js modules for providing a single entry point for components.",
    "inner_function_calls": [],
    "output": {
      "type": "undefined",
      "description": "No direct return value; typically represents the main component or utility exported from FormProvider."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/hook",
    "module_name": "6l11eqdm4wf5ikn",
    "method_name": "RHFSwitch",
    "input_params": [],
    "logic": "Re-exports the default export from the RHFSwitch module, allowing other components to utilize the RHFSwitch functionality without needing to directly import from its module.",
    "inner_function_calls": [],
    "output": {
      "type": "undefined",
      "description": "No direct return value; it makes the RHFSwitch component available for use in other modules."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/hook",
    "module_name": "6l11eqdm4wf5ikn",
    "method_name": "RHFSlider",
    "input_params": [],
    "logic": "Re-exports the default export from the RHFSlider module, providing an easy way to access the RHFSlider component from this module.",
    "inner_function_calls": [],
    "output": {
      "type": "undefined",
      "description": "No direct return value; it helps in accessing the RHFSlider functionalities in other parts."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/hook",
    "module_name": "6l11eqdm4wf5ikn",
    "method_name": "RHFTextField",
    "input_params": [],
    "logic": "Re-exports the default export from the RHFTextField module, facilitating the use of text input fields in a standardized manner across the application.",
    "inner_function_calls": [],
    "output": {
      "type": "undefined",
      "description": "No direct return value; it centralizes the access to the functionalities of RHFTextField."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/hook",
    "module_name": "6l11eqdm4wf5ikn",
    "method_name": "RHFRadioGroup",
    "input_params": [],
    "logic": "Re-exports the default export from RHFRadioGroup, simplifying the import process for using radio group components throughout the app.",
    "inner_function_calls": [],
    "output": {
      "type": "undefined",
      "description": "No direct return value; it makes the RHFRadioGroup component available for imports."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/hook",
    "module_name": "6l11eqdm4wf5ikn",
    "method_name": "RHFAutocomplete",
    "input_params": [],
    "logic": "Re-exports the default export from the RHFAutocomplete module, aiding developers in quickly accessing this component when needed.",
    "inner_function_calls": [],
    "output": {
      "type": "undefined",
      "description": "No direct return value; it allows other files to use RHFAutocomplete without directly importing it from its specific module."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/iconify",
    "module_name": "Iconify.js",
    "method_name": "Iconify",
    "input_params": [
      {
        "type": "object",
        "name": "props",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "number|string",
        "name": "width",
        "is_required": "",
        "optional_value": "20"
      },
      {
        "type": "object",
        "name": "sx",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "other",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "ref",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This is a functional component leveraging React's forwardRef to forward refs to the underlying Box component while allowing the usage of an icon with customizable width and styles. It serves as a reusable icon wrapper in a Next.js application, adhering to the conventions of component logic in React.",
    "inner_function_calls": [
      {
        "name": "Box",
        "import_path": "@mui/material"
      },
      {
        "name": "Icon",
        "import_path": "@iconify/react"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "The rendered JSX for the Iconify component, which is a Box component wrapping the Icon with specific props based on user input."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/image",
    "module_name": "Image.js",
    "method_name": "Image",
    "input_params": [
      {
        "type": "object",
        "name": "props",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "ratio",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "boolean",
        "name": "disabledEffect",
        "is_required": "",
        "optional_value": "false"
      },
      {
        "type": "string",
        "name": "effect",
        "is_required": "",
        "optional_value": "blur"
      },
      {
        "type": "object",
        "name": "sx",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "...",
        "name": "other",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function is a React component created using 'forwardRef' which allows it to accept a ref from its parent component. It's designed to render a responsive image with optional aspect ratio control, styles, and effects, using the Next.js Image component for optimization. The component handles a 'ratio' prop to calculate padding based on aspect ratio and applies styles for different display scenarios.",
    "inner_function_calls": [
      {
        "name": "getRatio",
        "import_path": "./getRatio"
      }
    ],
    "output": {
      "type": "object",
      "description": "The component returns a JSX element that represents an image with the specified properties and styles, integrating correctly within Next.js's image optimization capabilities."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/image",
    "module_name": "getRatio.js",
    "method_name": "getRatio",
    "input_params": [
      {
        "type": "string",
        "name": "ratio",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "The function 'getRatio' calculates a CSS width based on a given aspect ratio. It returns a corresponding CSS calculation for predefined aspect ratios or defaults to '100%' for the ratio '1/1'. Therefore, it supports responsive design within Next.js, where styling is important for components.",
    "inner_function_calls": [],
    "output": {
      "type": "string",
      "description": "The function returns a CSS width calculation string based on the provided aspect ratio, which is useful for styling elements responsively in Next.js applications."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/label",
    "module_name": "Label.js",
    "method_name": "Label",
    "input_params": [
      {
        "type": "node",
        "name": "children",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "color",
        "is_required": "",
        "optional_value": "'default'"
      },
      {
        "type": "string",
        "name": "variant",
        "is_required": "",
        "optional_value": "'soft'"
      },
      {
        "type": "node",
        "name": "startIcon",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "node",
        "name": "endIcon",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "sx",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "other",
        "is_required": "",
        "optional_value": "{}"
      }
    ],
    "logic": "The Label component, defined using forwardRef to allow parent components to reference the DOM element directly. It uses MUI's styling and theming. It renders a styled label with optional icons and children content. This is commonly used in forms or UI elements where labelling is needed, following React conventions for component props.",
    "inner_function_calls": [
      {
        "name": "useTheme",
        "import_path": "@mui/material/styles"
      },
      {
        "name": "StyledLabel",
        "import_path": "./styles"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "Returns a styled label component that can include optional icons and styled children, suitable for use with MUI themes."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/label",
    "module_name": "styles.js",
    "method_name": "StyledLabel",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "ownerState",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "StyledLabel is a styled component created using MUI's styled utility. It customizes the Box component based on the theme and ownerState to provide different styles based on color and variant properties, with logic to handle filled, outlined, and soft variants specifically.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An object containing styles that will be applied to the StyledLabel component, representing a styled version of the Box component from Material UI."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/lightbox",
    "module_name": "Lightbox.js",
    "method_name": "Lightbox",
    "input_params": [
      {
        "type": "array",
        "name": "slides",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "boolean",
        "name": "disabledZoom",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "boolean",
        "name": "disabledVideo",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "boolean",
        "name": "disabledTotal",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "boolean",
        "name": "disabledCaptions",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "boolean",
        "name": "disabledSlideshow",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "boolean",
        "name": "disabledThumbnails",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "boolean",
        "name": "disabledFullscreen",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "function",
        "name": "onGetCurrentIndex",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "function",
        "name": "handleOpenConfirm",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "boolean",
        "name": "isDelete",
        "is_required": "",
        "optional_value": "false"
      },
      {
        "type": "boolean",
        "name": "owner",
        "is_required": "",
        "optional_value": "false"
      },
      {
        "type": "boolean",
        "name": "isDownload",
        "is_required": "",
        "optional_value": "false"
      },
      {
        "type": "function",
        "name": "handleDownloadImage",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "The Lightbox function component is a custom component that uses the Yet Another React Lightbox library to display image slides in a lightbox format. It configures the lightbox features based on provided props and manages state for the currently visible index of the slide. The component utilizes various props to conditionally render buttons and features, thus aligning with Next.js conventions for reusable UI components.",
    "inner_function_calls": [
      {
        "name": "getPlugins",
        "import_path": ""
      },
      {
        "name": "setCurrentIndex",
        "import_path": ""
      },
      {
        "name": "handleDownloadImage",
        "import_path": ""
      },
      {
        "name": "handleOpenConfirm",
        "import_path": ""
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "The Lightbox component returns a JSX representation of the lightbox interface, including the configured slides and toolbars."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/lightbox",
    "module_name": "Lightbox.js",
    "method_name": "getPlugins",
    "input_params": [
      {
        "type": "boolean",
        "name": "disabledZoom",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "boolean",
        "name": "disabledVideo",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "boolean",
        "name": "disabledCaptions",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "boolean",
        "name": "disabledSlideshow",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "boolean",
        "name": "disabledThumbnails",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "boolean",
        "name": "disabledFullscreen",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "The getPlugins function generates an array of active plugins for the React lightbox based on the props received. It filters out any disabled plugins, ensuring that only the necessary plugins are included in the lightbox configuration. This function helps manage plugin functionality effectively based on the user's needs.",
    "inner_function_calls": [],
    "output": {
      "type": "array",
      "description": "An array of plugins that are enabled for the React Lightbox component."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/lightbox",
    "module_name": "Lightbox.js",
    "method_name": "DisplayTotal",
    "input_params": [
      {
        "type": "number",
        "name": "totalItems",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "boolean",
        "name": "disabledTotal",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "boolean",
        "name": "disabledCaptions",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "The DisplayTotal function component is responsible for showing the current slide index relative to the total number of slides. It accesses the lightbox state to retrieve the current index and conditionally renders the total count if the appropriate props are given. This component enhances user experience within the lightbox by providing contextual information about slide navigation.",
    "inner_function_calls": [
      {
        "name": "useLightboxState",
        "import_path": "yet-another-react-lightbox/core"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "The DisplayTotal component returns a JSX representation of the current slide index and total items in the lightbox."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/lightbox",
    "module_name": "styles.js",
    "method_name": "StyledLightbox",
    "input_params": [
      {
        "type": "function",
        "name": "props",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Renders a set of global styles applied to the lightbox component using Material-UI's GlobalStyles function. It customizes styles based on the current theme obtained from useTheme, adhering to enhancements provided by Material-UI theming conventions.",
    "inner_function_calls": [
      {
        "name": "useTheme",
        "import_path": "@mui/material/styles"
      },
      {
        "name": "GlobalStyles",
        "import_path": "@mui/material"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "The component returns a GlobalStyles element that applies various CSS styles globally within the lightbox component context."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/logo",
    "module_name": "Logo.js",
    "method_name": "Logo",
    "input_params": [
      {
        "type": "boolean",
        "name": "disabledLink",
        "is_required": "false",
        "optional_value": "false"
      },
      {
        "type": "object",
        "name": "sx",
        "is_required": "false",
        "optional_value": "undefined"
      },
      {
        "type": "boolean",
        "name": "mini",
        "is_required": "false",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "other",
        "is_required": "false",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "ref",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "The Logo component renders a logo image and optional title based on whether it's disabled or mini. It uses Material-UI components for styling and can act as a link to the home page if not disabled. The component is designed with React's forwardRef for better ref management.",
    "inner_function_calls": [
      {
        "name": "useTheme",
        "import_path": "@mui/material/styles"
      },
      {
        "name": "Link",
        "import_path": "@mui/material"
      },
      {
        "name": "Typography",
        "import_path": "@mui/material"
      }
    ],
    "output": {
      "type": "JSX Element",
      "description": "The Logo component returns either a logo image wrapped in a Link (navigating to home) or just the logo if the link is disabled."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/logo",
    "module_name": "index.js",
    "method_name": "default",
    "input_params": [],
    "logic": "This is an ES module export statement that re-exports the default export from another module located at './Logo'. This is commonly used in Next.js to simplify imports and maintain cleaner code by encapsulating components or modules.",
    "inner_function_calls": [],
    "output": {
      "type": "module",
      "description": "The output represents the default export from the './Logo' module, which could be a React component or any other value that is default-exported from that module."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/menu",
    "module_name": "6l11eqdm4wf5il1",
    "method_name": "MenuPopover",
    "input_params": [
      {
        "type": "object",
        "name": "props",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "open",
        "is_required": "true",
        "optional_value": ""
      },
      {
        "type": "node",
        "name": "children",
        "is_required": "true",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "arrow",
        "is_required": "false",
        "optional_value": "top-right"
      },
      {
        "type": "boolean",
        "name": "disabledArrow",
        "is_required": "false",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "sx",
        "is_required": "false",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "other",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "MenuPopover is a functional component used for rendering a popover in a Material-UI application, taking in several props to configure its behavior and appearance. It utilizes the getPosition utility function to obtain styling based on the arrow positioning and passes various props to the Popover component from Material-UI, thus adhering to patterns in Next.js for creating reusable UI components.",
    "inner_function_calls": [
      {
        "name": "getPosition",
        "import_path": "./getPosition"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "The MenuPopover function returns a Popover component with the exact positioning and styling defined by the provided props, rendering customizable content within it."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/menu",
    "module_name": "6l11eqdm4wf5il2",
    "method_name": "getPosition",
    "input_params": [
      {
        "type": "string",
        "name": "arrow",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "The `getPosition` function determines the positioning properties for a UI component based on the provided `arrow` position string. This is useful in Next.js when positioning tooltips or popovers to ensure they're visually aligned relative to an anchor point.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "The output is an object containing positioning properties such as style, anchorOrigin, and transformOrigin, which can be used for aligning UI components like tooltips or modals."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/menu",
    "module_name": "6l11eqdm4wf5il4",
    "method_name": "StyledArrow",
    "input_params": [
      {
        "type": "string",
        "name": "arrow",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "This function is a styled component using Material-UI's styled API to create a customizable arrow indicator. It adjusts its style based on the 'arrow' prop passed to it, allowing for different visual presentations based on the specified arrow position (e.g., top-left, bottom-right). It adheres to responsive design principles with its conditional styles for different screen sizes.",
    "inner_function_calls": [
      {
        "name": "styled",
        "import_path": "@mui/material/styles"
      }
    ],
    "output": {
      "type": "object",
      "description": "A styled React component that generates an arrow element with specific styles based on the 'arrow' prop and theme provided. It returns an object containing CSS properties."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/nav",
    "module_name": "6l11eqdm4wf5il5",
    "method_name": "NavItem",
    "input_params": [
      {
        "type": "object",
        "name": "item",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "number",
        "name": "depth",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "boolean",
        "name": "open",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "boolean",
        "name": "active",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "boolean",
        "name": "isExternalLink",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "other",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "The NavItem component is a forwardRef React component used within a navigation structure, allowing for external links and internal navigation paths. It renders navigation items based on their properties like title, icon, and link, while also handling visual states such as active and disabled. The rendered content adapts based on whether the link is external or internal, consistent with Next.js routing practices.",
    "inner_function_calls": [
      {
        "name": "StyledItem",
        "import_path": "./styles"
      },
      {
        "name": "ListItemText",
        "import_path": "@mui/material"
      },
      {
        "name": "Box",
        "import_path": "@mui/material"
      },
      {
        "name": "Tooltip",
        "import_path": "@mui/material"
      },
      {
        "name": "Iconify",
        "import_path": "../../iconify"
      },
      {
        "name": "Link",
        "import_path": "@mui/material"
      },
      {
        "name": "NextLink",
        "import_path": "next/link"
      }
    ],
    "output": {
      "type": "object",
      "description": "The output of the NavItem function is a rendered React element that represents a navigation item, capable of rendering based on the props passed, such as internal link with Next.js or an external link with proper attributes."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/nav",
    "module_name": "6l11eqdm4wf5il6",
    "method_name": "NavList",
    "input_params": [
      {
        "type": "object",
        "name": "data",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "number",
        "name": "depth",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "boolean",
        "name": "hasChild",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "The NavList component renders a navigation item and potentially a popover if the item has child elements. It manages the state for opening/closing the popover menu and uses hooks to manage effects when the component's state changes or on route changes.",
    "inner_function_calls": [
      {
        "name": "useRouter",
        "import_path": "next/router"
      },
      {
        "name": "useActiveLink",
        "import_path": "@/src/hooks/useActiveLink"
      },
      {
        "name": "handleClose",
        "import_path": "self"
      },
      {
        "name": "handleOpen",
        "import_path": "self"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "Returns a JSX element that represents a navigation item with optional child elements displayed in a popover."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/nav",
    "module_name": "6l11eqdm4wf5il6",
    "method_name": "NavSubList",
    "input_params": [
      {
        "type": "array",
        "name": "data",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "number",
        "name": "depth",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "The NavSubList component recursively creates NavList components for each item in the provided data array, incrementing the depth to reflect the hierarchy of navigation items.",
    "inner_function_calls": [
      {
        "name": "NavList",
        "import_path": "self"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "Returns a JSX element containing a list of navigation items represented by nested NavList components."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/nav",
    "module_name": "6l11eqdm4wf5il7",
    "method_name": "NavSectionHorizontal",
    "input_params": [
      {
        "type": "array",
        "name": "data",
        "is_required": "/true",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "sx",
        "is_required": "/false",
        "optional_value": "{}"
      },
      {
        "type": "object",
        "name": "...other",
        "is_required": "/false",
        "optional_value": "{}"
      }
    ],
    "logic": "This is a functional component that renders a horizontal navigation section in a Next.js application. It uses the Stack component from Material-UI to arrange its child components in a row. The function accepts data for the navigation items, styles through the `sx` prop, and any additional props via `...other`. It also applies custom styling to hide the vertical scrollbar.",
    "inner_function_calls": [
      {
        "name": "Stack",
        "import_path": "@mui/material"
      },
      {
        "name": "Items",
        "import_path": "/path/to/Items/component"
      }
    ],
    "output": {
      "type": "JSX",
      "description": "A rendered Stack component containing horizontal navigation items."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/nav",
    "module_name": "6l11eqdm4wf5il7",
    "method_name": "Items",
    "input_params": [
      {
        "type": "array",
        "name": "items",
        "is_required": "/true",
        "optional_value": "undefined"
      }
    ],
    "logic": "The Items function is a functional component that renders a list of navigation items by mapping over the passed `items` array. It utilizes the NavList component to display individual navigation items, determining the props to pass based on the data structure of each item. This is part of the rendering logic for individual sections within the navigation system.",
    "inner_function_calls": [
      {
        "name": "NavList",
        "import_path": "./NavList"
      }
    ],
    "output": {
      "type": "JSX",
      "description": "A list of NavList components representing the navigation items."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/nav",
    "module_name": "6l11eqdm4wf5il8",
    "method_name": "default",
    "input_params": [],
    "logic": "This module exports the default export from another module located at './NavSectionHorizontal'. In Next.js, this is commonly used for component exports, allowing that component to be imported into other parts of the application.",
    "inner_function_calls": [],
    "output": {
      "type": "string",
      "description": "The output is the default export from the NavSectionHorizontal module, typically a React component that can be used in Next.js pages or other components."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/nav",
    "module_name": "6l11eqdm4wf5il9",
    "method_name": "StyledItem",
    "input_params": [
      {
        "type": "object",
        "name": "props",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Creates a styled ListItemButton component that adapts its appearance based on props such as active, disabled, and open. It utilizes Material-UI's theme to style the button accordingly. This is a common pattern in Next.js when creating dynamic React components based on application state.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled ListItemButton component that can be used as part of navigation."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/nav",
    "module_name": "6l11eqdm4wf5il9",
    "method_name": "StyledIcon",
    "input_params": [
      {
        "type": "object",
        "name": "props",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Creates a styled ListItemIcon component that sets specific margin and size for navigation icons. This simplifies the use of icons within a navigation context, adhering to Material-UI conventions.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled ListItemIcon component for use in navigation."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/nav",
    "module_name": "6l11eqdm4wf5il9",
    "method_name": "StyledPopover",
    "input_params": [
      {
        "type": "object",
        "name": "props",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Creates a styled Popover component that configures its appearance using the theme and applies a background blur effect. This is typical in Next.js applications for providing contextual overlays or menus.",
    "inner_function_calls": [
      {
        "name": "bgBlur",
        "import_path": "@src/utils/cssStyles"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns a styled Popover component that displays overlays with custom styles."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/nav",
    "module_name": "6l11eqdm4wf5ilb",
    "method_name": "NavItem",
    "input_params": [
      {
        "type": "object",
        "name": "item",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "number",
        "name": "depth",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "boolean",
        "name": "open",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "boolean",
        "name": "active",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "boolean",
        "name": "isExternalLink",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "other",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This is a functional component created with React's forwardRef, which renders a navigation item. It uses props to determine its appearance and behavior depending on its state (open, active, etc.) and can handle both internal and external links based on the `isExternalLink` prop. It organizes the display of icons, titles, captions, and child items as necessary, conforming to navigation standards in a Material-UI context and Next.js framework.",
    "inner_function_calls": [
      {
        "name": "StyledItem",
        "import_path": "./styles"
      },
      {
        "name": "ListItemText",
        "import_path": "@mui/material"
      },
      {
        "name": "Tooltip",
        "import_path": "@mui/material"
      },
      {
        "name": "Iconify",
        "import_path": "../../iconify"
      },
      {
        "name": "Link",
        "import_path": "next/link"
      }
    ],
    "output": {
      "type": "JSX",
      "description": "Renders a React component which can be either an internal or external link based on the `isExternalLink` prop, styled as a navigation item."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/nav",
    "module_name": "6l11eqdm4wf5ilb",
    "method_name": "RenderItem",
    "input_params": [],
    "logic": "It conditionally renders either an internal or an external link component: if `isExternalLink` is true, it renders a standard anchor element; otherwise, it utilizes Next.js's Link component for client-side navigation.",
    "inner_function_calls": [],
    "output": {
      "type": "JSX",
      "description": "Renders either an external or internal link wrapping around the `renderContent`, allowing users to navigate accordingly."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/nav",
    "module_name": "6l11eqdm4wf5ilc",
    "method_name": "NavList",
    "input_params": [
      {
        "type": "object",
        "name": "data",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "number",
        "name": "depth",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "boolean",
        "name": "hasChild",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This is a React functional component that renders a navigation list and manages its open/close state and internal rendering of child list items using conditions based on the passed props.",
    "inner_function_calls": [
      {
        "name": "useRef",
        "import_path": "react"
      },
      {
        "name": "usePathname",
        "import_path": "next/navigation"
      },
      {
        "name": "useActiveLink",
        "import_path": "@/src/hooks/useActiveLink"
      },
      {
        "name": "useState",
        "import_path": "react"
      },
      {
        "name": "useEffect",
        "import_path": "react"
      },
      {
        "name": "document.querySelectorAll",
        "import_path": "n/a"
      },
      {
        "name": "setOpen",
        "import_path": "n/a"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "The component returns a JSX fragment containing NavItem and a potential StyledPopover with nested NavList, rendering navigational elements based on the props."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/nav",
    "module_name": "6l11eqdm4wf5ilc",
    "method_name": "NavSubList",
    "input_params": [
      {
        "type": "array",
        "name": "data",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "number",
        "name": "depth",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This is a React functional component that maps over an array of navigation items, rendering NavList components for each item in the list.",
    "inner_function_calls": [
      {
        "name": "NavList",
        "import_path": "./NavList"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "The component returns a JSX fragment containing multiple NavList components based on the provided data array."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/nav",
    "module_name": "6l11eqdm4wf5ilc",
    "method_name": "handleOpen",
    "input_params": [],
    "logic": "This function sets the state 'open' to true, which indicates that the navigation item is open.",
    "inner_function_calls": [
      {
        "name": "setOpen",
        "import_path": "n/a"
      }
    ],
    "output": {
      "type": "void",
      "description": "This function does not return a value but updates the 'open' state."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/nav",
    "module_name": "6l11eqdm4wf5ilc",
    "method_name": "handleClose",
    "input_params": [],
    "logic": "This function sets the state 'open' to false, which indicates that the navigation item is closed.",
    "inner_function_calls": [
      {
        "name": "setOpen",
        "import_path": "n/a"
      }
    ],
    "output": {
      "type": "void",
      "description": "This function does not return a value but updates the 'open' state."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/nav",
    "module_name": "6l11eqdm4wf5ilc",
    "method_name": "styles",
    "input_params": [],
    "logic": "A nested function within useEffect that resets body styles and app bar styles when called.",
    "inner_function_calls": [
      {
        "name": "document.body.style.overflow",
        "import_path": "n/a"
      },
      {
        "name": "document.body.style.padding",
        "import_path": "n/a"
      },
      {
        "name": "forEach",
        "import_path": "n/a"
      }
    ],
    "output": {
      "type": "void",
      "description": "This nested function does not return a value, it affects the DOM styling directly."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/nav",
    "module_name": "6l11eqdm4wf5ild",
    "method_name": "NavSectionMini",
    "input_params": [
      {
        "type": "object",
        "name": "data",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "sx",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "other",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Renders a section of navigational items based on the provided data, encapsulated in a Stack component from MUI. It allows for additional props through the 'other' parameter, and applies custom styles from 'sx'.",
    "inner_function_calls": [
      {
        "name": "Items",
        "import_path": ""
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "Returns a JSX stack of navigational items rendered from the input data."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/nav",
    "module_name": "6l11eqdm4wf5ild",
    "method_name": "Items",
    "input_params": [
      {
        "type": "array",
        "name": "items",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "boolean",
        "name": "isLastGroup",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Renders a list of navigation items, integrating each item with a NavList component. If it is not the last group, it also renders a divider element.",
    "inner_function_calls": [
      {
        "name": "NavList",
        "import_path": "./NavList"
      },
      {
        "name": "Box",
        "import_path": "@mui/material"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "Returns a fragment containing the navigation list items and optionally a divider."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/nav",
    "module_name": "6l11eqdm4wf5ile",
    "method_name": "default",
    "input_params": [],
    "logic": "This module exports the default export from the 'NavSectionMini' module. In the context of Next.js, it serves to simplify component organization and facilitate easier imports in other parts of the application.",
    "inner_function_calls": [],
    "output": {
      "type": "component",
      "description": "This output is a React component which can be used in other parts of the Next.js application, specifically in views or pages that need navigation functionality that the NavSectionMini offers."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/nav",
    "module_name": "6l11eqdm4wf5ilf",
    "method_name": "StyledItem",
    "input_params": [
      {
        "type": "object",
        "name": "props",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "StyledItem is a styled component based on ListItemButton, incorporating various props for customizing styles based on active state, open status, depth, and theme. It allows for tailored appearances for individual item states in a navigation menu context.",
    "inner_function_calls": [
      {
        "name": "alpha",
        "import_path": "@mui/material/styles"
      }
    ],
    "output": {
      "type": "object",
      "description": "StyledItem returns a styled ListItemButton component that adapts its CSS based on the provided props, which are crucial in responsive UI elements for menu or navigation components."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/nav",
    "module_name": "6l11eqdm4wf5ilf",
    "method_name": "StyledIcon",
    "input_params": [],
    "logic": "StyledIcon is a styled version of ListItemIcon, adjusting its margin and fixed dimensions based on predefined constants for better integration within the navigation structure.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "StyledIcon returns a styled ListItemIcon component designed for consistent icon spacing and sizes in navigation items."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/nav",
    "module_name": "6l11eqdm4wf5ilf",
    "method_name": "StyledPopover",
    "input_params": [
      {
        "type": "object",
        "name": "props",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "StyledPopover is a styled component of the Popover that optimizes the appearance of the dropdown and adjusts its padding, margin, border radius, and background effects based on the current theme. It also ensures that pointer events are handled correctly for a smoother user interface.",
    "inner_function_calls": [
      {
        "name": "bgBlur",
        "import_path": "@src/utils/cssStyles"
      }
    ],
    "output": {
      "type": "object",
      "description": "StyledPopover returns a styled Popover that ensures specific design and interaction behaviors, critical for dropdown elements in a user interface."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/nav",
    "module_name": "6l11eqdm4wf5ilg",
    "method_name": "NavItem",
    "input_params": [
      {
        "type": "object",
        "name": "props",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "other",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This is a functional component in Next.js that renders a navigation item. It constructs the UI based on properties such as 'item' (containing details about the nav item), the depth of the item, if it's open or active, and whether it is an external link. It leverages styled components and Material UI for the layout and design.",
    "inner_function_calls": [
      {
        "name": "StyledItem",
        "import_path": "./styles"
      },
      {
        "name": "StyledIcon",
        "import_path": "./styles"
      },
      {
        "name": "ListItemText",
        "import_path": "@mui/material"
      },
      {
        "name": "Tooltip",
        "import_path": "@mui/material"
      },
      {
        "name": "Box",
        "import_path": "@mui/material"
      },
      {
        "name": "Iconify",
        "import_path": "../../iconify"
      },
      {
        "name": "Link",
        "import_path": "next/link"
      }
    ],
    "output": {
      "type": "JSX",
      "description": "Renders a navigational item which may contain an external link or a Next.js link based on the properties."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/nav",
    "module_name": "6l11eqdm4wf5ilg",
    "method_name": "RenderItem",
    "input_params": [],
    "logic": "A nested functional component that decides how the navigation item is rendered based on whether it's an external link or has children. It returns the appropriate link component with the content.",
    "inner_function_calls": [],
    "output": {
      "type": "JSX",
      "description": "Returns either an external link or a Next.js link, wrapping around the navigation content."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/nav",
    "module_name": "6l11eqdm4wf5ilh",
    "method_name": "NavList",
    "input_params": [
      {
        "type": "object",
        "name": "data",
        "is_required": "true",
        "optional_value": ""
      },
      {
        "type": "number",
        "name": "depth",
        "is_required": "true",
        "optional_value": ""
      },
      {
        "type": "boolean",
        "name": "hasChild",
        "is_required": "true",
        "optional_value": ""
      }
    ],
    "logic": "The NavList component renders a navigation item with potential collapsible sub-items. It checks if the item is active based on the current pathname and updates its display state using local state and Redux for global navigation state management.",
    "inner_function_calls": [
      {
        "name": "usePathname",
        "import_path": "next/navigation"
      },
      {
        "name": "useDispatch",
        "import_path": "react-redux"
      },
      {
        "name": "useActiveLink",
        "import_path": "@/src/hooks/useActiveLink"
      },
      {
        "name": "setLeftNav",
        "import_path": "@/src/redux/slices"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "Returns JSX for the navigational UI, including a collapsible NavSubList if the item has children."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/nav",
    "module_name": "6l11eqdm4wf5ilh",
    "method_name": "handleToggle",
    "input_params": [],
    "logic": "Toggles the 'open' state of the nav item to either show or hide its children.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "This function does not return any value but modifies the component's internal state."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/nav",
    "module_name": "6l11eqdm4wf5ilh",
    "method_name": "handleClose",
    "input_params": [],
    "logic": "Closes the nav item by setting the 'open' state to false.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "This function does not return any value but modifies the component's internal state."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/nav",
    "module_name": "6l11eqdm4wf5ilh",
    "method_name": "NavSubList",
    "input_params": [
      {
        "type": "array",
        "name": "data",
        "is_required": "true",
        "optional_value": ""
      },
      {
        "type": "number",
        "name": "depth",
        "is_required": "true",
        "optional_value": ""
      }
    ],
    "logic": "NavSubList serves as a recursive component for rendering nested navigation lists based on the provided data array. It maps over the data to render each NavList component.",
    "inner_function_calls": [],
    "output": {
      "type": "JSX.Element",
      "description": "Returns JSX for rendering a list of NavList components based on the provided sub-item data."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/nav",
    "module_name": "6l11eqdm4wf5ili",
    "method_name": "NavSectionVertical",
    "input_params": [
      {
        "type": "object",
        "name": "data",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "sx",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "...other",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function serves as a React component that renders a vertical navigation section by utilizing Material-UI's Stack and List components for layout. It processes an array of data to generate navigation links categorized by groups and renders subheaders when applicable.",
    "inner_function_calls": [
      {
        "name": "StyledSubheader",
        "import_path": "./styles"
      },
      {
        "name": "NavList",
        "import_path": "./NavList"
      }
    ],
    "output": {
      "type": "React.Element",
      "description": "Returns a React component that visually represents a navigation section with stacked lists and optional subheaders."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/nav",
    "module_name": "6l11eqdm4wf5ilk",
    "method_name": "StyledItem",
    "input_params": [
      {
        "type": "boolean",
        "name": "active",
        "is_required": "optional",
        "optional_value": "false"
      },
      {
        "type": "boolean",
        "name": "disabled",
        "is_required": "optional",
        "optional_value": "false"
      },
      {
        "type": "number",
        "name": "depth",
        "is_required": "required",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "caption",
        "is_required": "optional",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "theme",
        "is_required": "required",
        "optional_value": ""
      }
    ],
    "logic": "Creates a styled ListItemButton component that applies various styles based on the props for active status, depth, and whether it is disabled. It utilizes Material-UI's styling system and adapts based on the current theme and the depth of the item in a navigation structure.",
    "inner_function_calls": [
      {
        "name": "alpha",
        "import_path": "@mui/material/styles"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns a styled component with custom styles appropriate for its active state, disabled status, and layout characteristics based on its depth."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/nav",
    "module_name": "6l11eqdm4wf5ilk",
    "method_name": "StyledIcon",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "required",
        "optional_value": ""
      }
    ],
    "logic": "Creates a styled ListItemIcon component that centers the icon and sets its width and height according to the configuration defined in the imported ICON constant.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled ListItemIcon component with specific display properties for navigation items."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/nav",
    "module_name": "6l11eqdm4wf5ilk",
    "method_name": "StyledDotIcon",
    "input_params": [
      {
        "type": "boolean",
        "name": "active",
        "is_required": "optional",
        "optional_value": "false"
      },
      {
        "type": "object",
        "name": "theme",
        "is_required": "required",
        "optional_value": ""
      }
    ],
    "logic": "Creates a styled span that represents a dot icon. Its styles change based on the 'active' state, modifying its scale and color when active. It also integrates theme transitions for visual effects.",
    "inner_function_calls": [
      {
        "name": "theme.transitions.create",
        "import_path": "@mui/material/styles"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns a styled span element representing a dot icon with visual states for active and inactive."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/nav",
    "module_name": "6l11eqdm4wf5ilk",
    "method_name": "StyledSubheader",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "required",
        "optional_value": ""
      }
    ],
    "logic": "Creates a styled ListSubheader component that applies typography and padding styles based on the given theme, particularly suitable for headings in a navigation list.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled ListSubheader component with customized typography and padding for presentation in a navigation structure."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/scrollbar",
    "module_name": "Scrollbar.js",
    "method_name": "Scrollbar",
    "input_params": [
      {
        "type": "object",
        "name": "other",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "node",
        "name": "children",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "sx",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "The Scrollbar function component is designed to conditionally render a different layout based on whether the user is on a mobile device or not. It uses the user agent to detect mobile devices and applies different styles and wrappers around the children components accordingly. This highlights its role in providing a responsive UI by utilizing conditional rendering methods common in React and Next.js.",
    "inner_function_calls": [
      {
        "name": "Box",
        "import_path": "@mui/material"
      },
      {
        "name": "StyledRootScrollbar",
        "import_path": "./styles"
      },
      {
        "name": "StyledScrollbar",
        "import_path": "./styles"
      }
    ],
    "output": {
      "type": "JSX Element",
      "description": "The component returns a JSX element. If the user is detected to be on a mobile device, it returns a Box component with specific overflow properties. Otherwise, it returns a StyledRootScrollbar containing a StyledScrollbar, demonstrating the use of styled components for custom scrollbar functionality."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/scrollbar",
    "module_name": "index.js",
    "method_name": "default",
    "input_params": [],
    "logic": "This is a default export statement that imports the default export from the './Scrollbar' module. In the context of Next.js, this typically indicates that the exported component or function is intended to be used elsewhere in the application, such as a React component.",
    "inner_function_calls": [],
    "output": {
      "type": "module",
      "description": "The default export of the './Scrollbar' module, which is likely a React component that can be used within other components or pages in a Next.js application."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/scrollbar",
    "module_name": "styles.js",
    "method_name": "StyledRootScrollbar",
    "input_params": [],
    "logic": "StyledRootScrollbar is a styled component that creates a scrollable div element which uses MUI's styled utility. It is meant to provide a customizable scrollbar for its children components in a flex layout, following the Next.js convention for styling components.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "The StyledRootScrollbar returns a styled div element intended to be used as a container that supports scrollable content."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/scrollbar",
    "module_name": "styles.js",
    "method_name": "StyledScrollbar",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "StyledScrollbar is another styled component that enhances the SimpleBar component with specific styles that utilize the Material-UI theme. It is appropriate for integrating custom scrollbar styles in accordance with Next.js components that need scroll functionality.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "The StyledScrollbar returns a styled SimpleBar component that serves as a custom scrollbar for scrollable content, leveraging the MUI theme for color and styling."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/search",
    "module_name": "found",
    "method_name": "SearchNotFound",
    "input_params": [
      {
        "type": "string",
        "name": "query",
        "is_required": "/?",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "sx",
        "is_required": "/?",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "other",
        "is_required": "/?",
        "optional_value": ""
      }
    ],
    "logic": "The SearchNotFound function is a React functional component that conditionally renders UI based on the presence of a query string. If a query is provided, it displays a 'Not found' message along with a suggestion for checking typos. If no query is present, it prompts the user to enter an album name. This behavior adheres to React component principles in Next.js, ensuring that it can dynamically handle props effectively.",
    "inner_function_calls": [],
    "output": {
      "type": "JSX.Element",
      "description": "Renders a Paper component containing a message about search results, or prompts the user to enter an album name depending on the input props."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/settings",
    "module_name": "config",
    "method_name": "defaultSettings",
    "input_params": [],
    "logic": "Defines an object containing default settings for a theme configuration in a Next.js application. This object provides initial values for various theme-related properties.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Represents the default settings which can be used for theming across the Next.js application, particularly in UI components."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/snackbar",
    "module_name": "SnackbarProvider.js",
    "method_name": "SnackbarProvider",
    "input_params": [
      {
        "type": "node",
        "name": "children",
        "is_required": "false",
        "optional_value": "null"
      }
    ],
    "logic": "The SnackbarProvider component wraps its children with a NotistackProvider for managing Snackbar notifications. It sets up properties such as maximum snacks and auto-hide duration, and handles the closing of snackbars via a ref.",
    "inner_function_calls": [
      {
        "name": "useRef",
        "import_path": "react"
      },
      {
        "name": "StyledNotistack",
        "import_path": "./styles"
      },
      {
        "name": "NotistackProvider",
        "import_path": "notistack"
      },
      {
        "name": "SnackbarIcon",
        "import_path": "../iconify"
      },
      {
        "name": "IconButton",
        "import_path": "@mui/material"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "Returns the JSX structure wrapping the children inside a SnackbarProvider for notification management."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/snackbar",
    "module_name": "SnackbarProvider.js",
    "method_name": "SnackbarIcon",
    "input_params": [
      {
        "type": "string",
        "name": "icon",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "oneOf(['primary','secondary','info','success','warning','error'])",
        "name": "color",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "The SnackbarIcon component renders a styled icon wrapped in a Box component. It displays the icon and applies styling based on the passed color and properties.",
    "inner_function_calls": [
      {
        "name": "Box",
        "import_path": "@mui/material"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "Returns a Box component containing the icon, styled appropriately based on passed color."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/snackbar",
    "module_name": "index.js",
    "method_name": "default",
    "input_params": [],
    "logic": "This module re-exports the default export from './SnackbarProvider' which is likely a React component that provides context for managing snackbars in a user interface. In the context of Next.js, this can be used for creating user notifications that may be displayed on various pages of the application.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "This output represents the default React component, which is configured to manage notifications (snackbars) through context."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/snackbar",
    "module_name": "index.js",
    "method_name": "export *",
    "input_params": [],
    "logic": "This line exports all named exports from the 'notistack' library, which is a notification library for React. It enables the usage of various snackbar-related functionalities throughout the application, allowing components to display temporary messages to users without requiring extensive boilerplate code.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "This output does not represent a specific function but allows access to all exported members from the 'notistack' library, such as hooks and components useful for snackbar notifications."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/snackbar",
    "module_name": "styles.js",
    "method_name": "StyledNotistack",
    "input_params": [
      {
        "type": "string",
        "name": "theme",
        "is_required": ": true",
        "optional_value": ""
      }
    ],
    "logic": "The function `StyledNotistack` is a React component that applies global styles using Material UI's `GlobalStyles` component. Within it, it uses the `useTheme` hook to access the current theme, allowing it to conditionally adjust styles based on whether the theme is in light mode or dark mode.",
    "inner_function_calls": [
      {
        "name": "useTheme",
        "import_path": "@mui/material/styles"
      },
      {
        "name": "GlobalStyles",
        "import_path": "@mui/material"
      }
    ],
    "output": {
      "type": "element",
      "description": "Returns a `GlobalStyles` component that applies the defined styles to the entire application, particularly affecting the Snackbar components."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/svg",
    "module_name": "6l11eqdm4wf5ilu",
    "method_name": "SvgColor",
    "input_params": [
      {
        "type": "string",
        "name": "src",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "sx",
        "is_required": "",
        "optional_value": "{}"
      },
      {
        "type": "object",
        "name": "other",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "ref",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "The SvgColor function is a React functional component that utilizes the forwardRef API. It receives props and renders a Box component with styles applied from the src prop for SVG masking.",
    "inner_function_calls": [
      {
        "name": "Box",
        "import_path": "@mui/material"
      }
    ],
    "output": {
      "type": "object",
      "description": "Renders an inline block element styled as a masked SVG icon with a current color background."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/svg",
    "module_name": "6l11eqdm4wf5ilv",
    "method_name": "default",
    "input_params": [],
    "logic": "This code exports the default export from the module located at './SvgColor'. It is typically used in a file that acts as an index for module re-exports, streamlining the import process for SvgColor elsewhere in the application.",
    "inner_function_calls": [],
    "output": {
      "type": "module export",
      "description": "This serves as the default export for the current module, allowing other files to import SvgColor as the default import."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/upload",
    "module_name": "Upload.js",
    "method_name": "Upload",
    "input_params": [
      {
        "type": "boolean",
        "name": "disabled",
        "is_required": "true",
        "optional_value": ""
      },
      {
        "type": "boolean",
        "name": "multiple",
        "is_required": "false",
        "optional_value": "false"
      },
      {
        "type": "boolean",
        "name": "error",
        "is_required": "true",
        "optional_value": ""
      },
      {
        "type": "node",
        "name": "helperText",
        "is_required": "true",
        "optional_value": ""
      },
      {
        "type": "oneOfType",
        "name": "file",
        "is_required": "true",
        "optional_value": ""
      },
      {
        "type": "func",
        "name": "onDelete",
        "is_required": "true",
        "optional_value": ""
      },
      {
        "type": "array",
        "name": "files",
        "is_required": "true",
        "optional_value": ""
      },
      {
        "type": "any",
        "name": "action",
        "is_required": "true",
        "optional_value": ""
      },
      {
        "type": "any",
        "name": "actionData",
        "is_required": "true",
        "optional_value": ""
      },
      {
        "type": "boolean",
        "name": "thumbnail",
        "is_required": "true",
        "optional_value": ""
      },
      {
        "type": "func",
        "name": "onUpload",
        "is_required": "true",
        "optional_value": ""
      },
      {
        "type": "func",
        "name": "onRemove",
        "is_required": "true",
        "optional_value": ""
      },
      {
        "type": "func",
        "name": "onRemoveAll",
        "is_required": "true",
        "optional_value": ""
      },
      {
        "type": "any",
        "name": "progress",
        "is_required": "true",
        "optional_value": ""
      },
      {
        "type": "func",
        "name": "setFiles",
        "is_required": "true",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "sx",
        "is_required": "true",
        "optional_value": ""
      },
      {
        "type": "any",
        "name": "other",
        "is_required": "true",
        "optional_value": ""
      }
    ],
    "logic": "The Upload component enables file uploads through a styled dropzone interface and manages file previews, errors, and several associated actions such as deletion and upload. It utilizes the react-dropzone library to gather file input and displays feedback to users during drag-and-drop interactions, as well as when files are managed explicitly by users.",
    "inner_function_calls": [
      {
        "name": "useDropzone",
        "import_path": "react-dropzone"
      },
      {
        "name": "Placeholder",
        "import_path": ""
      },
      {
        "name": "SingleFilePreview",
        "import_path": ""
      },
      {
        "name": "MultiFilePreview",
        "import_path": ""
      },
      {
        "name": "RejectionFiles",
        "import_path": ""
      },
      {
        "name": "IconButton",
        "import_path": "@mui/material"
      },
      {
        "name": "Button",
        "import_path": "@mui/material"
      },
      {
        "name": "Box",
        "import_path": "@mui/material"
      },
      {
        "name": "Stack",
        "import_path": "@mui/material"
      },
      {
        "name": "Typography",
        "import_path": "@mui/material"
      },
      {
        "name": "styled",
        "import_path": "@mui/material/styles"
      }
    ],
    "output": {
      "type": "JSX",
      "description": "The Upload component returns JSX that renders a dropzone area for file uploads, including visual feedback for drag events, previews of uploaded files, error messages for rejected files, and action buttons for file management, all conforming to Material UI standards."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/upload",
    "module_name": "Upload.js",
    "method_name": "Placeholder",
    "input_params": [
      {
        "type": "object",
        "name": "sx",
        "is_required": "false",
        "optional_value": ""
      },
      {
        "type": "any",
        "name": "other",
        "is_required": "true",
        "optional_value": ""
      }
    ],
    "logic": "The Placeholder component presents a visual prompt for users to either drag and drop files or select files from their machine. It includes an illustration and helpful text, enhancing the user experience of the upload interface.",
    "inner_function_calls": [
      {
        "name": "UploadIllustration",
        "import_path": "@/src/assets/illustrations/UploadIllustration"
      },
      {
        "name": "Typography",
        "import_path": "@mui/material"
      },
      {
        "name": "Stack",
        "import_path": "@mui/material"
      }
    ],
    "output": {
      "type": "JSX",
      "description": "The Placeholder component outputs JSX that displays an illustration and guidance text for the file upload process, serving as a visual cue for user interaction."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/upload",
    "module_name": "UploadAvatar.js",
    "method_name": "UploadAvatar",
    "input_params": [
      {
        "type": "boolean",
        "name": "error",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "file",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "boolean",
        "name": "disabled",
        "is_required": "",
        "optional_value": "false"
      },
      {
        "type": "string",
        "name": "helperText",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "sx",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "string",
        "name": "action",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "boolean",
        "name": "multiple",
        "is_required": "",
        "optional_value": "false"
      },
      {
        "type": "object",
        "name": "other",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "The UploadAvatar function is a React component that utilizes the 'react-dropzone' library to handle file uploads. It sets up a styled drop zone that allows users to drag and drop image files or select them using a file input. The component provides visual feedback for drag states and errors, as well as rendering an avatar preview if a file is uploaded. It is designed to integrate seamlessly into Next.js applications by providing an accessible way to upload images, with support for multiple file upload options.",
    "inner_function_calls": [
      {
        "name": "useDropzone",
        "import_path": "react-dropzone"
      },
      {
        "name": "StyledDropZone",
        "import_path": ""
      },
      {
        "name": "StyledPlaceholder",
        "import_path": ""
      },
      {
        "name": "AvatarPreview",
        "import_path": "./preview/AvatarPreview"
      },
      {
        "name": "RejectionFiles",
        "import_path": "./errors/RejectionFiles"
      },
      {
        "name": "Iconify",
        "import_path": "../iconify"
      },
      {
        "name": "Typography",
        "import_path": "@mui/material"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "The component returns a styled drop zone with interactive UI elements that enable image uploading, providing necessary error handling and previews."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/upload",
    "module_name": "UploadBox.js",
    "method_name": "UploadBox",
    "input_params": [
      {
        "type": "object",
        "name": "props",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "The UploadBox component provides a styled dropzone for file uploads, leveraging react-dropzone for drag-and-drop functionality. It accepts several props for styling and functionality control, integrating error handling, disabled state, and a placeholder display.",
    "inner_function_calls": [
      {
        "name": "useDropzone",
        "import_path": "react-dropzone"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "Returns a styled drop zone element that can display a placeholder or an upload icon, depending on the props provided. This component is designed to be used within a larger UI and facilitates file upload interactions."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/upload/errors",
    "module_name": "RejectionFiles.js",
    "method_name": "RejectionFiles",
    "input_params": [
      {
        "type": "array",
        "name": "fileRejections",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "string",
        "name": "action",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "The RejectionFiles component receives two props: fileRejections and action. It manages local state to track error messages and shows notifications based on user actions. It also performs error checking based on the file data passed to it and decides the rendering of UI elements depending on the action prop.",
    "inner_function_calls": [
      {
        "name": "useState",
        "import_path": "react"
      },
      {
        "name": "useSnackbar",
        "import_path": "@src/components/customStyle/customMUI/snackbar"
      },
      {
        "name": "useEffect",
        "import_path": "react"
      },
      {
        "name": "checkError",
        "import_path": ""
      },
      {
        "name": "fileData",
        "import_path": "../../file-thumbnail"
      },
      {
        "name": "fData",
        "import_path": "@src/utils/formatNumber"
      },
      {
        "name": "enqueueSnackbar",
        "import_path": "@src/components/customStyle/customMUI/snackbar"
      }
    ],
    "output": {
      "type": "React Element",
      "description": "The component renders a Paper element containing information about rejected files, including paths and error messages, or null if there are no rejections or if the action prop is 'rounded'."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/upload/errors",
    "module_name": "RejectionFiles.js",
    "method_name": "checkError",
    "input_params": [],
    "logic": "The checkError method inspects the fileRejections prop to update the local errorMsg state based on the first error encountered during the check of file data.",
    "inner_function_calls": [
      {
        "name": "fileData",
        "import_path": "../../file-thumbnail"
      }
    ],
    "output": {
      "type": "void",
      "description": "checkError does not return a value but modifies the state to trigger UI updates for displaying error messages."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/upload/errors",
    "module_name": "RejectionFiles.js",
    "method_name": "useEffect",
    "input_params": [],
    "logic": "The first useEffect monitors errorMsg and action to trigger a notification whenever errorMsg is set, particularly if the action is 'rounded'. It calls enqueueSnackbar to show the appropriate error message and resets errorMsg afterward.",
    "inner_function_calls": [
      {
        "name": "enqueueSnackbar",
        "import_path": "@src/components/customStyle/customMUI/snackbar"
      }
    ],
    "output": {
      "type": "void",
      "description": "This useEffect does not return a value; it manages side effects related to notifications."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/upload/errors",
    "module_name": "RejectionFiles.js",
    "method_name": "useEffect",
    "input_params": [],
    "logic": "The second useEffect tracks changes in the fileRejections prop to trigger error checking whenever the fileRejections list updates.",
    "inner_function_calls": [
      {
        "name": "checkError",
        "import_path": ""
      }
    ],
    "output": {
      "type": "void",
      "description": "This useEffect does not return a value, it serves to trigger the checkError function based on changes to fileRejections."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/upload",
    "module_name": "index.js",
    "method_name": "RejectionFiles",
    "input_params": [],
    "logic": "Imports the default export from the './errors/RejectionFiles' module, making it available for use in another module. This is typically used to handle error logic in a component or function, promoting modularity and reusability.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Represents the 'RejectionFiles' component or module responsible for managing error states."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/upload",
    "module_name": "index.js",
    "method_name": "AvatarPreview",
    "input_params": [],
    "logic": "Imports the default export from the './preview/AvatarPreview' module, allowing it to render an avatar preview component. This is often used in forms or user profile sections.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Represents the 'AvatarPreview' component designed to display a user's avatar."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/upload",
    "module_name": "index.js",
    "method_name": "MultiFilePreview",
    "input_params": [],
    "logic": "Imports the default export from the './preview/MultiFilePreview' module for rendering previews of multiple files. This is useful in applications that allow users to upload or manage multiple files simultaneously.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Represents the 'MultiFilePreview' component that provides previews for multiple uploaded files."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/upload",
    "module_name": "index.js",
    "method_name": "SingleFilePreview",
    "input_params": [],
    "logic": "Imports the default export from the './preview/SingleFilePreview' module to handle single file uploads and display its preview. This is typically used for user-uploaded content.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Represents the 'SingleFilePreview' component that displays a preview for a single uploaded file."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/upload",
    "module_name": "index.js",
    "method_name": "Upload",
    "input_params": [],
    "logic": "Imports the default export from the './Upload' module, probably to provide functionality for file uploads. This is central to file management in many applications.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Represents the 'Upload' component responsible for managing file uploads."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/upload",
    "module_name": "index.js",
    "method_name": "UploadBox",
    "input_params": [],
    "logic": "Imports the default export from the './UploadBox' module, used to create a user-interface box for uploading files. It enhances user interaction and experience.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Represents the 'UploadBox' component that provides a user-friendly box for file uploads."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/upload",
    "module_name": "index.js",
    "method_name": "UploadAvatar",
    "input_params": [],
    "logic": "Imports the default export from the './UploadAvatar' module, designed for handling user avatar uploads. This supports user customization and profile management.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Represents the 'UploadAvatar' component for managing and uploading user avatars."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/upload/preview",
    "module_name": "AvatarPreview.js",
    "method_name": "isValidUrl",
    "input_params": [
      {
        "type": "string",
        "name": "url",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Checks if a given URL is a valid image URL that starts with specific protocols or paths. This function is used to validate the image source for the AvatarPreview component.",
    "inner_function_calls": [],
    "output": {
      "type": "boolean",
      "description": "Returns true if the URL is valid according to the defined criteria, false otherwise."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/upload/preview",
    "module_name": "AvatarPreview.js",
    "method_name": "AvatarPreview",
    "input_params": [
      {
        "type": "oneOfType",
        "name": "file",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "action",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "A React component that renders an image preview given a valid file URL or object. It utilizes the isValidUrl function to ensure the preview is shown only for valid URLs, adhering to the Next.js convention of conditional rendering.",
    "inner_function_calls": [
      {
        "name": "isValidUrl",
        "import_path": "./this module"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "Returns a JSX fragment containing an Image component if the image URL is valid, otherwise returns null."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/upload/preview",
    "module_name": "MultiFilePreview.js",
    "method_name": "MultiFilePreview",
    "input_params": [
      {
        "type": "boolean",
        "name": "thumbnail",
        "is_required": "false",
        "optional_value": "undefined"
      },
      {
        "type": "array",
        "name": "files",
        "is_required": "true",
        "optional_value": "undefined"
      },
      {
        "type": "function",
        "name": "onRemove",
        "is_required": "false",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "sx",
        "is_required": "false",
        "optional_value": "undefined"
      },
      {
        "type": "number",
        "name": "progress",
        "is_required": "false",
        "optional_value": "0"
      },
      {
        "type": "string",
        "name": "action",
        "is_required": "false",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "actionData",
        "is_required": "false",
        "optional_value": "undefined"
      },
      {
        "type": "function",
        "name": "setFiles",
        "is_required": "false",
        "optional_value": "undefined"
      }
    ],
    "logic": "This component renders a list of file previews, either in thumbnail view or as a list, depending on the 'thumbnail' prop. It handles file removal and displays upload progress when files are uploaded. The use of <AnimatePresence> ensures smooth transitions when files are added or removed, fitting into the declarative nature expected in React and Next.js.",
    "inner_function_calls": [
      {
        "name": "fileData",
        "import_path": "../../file-thumbnail"
      },
      {
        "name": "varFade",
        "import_path": "../../../animate/variants/fade"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "Returns a collection of JSX elements that represent file previews or null if no files are present."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/upload/preview",
    "module_name": "MultiFilePreview.js",
    "method_name": "checkFile",
    "input_params": [],
    "logic": "This function checks if the file is not in the expected format (string type) and updates the related state ensuring correct display logic for the file preview.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "Does not return any value; it updates component state."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/upload/preview",
    "module_name": "MultiFilePreview.js",
    "method_name": "handleProgress",
    "input_params": [
      {
        "type": "object",
        "name": "progressEvent",
        "is_required": "true",
        "optional_value": "undefined"
      }
    ],
    "logic": "Handles the progress of file uploads by calculating the percentage of bytes loaded relative to the total size, updating the progress state accordingly.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "Does not return a value but updates the component state with the upload progress."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/upload/preview",
    "module_name": "MultiFilePreview.js",
    "method_name": "uploadImage",
    "input_params": [],
    "logic": "This async function manages the process of uploading an image, including updating the state for ongoing uploads and handling results from both individual and batch uploads to the server.",
    "inner_function_calls": [
      {
        "name": "uploadImages",
        "import_path": "@/src/utils/uploadImages"
      },
      {
        "name": "uploadFolderImage",
        "import_path": "@src/redux/slices"
      },
      {
        "name": "createRekognitionImage",
        "import_path": "@src/redux/slices"
      }
    ],
    "output": {
      "type": "void",
      "description": "This function does not directly return a value; it handles side effects including state updates and API calls."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/upload/preview",
    "module_name": "MultiFilePreview.js",
    "method_name": "UploadFileView",
    "input_params": [
      {
        "type": "object",
        "name": "file",
        "is_required": "true",
        "optional_value": "undefined"
      },
      {
        "type": "number",
        "name": "index",
        "is_required": "true",
        "optional_value": "undefined"
      },
      {
        "type": "function",
        "name": "onRemove",
        "is_required": "false",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "actionData",
        "is_required": "false",
        "optional_value": "undefined"
      },
      {
        "type": "function",
        "name": "setFiles",
        "is_required": "false",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "sx",
        "is_required": "false",
        "optional_value": "undefined"
      }
    ],
    "logic": "This component represents the detailed view of individual file uploads, including name, size, and progress percentage. It is responsible for rendering the UI during the upload process and displaying any necessary feedback to the user.",
    "inner_function_calls": [
      {
        "name": "fileData",
        "import_path": "../../file-thumbnail"
      },
      {
        "name": "varFade",
        "import_path": "../../../animate/variants/fade"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "Returns a JSX element representing an individual file's upload status and visual progress."
    }
  },
  {
    "folder_path": "src/components/customStyle/customMUI/upload/preview",
    "module_name": "SingleFilePreview.js",
    "method_name": "SingleFilePreview",
    "input_params": [
      {
        "type": "string | object",
        "name": "file",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This is a React functional component that renders a preview of a file passed as a prop. If the 'file' prop is not provided, it returns null. If the 'file' is a string, it directly uses it as the image source; if it's an object, it accesses the 'preview' property of the object. The component uses the Image component from a local module to render the file preview with specific styling attributes.",
    "inner_function_calls": [
      {
        "name": "Image",
        "import_path": "../../image"
      }
    ],
    "output": {
      "type": "ReactNode",
      "description": "Returns a React node, which could be either null (when no file is provided) or an Image component representing the file preview."
    }
  },
  {
    "folder_path": "src/components/dialog",
    "module_name": "index.js",
    "method_name": "AlertDialog",
    "input_params": [
      {
        "type": "object",
        "name": "props",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "The AlertDialog component is being imported from 'dialog.component', and is being exported as the default export of the current module. This pattern is commonly used in Next.js to encapsulate UI components for reusability.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "The exported output represents the AlertDialog component, which can be used in other parts of the application to render alert dialogs."
    }
  },
  {
    "folder_path": "src/components/form",
    "module_name": "NewAlbumForm.js",
    "method_name": "AlbumNewEditForm",
    "input_params": [
      {
        "type": "boolean",
        "name": "isEdit",
        "is_required": "false",
        "optional_value": "false"
      },
      {
        "type": "string",
        "name": "albumId",
        "is_required": "true",
        "optional_value": "undefined"
      },
      {
        "type": "string",
        "name": "action",
        "is_required": "false",
        "optional_value": "\"album\""
      },
      {
        "type": "string",
        "name": "folderId",
        "is_required": "false",
        "optional_value": "undefined"
      },
      {
        "type": "boolean",
        "name": "redirect",
        "is_required": "false",
        "optional_value": "undefined"
      }
    ],
    "logic": "This is the main functional component for creating or editing albums and folders, utilizing React hooks for state and form management. It integrates with MUI components for the UI and implements validation using Yup.",
    "inner_function_calls": [
      {
        "name": "useSnackbar",
        "import_path": "../customStyle/customMUI/snackbar"
      },
      {
        "name": "useRouter",
        "import_path": "next/navigation"
      },
      {
        "name": "useForm",
        "import_path": "react-hook-form"
      },
      {
        "name": "useDispatch",
        "import_path": "react-redux"
      },
      {
        "name": "useSelector",
        "import_path": "react-redux"
      },
      {
        "name": "useLazyGetAlbumOwnerQuery",
        "import_path": "@src/redux/slices"
      },
      {
        "name": "useLazyGetByIdAlbumQuery",
        "import_path": "@src/redux/slices"
      },
      {
        "name": "useUpdateAlbumMutation",
        "import_path": "@src/redux/slices"
      },
      {
        "name": "useCreateAlbumMutation",
        "import_path": "@src/redux/slices"
      },
      {
        "name": "useCreateFolderMutation",
        "import_path": "@src/redux/slices"
      },
      {
        "name": "useLazyGetFolderQuery",
        "import_path": "@src/redux/slices"
      },
      {
        "name": "useUpdateFolderMutation",
        "import_path": "@src/redux/slices"
      },
      {
        "name": "useMemo",
        "import_path": "react"
      },
      {
        "name": "useEffect",
        "import_path": "react"
      },
      {
        "name": "setValue",
        "import_path": "react-hook-form"
      },
      {
        "name": "uploadImages",
        "import_path": "@src/utils/uploadImages"
      },
      {
        "name": "getAlbumOwner",
        "import_path": "@src/api/main/folder"
      },
      {
        "name": "getAlbum",
        "import_path": "@src/redux/slices"
      },
      {
        "name": "getFolder",
        "import_path": "@src/redux/slices"
      },
      {
        "name": "getGroupData",
        "import_path": "@src/redux/slices"
      },
      {
        "name": "reset",
        "import_path": "react-hook-form"
      },
      {
        "name": "getAlbumData",
        "import_path": "@src/redux/slices"
      },
      {
        "name": "getAlbumOwnerData",
        "import_path": "@src/redux/slices"
      }
    ],
    "output": {
      "type": "ReactElement",
      "description": "Returns a JSX element representing the form for creating or editing albums and folders."
    }
  },
  {
    "folder_path": "src/components/form",
    "module_name": "NewAlbumForm.js",
    "method_name": "getAlbumOwnerData",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "true",
        "optional_value": "undefined"
      }
    ],
    "logic": "Fetches the album owner data and updates the state with the owner's information. This is called when managing folders.",
    "inner_function_calls": [
      {
        "name": "getAlbumOwner",
        "import_path": "@src/redux/slices"
      }
    ],
    "output": {
      "type": "Promise",
      "description": "Returns a promise that resolves when the album owner data is fetched and state is updated."
    }
  },
  {
    "folder_path": "src/components/form",
    "module_name": "NewAlbumForm.js",
    "method_name": "handleDrop",
    "input_params": [
      {
        "type": "array",
        "name": "acceptedFiles",
        "is_required": "true",
        "optional_value": "undefined"
      }
    ],
    "logic": "Handles the file drop event for cover images by opening the cropper with the selected file.",
    "inner_function_calls": [],
    "output": {
      "type": "undefined",
      "description": "This function sets state variables but does not return a value."
    }
  },
  {
    "folder_path": "src/components/form",
    "module_name": "NewAlbumForm.js",
    "method_name": "handleDropProfile",
    "input_params": [
      {
        "type": "array",
        "name": "acceptedFiles",
        "is_required": "true",
        "optional_value": "undefined"
      }
    ],
    "logic": "Handles the file drop event for profile images by opening the cropper with the selected file.",
    "inner_function_calls": [],
    "output": {
      "type": "undefined",
      "description": "This function sets state variables but does not return a value."
    }
  },
  {
    "folder_path": "src/components/form",
    "module_name": "NewAlbumForm.js",
    "method_name": "getAlbumData",
    "input_params": [
      {
        "type": "object",
        "name": "result",
        "is_required": "true",
        "optional_value": "undefined"
      }
    ],
    "logic": "Fetches the album data and populates the relevant state variables with the information, including downloading images from the API.",
    "inner_function_calls": [
      {
        "name": "ApiRoot.getImages",
        "import_path": "@src/api/root/Image"
      }
    ],
    "output": {
      "type": "Promise",
      "description": "Returns a promise that resolves when the album data is fully processed and set in state."
    }
  },
  {
    "folder_path": "src/components/form",
    "module_name": "NewAlbumForm.js",
    "method_name": "getGroupData",
    "input_params": [
      {
        "type": "object",
        "name": "result",
        "is_required": "true",
        "optional_value": "undefined"
      }
    ],
    "logic": "Fetches group folder data and similar to getAlbumData, populates the state with cover image URLs if available.",
    "inner_function_calls": [
      {
        "name": "ApiRoot.getImages",
        "import_path": "@src/api/root/Image"
      }
    ],
    "output": {
      "type": "Promise",
      "description": "Returns a promise that resolves when the group folder data is fully processed and set in state."
    }
  },
  {
    "folder_path": "src/components/form",
    "module_name": "NewAlbumForm.js",
    "method_name": "onSubmit",
    "input_params": [
      {
        "type": "object",
        "name": "data",
        "is_required": "true",
        "optional_value": "undefined"
      }
    ],
    "logic": "Handles the form submission, uploading images and creating or updating albums and folders based on the action type and edit state.",
    "inner_function_calls": [
      {
        "name": "uploadImages",
        "import_path": "@src/utils/uploadImages"
      },
      {
        "name": "createFolder",
        "import_path": "@src/redux/slices"
      },
      {
        "name": "updateFolder",
        "import_path": "@src/redux/slices"
      },
      {
        "name": "createAlbum",
        "import_path": "@src/redux/slices"
      },
      {
        "name": "updateAlbum",
        "import_path": "@src/redux/slices"
      },
      {
        "name": "router.replace",
        "import_path": "next/navigation"
      }
    ],
    "output": {
      "type": "Promise",
      "description": "Returns a promise for the asynchronous operation of uploading images and updating the album or folder."
    }
  },
  {
    "folder_path": "src/components/form/components",
    "module_name": "FaceCapture.js",
    "method_name": "FaceCapture",
    "input_params": [
      {
        "type": "object",
        "name": "userData",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "boolean",
        "name": "popupUpload",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "function",
        "name": "setUserProfileUpload",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This is a functional React component that captures user facial images using webcam and uploads them for profile purposes. It manages camera permissions, image capturing, and submission logic, leveraging Next.js hooks and component patterns.",
    "inner_function_calls": [],
    "output": {
      "type": "JSX Element",
      "description": "Returns a JSX element containing the webcam interface and controls for capturing and submitting images."
    }
  },
  {
    "folder_path": "src/components/form/components",
    "module_name": "FaceCapture.js",
    "method_name": "Submit",
    "input_params": [],
    "logic": "Handles the image submission process including user authentication via AWS Amplify, uploading images, and updating user profiles in Redux store. It manages loading states and provides user feedback via toast notifications.",
    "inner_function_calls": [
      {
        "name": "signIn",
        "import_path": "aws-amplify/auth"
      },
      {
        "name": "uploadImages",
        "import_path": "@/src/utils/uploadImages"
      },
      {
        "name": "updateUser",
        "import_path": "@/src/redux/slices"
      },
      {
        "name": "toast.success",
        "import_path": "react-toastify"
      },
      {
        "name": "dispatch",
        "import_path": "@reduxjs/toolkit"
      },
      {
        "name": "signoutUser",
        "import_path": "@/src/utils/auth"
      }
    ],
    "output": {
      "type": "Promise",
      "description": "Completes submission of images and updates user profile, with potential side effects such as user authentication."
    }
  },
  {
    "folder_path": "src/components/form/components",
    "module_name": "FaceCapture.js",
    "method_name": "enableCamera",
    "input_params": [],
    "logic": "Requests camera access from the user. It updates the permission status based on the outcome of the request.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "Sets camera access permission status in the component state."
    }
  },
  {
    "folder_path": "src/components/form/components",
    "module_name": "FaceCapture.js",
    "method_name": "startVideo",
    "input_params": [],
    "logic": "Activates the video stream from the user's webcam and handles potential errors during access.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "Starts the video playback from the user's webcam."
    }
  },
  {
    "folder_path": "src/components/form/components",
    "module_name": "FaceCapture.js",
    "method_name": "useInterval",
    "input_params": [
      {
        "type": "function",
        "name": "async callback",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "number",
        "name": "delay",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Implements a custom hook that allows executing a callback at specified intervals, crucial for the face detection logic in this component.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "Executes the provided callback function at defined intervals."
    }
  },
  {
    "folder_path": "src/components/form/components",
    "module_name": "FaceCapture.js",
    "method_name": "handlePositionCapture",
    "input_params": [
      {
        "type": "string",
        "name": "position",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Handles capturing of images based on the detected position (front, left, or right) during the facial recognition process. It also updates the current step of the capture process.",
    "inner_function_calls": [
      {
        "name": "captureImage",
        "import_path": ""
      }
    ],
    "output": {
      "type": "void",
      "description": "Captures the image at the specified position and progresses to the next step of the capture."
    }
  },
  {
    "folder_path": "src/components/form/components",
    "module_name": "FaceCapture.js",
    "method_name": "drawCustomFaceLandmarks",
    "input_params": [
      {
        "type": "CanvasRenderingContext2D",
        "name": "context",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "landmarks",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Draws detected facial landmarks on the canvas to visualize face detection, aiding in the user interface for image capture.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "Visualizes facial landmarks on a canvas context."
    }
  },
  {
    "folder_path": "src/components/form/components",
    "module_name": "FaceCapture.js",
    "method_name": "captureImage",
    "input_params": [
      {
        "type": "string",
        "name": "position",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Captures a frame from the video element and converts it to a Blob, which is subsequently converted into an image file appropriate for upload.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "Captures an image from the webcam based on the defined position and stores the image in the respective state."
    }
  },
  {
    "folder_path": "src/components/form/components",
    "module_name": "FaceCapture.js",
    "method_name": "handleRetake",
    "input_params": [],
    "logic": "Resets all image capture states and the current step, allowing the user to retake their profile images from scratch.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "Resets capture state for retaking images."
    }
  },
  {
    "folder_path": "src/components/form/components",
    "module_name": "ForgotForm.js",
    "method_name": "ForgotForm",
    "input_params": [],
    "logic": "The ForgotForm component manages user input for the password recovery process. It conditionally renders a form for either collecting the user's email or for entering an OTP and new password. It makes use of Formik for form handling and validation schemas for managing inputs.",
    "inner_function_calls": [],
    "output": {
      "type": "React component",
      "description": "The component returns a React element which represents the form for recovery of the password, functioning based on the user's interaction."
    }
  },
  {
    "folder_path": "src/components/form/components",
    "module_name": "ForgotForm.js",
    "method_name": "handleSubmit",
    "input_params": [
      {
        "type": "object",
        "name": "values",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "setFormikHelpers",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "handleSubmit function is called when the form is submitted. It handles both situations: requesting a password reset or confirming the reset with an OTP and new password. It also manages form submission feedback by setting error messages and form submission state.",
    "inner_function_calls": [
      {
        "name": "resetPassword",
        "import_path": "aws-amplify/auth"
      },
      {
        "name": "confirmResetPassword",
        "import_path": "aws-amplify/auth"
      },
      {
        "name": "router.push",
        "import_path": "next/navigation"
      }
    ],
    "output": {
      "type": "void",
      "description": "This function performs asynchronous operations to communicate with AWS services and does not return a traditional output."
    }
  },
  {
    "folder_path": "src/components/form/components",
    "module_name": "LoginForm.js",
    "method_name": "LoginForm",
    "input_params": [
      {
        "type": "object",
        "name": "props",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "props.profilePic",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "function",
        "name": "props.setProfilePic",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "props.userData",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "function",
        "name": "props.setUserData",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "The LoginForm component handles user login functionality with a form. It manages both login and OTP (One-Time Password) states. It is integrated with AWS Amplify for authentication, utilizes Redux for state management, and employs Formik for form handling and validation. It distinguishes between email/password login and OTP confirmation.",
    "inner_function_calls": [
      {
        "name": "useState",
        "import_path": "react"
      },
      {
        "name": "useLazyGetUserQuery",
        "import_path": "@/src/redux/slices"
      },
      {
        "name": "signoutUser",
        "import_path": "@/src/utils/auth"
      },
      {
        "name": "signIn",
        "import_path": "aws-amplify/auth"
      },
      {
        "name": "resendSignUpCode",
        "import_path": "aws-amplify/auth"
      },
      {
        "name": "getUserData",
        "import_path": "@/src/redux/slices"
      },
      {
        "name": "confirmSignUp",
        "import_path": "aws-amplify/auth"
      },
      {
        "name": "router.push",
        "import_path": "next/navigation"
      },
      {
        "name": "toast.success",
        "import_path": "react-toastify"
      }
    ],
    "output": {
      "type": "ReactElement",
      "description": "The component returns a form UI for user login and OTP entry, as well as handling different user states through conditional rendering and Redux state updates."
    }
  },
  {
    "folder_path": "src/components/form/components",
    "module_name": "SignupForm.js",
    "method_name": "SignUpForm",
    "input_params": [],
    "logic": "SignUpForm is a React functional component that renders a sign-up form for users. It uses local state to manage form submission status and inputs, utilizes Formik for form management and validation, and interacts with AWS Amplify for sign-up functionality. It's designed to toggle between initial sign-up inputs and verification through OTP, adhering to Next.js conventions for client-side rendering and form handling.",
    "inner_function_calls": [
      {
        "name": "useDispatch",
        "import_path": "react-redux"
      },
      {
        "name": "useRouter",
        "import_path": "next/navigation"
      },
      {
        "name": "useState",
        "import_path": "react"
      },
      {
        "name": "useTranslations",
        "import_path": "next-intl"
      },
      {
        "name": "signUp",
        "import_path": "aws-amplify/auth"
      },
      {
        "name": "confirmSignUp",
        "import_path": "aws-amplify/auth"
      },
      {
        "name": "fetchAuthSession",
        "import_path": "aws-amplify/auth"
      }
    ],
    "output": {
      "type": "object",
      "description": "The component returns the rendered sign-up form elements, utilizing Formik to handle form state, submission, and validation."
    }
  },
  {
    "folder_path": "src/components/form/components",
    "module_name": "SignupForm.js",
    "method_name": "handleSubmit",
    "input_params": [
      {
        "type": "object",
        "name": "values",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "actions",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "handleSubmit is an asynchronous function to manage the form submission process. It checks whether the OTP step is required and calls the appropriate AWS Amplify functions (signUp or confirmSignUp) based on the current form state. It handles setting loading states and errors during submission, which is critical for user feedback in forms processed in a React component.",
    "inner_function_calls": [
      {
        "name": "signUp",
        "import_path": "aws-amplify/auth"
      },
      {
        "name": "confirmSignUp",
        "import_path": "aws-amplify/auth"
      },
      {
        "name": "fetchAuthSession",
        "import_path": "aws-amplify/auth"
      }
    ],
    "output": {
      "type": "void",
      "description": "The function does not return a value; it primarily performs side effects related to form submission."
    }
  },
  {
    "folder_path": "src/components/form/components",
    "module_name": "page.styled.js",
    "method_name": "ButtonsWrapper",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Creates a styled <Box> component that utilizes MUI's styled API with responsive flexbox styling. The layout changes based on the screen size due to the usage of theme.breakpoints.",
    "inner_function_calls": [],
    "output": {
      "type": "React.Component",
      "description": "A styled Box component that responds to different screen sizes and provides flex container properties."
    }
  },
  {
    "folder_path": "src/components/form/components",
    "module_name": "page.styled.js",
    "method_name": "BackgroundMessage",
    "input_params": [],
    "logic": "Creates a styled <Typography> component using MUI's styled API. This component is designed for displaying background messages with specific styling such as margin, color, font size, and zIndex.",
    "inner_function_calls": [],
    "output": {
      "type": "React.Component",
      "description": "A styled Typography component used to display a centered background message."
    }
  },
  {
    "folder_path": "src/components/form/components",
    "module_name": "page.styled.js",
    "method_name": "IndependentTextCTA",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Creates a styled <Box> component specifically designed for stand-alone text call-to-action elements. It features hover effects and responsive design.",
    "inner_function_calls": [],
    "output": {
      "type": "React.Component",
      "description": "A styled Box component serving as an interactive text call-to-action, with hover effects and responsive font size."
    }
  },
  {
    "folder_path": "src/components/form",
    "module_name": "form.styled.js",
    "method_name": "createStyledInput",
    "input_params": [
      {
        "type": "string",
        "name": "component",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Creates a styled input component using MUI's styled utility, applying various style rules based on the theme and showing error indications if necessary. This function supports the dynamic creation of styles for different input types, encapsulating the styling logic for MUI components within a reusable utility.",
    "inner_function_calls": [],
    "output": {
      "type": "function",
      "description": "Returns a styled component that can be used as a React component in a Next.js application, suitable for rendering input and textarea elements."
    }
  },
  {
    "folder_path": "src/components/form",
    "module_name": "index.js",
    "method_name": "Select",
    "input_params": [],
    "logic": "This is a functional import and export statement for the Select component. It uses ES6 module syntax to import the Select component from a local file and re-exports it for use in other parts of the application.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "This component is used for selection input in forms within a Next.js application."
    }
  },
  {
    "folder_path": "src/components/form",
    "module_name": "index.js",
    "method_name": "TextField",
    "input_params": [],
    "logic": "Similar to Select, this is a functional import and export statement for the TextField component. It allows for the use of a text input field in forms by re-exporting the component for streamlined access.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "This component serves as an input field for strings or text data in forms."
    }
  },
  {
    "folder_path": "src/components/form",
    "module_name": "index.js",
    "method_name": "RadioGroup",
    "input_params": [],
    "logic": "This is an import and export statement for the RadioGroup component, which handles the rendering of radio buttons for form options. Re-exporting makes it easy to access in other modules.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "This component is utilized for selecting a single option from a set of choices."
    }
  },
  {
    "folder_path": "src/components/form",
    "module_name": "validationSchemas.js",
    "method_name": "otpValidationSchema",
    "input_params": [
      {
        "type": "function",
        "name": "t",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Creates a validation schema for OTP input using Yup. It specifies that the OTP must be a number that is required and must have exactly 6 digits, incorporating translation for validation messages.",
    "inner_function_calls": [
      {
        "name": "Yup.object",
        "import_path": "yup"
      },
      {
        "name": "Yup.number",
        "import_path": "yup"
      },
      {
        "name": "Yup.number().required",
        "import_path": "yup"
      },
      {
        "name": "Yup.number().test",
        "import_path": "yup"
      }
    ],
    "output": {
      "type": "object",
      "description": "A Yup validation schema object for validating OTP input."
    }
  },
  {
    "folder_path": "src/components/form",
    "module_name": "validationSchemas.js",
    "method_name": "newPasswordValidationSchema",
    "input_params": [
      {
        "type": "function",
        "name": "t",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Creates a validation schema for new password input using Yup. It ensures the OTP and password are properly validated with multiple rules, including length and character requirements, with translated validation messages.",
    "inner_function_calls": [
      {
        "name": "Yup.object",
        "import_path": "yup"
      },
      {
        "name": "Yup.number",
        "import_path": "yup"
      },
      {
        "name": "Yup.string",
        "import_path": "yup"
      },
      {
        "name": "Yup.string().required",
        "import_path": "yup"
      },
      {
        "name": "Yup.string().matches",
        "import_path": "yup"
      }
    ],
    "output": {
      "type": "object",
      "description": "A Yup validation schema object for validating new password input."
    }
  },
  {
    "folder_path": "src/components/form",
    "module_name": "validationSchemas.js",
    "method_name": "loginValidationSchema",
    "input_params": [
      {
        "type": "function",
        "name": "t",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Creates a validation schema for user login input using Yup. It verifies that email and password meet specified validation criteria, including format and length, utilizing translation for error messages.",
    "inner_function_calls": [
      {
        "name": "Yup.object",
        "import_path": "yup"
      },
      {
        "name": "Yup.string",
        "import_path": "yup"
      },
      {
        "name": "Yup.string().required",
        "import_path": "yup"
      },
      {
        "name": "Yup.string().matches",
        "import_path": "yup"
      }
    ],
    "output": {
      "type": "object",
      "description": "A Yup validation schema object for validating login input."
    }
  },
  {
    "folder_path": "src/components/form",
    "module_name": "validationSchemas.js",
    "method_name": "signUpValidationSchema",
    "input_params": [
      {
        "type": "function",
        "name": "t",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Creates a validation schema for user signup input with Yup. It includes rules for full name, email, password, and user type. Utilizes translation for user-facing error messages and applies length and character constraints.",
    "inner_function_calls": [
      {
        "name": "Yup.object",
        "import_path": "yup"
      },
      {
        "name": "Yup.string",
        "import_path": "yup"
      },
      {
        "name": "Yup.string().required",
        "import_path": "yup"
      },
      {
        "name": "Yup.string().matches",
        "import_path": "yup"
      }
    ],
    "output": {
      "type": "object",
      "description": "A Yup validation schema object for validating signup input."
    }
  },
  {
    "folder_path": "src/components/form",
    "module_name": "validationSchemas.js",
    "method_name": "forgotValidationSchema",
    "input_params": [
      {
        "type": "function",
        "name": "t",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Defines a validation schema for handling password recovery using Yup. It ensures that the provided email is valid and meets the required format, with appropriate error messages.",
    "inner_function_calls": [
      {
        "name": "Yup.object",
        "import_path": "yup"
      },
      {
        "name": "Yup.string",
        "import_path": "yup"
      },
      {
        "name": "Yup.string().required",
        "import_path": "yup"
      }
    ],
    "output": {
      "type": "object",
      "description": "A Yup validation schema object for validating forgot password input."
    }
  },
  {
    "folder_path": "src/components/form",
    "module_name": "validationSchemas.js",
    "method_name": "resetPasswordValidationSchema",
    "input_params": [],
    "logic": "Creates a validation schema for resetting a password using Yup. This validation includes checks for OTP format and ensures that the new password and confirmation match, with constraints on their length and a regex test for password conformity.",
    "inner_function_calls": [
      {
        "name": "Yup.object",
        "import_path": "yup"
      },
      {
        "name": "Yup.string",
        "import_path": "yup"
      },
      {
        "name": "Yup.string().required",
        "import_path": "yup"
      },
      {
        "name": "Yup.string().oneOf",
        "import_path": "yup"
      }
    ],
    "output": {
      "type": "object",
      "description": "A Yup validation schema object for validating password reset input."
    }
  },
  {
    "folder_path": "src/components/form",
    "module_name": "validationSchemas.js",
    "method_name": "enterOTPFormValidationSchema",
    "input_params": [],
    "logic": "Establishes a validation schema for entering an OTP using Yup. It strictly requires the OTP to be a six-digit number and applies relevant validation messaging.",
    "inner_function_calls": [
      {
        "name": "Yup.object",
        "import_path": "yup"
      },
      {
        "name": "Yup.string",
        "import_path": "yup"
      },
      {
        "name": "Yup.string().required",
        "import_path": "yup"
      },
      {
        "name": "Yup.string().test",
        "import_path": "yup"
      }
    ],
    "output": {
      "type": "object",
      "description": "A Yup validation schema object for validating OTP input form."
    }
  },
  {
    "folder_path": "src/components/form",
    "module_name": "validationSchemas.js",
    "method_name": "verifySignupValidationSchema",
    "input_params": [],
    "logic": "Develops a validation schema specifically for verifying user signup, applying restrictions to username length and birthday requirements. It ensures the birthday is not in the future and checks minimum age constraints.",
    "inner_function_calls": [
      {
        "name": "Yup.object",
        "import_path": "yup"
      },
      {
        "name": "Yup.string",
        "import_path": "yup"
      },
      {
        "name": "Yup.date",
        "import_path": "yup"
      },
      {
        "name": "Yup.date().required",
        "import_path": "yup"
      },
      {
        "name": "Yup.date().max",
        "import_path": "yup"
      }
    ],
    "output": {
      "type": "object",
      "description": "A Yup validation schema object for verifying user signup attributes."
    }
  },
  {
    "folder_path": "src/components/gsap",
    "module_name": "AnimatedTitle.styled.js",
    "method_name": "AnimatedTitleValue",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function is a styled component that customizes the Typography element from MUI. It utilizes a theme parameter for responsive design, adjusting styles based on the current viewport size, particularly the line height when the viewport meets a breakpoint condition.",
    "inner_function_calls": [
      {
        "name": "breakpoints.up",
        "import_path": "@mui/material"
      }
    ],
    "output": {
      "type": "object",
      "description": "Styled Typography component with custom styles applied based on the provided theme."
    }
  },
  {
    "folder_path": "src/components/gsap",
    "module_name": "TextReveal.js",
    "method_name": "TextReveal",
    "input_params": [],
    "logic": "This is a functional component that utilizes React hooks to manage state and effects. It reacts to media query changes, utilizes localized strings, and animates a list of brand video items with visual effects.",
    "inner_function_calls": [
      {
        "name": "useArrayRef",
        "import_path": ""
      },
      {
        "name": "useTranslations",
        "import_path": "next-intl"
      },
      {
        "name": "useMediaQuery",
        "import_path": "@mui/material"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "The rendered JSX structure includes a responsive grid that displays a dynamically updated text list and a video player based on user interaction."
    }
  },
  {
    "folder_path": "src/components/gsap",
    "module_name": "TextReveal.js",
    "method_name": "useArrayRef",
    "input_params": [],
    "logic": "Creates and returns a ref array to hold DOM elements. This is useful for handling multiple refs without needing to manage them individually.",
    "inner_function_calls": [],
    "output": {
      "type": "Array",
      "description": "Returns an array consisting of a ref object and a callback function to populate that ref."
    }
  },
  {
    "folder_path": "src/components/gsap",
    "module_name": "TextReveal.js",
    "method_name": "useEffect",
    "input_params": [
      {
        "type": "function",
        "name": "effect",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "Array",
        "name": "dependencies",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Runs effect for handling responsive design by updating the current index based on the screen size detected by the media query hook.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "Performs an action when the component mounts and on changes to 'isSmallScreen'."
    }
  },
  {
    "folder_path": "src/components/images",
    "module_name": "CropImage.js",
    "method_name": "CropImage",
    "input_params": [
      {
        "type": "boolean",
        "name": "isCropperOpen",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "function",
        "name": "setIsCropperOpen",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "selectedFile",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "function",
        "name": "setCroppedImage",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "number",
        "name": "aspect",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "The CropImage function is a React component rendering a full-screen image cropping dialog, leveraging the 'react-easy-crop' library. It manages crop state and handles the image cropping process, including saving the cropped image and closing the dialog, in alignment with Next.js component design patterns.",
    "inner_function_calls": [
      {
        "name": "useState",
        "import_path": "react"
      },
      {
        "name": "useCallback",
        "import_path": "react"
      },
      {
        "name": "getCroppedImg",
        "import_path": "@/src/utils/functions"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "The rendered dialog component that allows users to crop an image."
    }
  },
  {
    "folder_path": "src/components/images",
    "module_name": "CropImage.js",
    "method_name": "onCropComplete",
    "input_params": [
      {
        "type": "object",
        "name": "croppedArea",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "croppedAreaPixels",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "The onCropComplete function updates the state with the cropped area pixel coordinates whenever cropping is completed. This information is essential for later processing the cropped image.",
    "inner_function_calls": [
      {
        "name": "setCroppedAreaPixels",
        "import_path": "react"
      }
    ],
    "output": {
      "type": "void",
      "description": "This function does not return a value; it performs a state update."
    }
  },
  {
    "folder_path": "src/components/images",
    "module_name": "CropImage.js",
    "method_name": "handleCropSave",
    "input_params": [],
    "logic": "The handleCropSave function is an asynchronous operation that retrieves the cropped image based on the pixels defined and updates the parent component's state with the new blob. It also handles potential errors during the cropping process.",
    "inner_function_calls": [
      {
        "name": "getCroppedImg",
        "import_path": "@/src/utils/functions"
      },
      {
        "name": "console.error",
        "import_path": "console"
      }
    ],
    "output": {
      "type": "void",
      "description": "This function does not return a value; it performs side effects."
    }
  },
  {
    "folder_path": "src/components/images",
    "module_name": "DropImagesUpload.js",
    "method_name": "DropImagesUpload",
    "input_params": [
      {
        "type": "ReactNode",
        "name": "children",
        "is_required": "/",
        "optional_value": "null"
      }
    ],
    "logic": "The 'DropImagesUpload' component provides a user interface for file uploads using a drag-and-drop approach. It utilizes the 'useDropzone' hook from the 'react-dropzone' library to manage file drops, while housing MUI components for styling and structure.",
    "inner_function_calls": [
      {
        "name": "useDropzone",
        "import_path": "react-dropzone"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "This function returns a styled JSX element that serves as the drop-target for file uploads. It includes visual feedback for active dragging and renders any child components passed via the 'children' prop."
    }
  },
  {
    "folder_path": "src/components/images",
    "module_name": "DropImagesUpload.js",
    "method_name": "onDrop",
    "input_params": [
      {
        "type": "File[]",
        "name": "acceptedFiles",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "The 'onDrop' function is an event handler that processes files dropped onto the drop zone, updating the local state with the accepted files.",
    "inner_function_calls": [
      {
        "name": "setFiles",
        "import_path": "react"
      }
    ],
    "output": {
      "type": "void",
      "description": "This function updates the state with the newly accepted files, affecting the component's behavior in response to user interactions."
    }
  },
  {
    "folder_path": "src/components/images",
    "module_name": "GalleryImages.js",
    "method_name": "GalleryImages",
    "input_params": [
      {
        "type": "object",
        "name": "galleryData",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "boolean",
        "name": "isLoading",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "owner",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This is the main component function for displaying gallery images. It utilizes various hooks from React and MUI to manage UI state and layout based on device size. It also prepares data for lightbox viewing and handles the scenario of downloading images.",
    "inner_function_calls": [
      {
        "name": "useSelector",
        "import_path": "react-redux"
      },
      {
        "name": "useTheme",
        "import_path": "@mui/material"
      },
      {
        "name": "useMediaQuery",
        "import_path": "@mui/material"
      },
      {
        "name": "useSnackbar",
        "import_path": "@src/components/customStyle/customMUI/snackbar"
      },
      {
        "name": "ImageList",
        "import_path": "@mui/material"
      },
      {
        "name": "ImageListItem",
        "import_path": "@mui/material"
      },
      {
        "name": "Image",
        "import_path": "next/image"
      },
      {
        "name": "FolderImageSkeleton",
        "import_path": "../skeleton/FolderImageSkeleton"
      },
      {
        "name": "Lightbox",
        "import_path": "../customStyle/customMUI/lightbox/Lightbox"
      },
      {
        "name": "setSelectedImage",
        "import_path": ""
      },
      {
        "name": "enqueueSnackbar",
        "import_path": ""
      },
      {
        "name": "nextImageUrl",
        "import_path": "@/src/utils/functions"
      },
      {
        "name": "fetch",
        "import_path": ""
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "The output is a JSX element representing the layout of gallery images, which can either show the images or display a message indicating no images are present. It integrates a lightbox for image viewing."
    }
  },
  {
    "folder_path": "src/components/images",
    "module_name": "GalleryImages.js",
    "method_name": "handleOpenLightbox",
    "input_params": [
      {
        "type": "string",
        "name": "imageUrl",
        "is_required": "true",
        "optional_value": ""
      }
    ],
    "logic": "This function opens a lightbox by setting the selected image index based on the provided image URL from the gallery.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "It does not return anything but updates the state to show the lightbox."
    }
  },
  {
    "folder_path": "src/components/images",
    "module_name": "GalleryImages.js",
    "method_name": "handleCloseLightbox",
    "input_params": [],
    "logic": "This function simply resets the selected image index to -1, effectively closing the lightbox.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "It does not return anything but updates the state to close the lightbox."
    }
  },
  {
    "folder_path": "src/components/images",
    "module_name": "GalleryImages.js",
    "method_name": "handleDownloadImage",
    "input_params": [
      {
        "type": "object",
        "name": "currentIndex",
        "is_required": "true",
        "optional_value": ""
      }
    ],
    "logic": "This async function handles the download process for the currently selected image from the lightbox. It constructs a download URL and tries to fetch it, then handles response states.",
    "inner_function_calls": [
      {
        "name": "fetch",
        "import_path": ""
      },
      {
        "name": "handleCloseLightbox",
        "import_path": ""
      },
      {
        "name": "enqueueSnackbar",
        "import_path": ""
      }
    ],
    "output": {
      "type": "void",
      "description": "It does not return anything but initiates a file download or shows an error message if the download fails."
    }
  },
  {
    "folder_path": "src/components/images",
    "module_name": "image.styled.js",
    "method_name": "AnimatorWrapper",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This method is creating a styled wrapper component using MUI's Box component which is focused on centering its child elements with flexbox properties. Itâ€™s structured to maintain responsive design by adjusting its width.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "The output is a styled React component that can be used to wrap other elements with flex-based layout properties."
    }
  },
  {
    "folder_path": "src/components/images",
    "module_name": "image.styled.js",
    "method_name": "LottieWrapper",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This method constructs a styled component wrapping the dynamic Lottie animation. It is set up with specific width properties and aims to align child components centrally.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "The output is a styled React component designed specifically for Lottie animations with responsive width settings."
    }
  },
  {
    "folder_path": "src/components/layout",
    "module_name": "LocalSwitcher.js",
    "method_name": "LocalSwitcher",
    "input_params": [],
    "logic": "The LocalSwitcher component allows users to switch between different locales in a Next.js application. It employs the useLocale hook from next-intl to get the currently active locale and integrates it with a select dropdown to change the locale.",
    "inner_function_calls": [
      {
        "name": "useLocale",
        "import_path": "next-intl"
      },
      {
        "name": "useRouter",
        "import_path": "next/navigation"
      },
      {
        "name": "setUserLocale",
        "import_path": "@/src/libs/local"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "The component returns a JSX structure representing a dropdown select element for locale switching, which allows users to choose their preferred language."
    }
  },
  {
    "folder_path": "src/components/layout",
    "module_name": "LocalSwitcher.js",
    "method_name": "onSelectChange",
    "input_params": [
      {
        "type": "Event",
        "name": "e",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This is an event handler function that is triggered when the user selects a different locale from the dropdown. It retrieves the selected value and updates the user locale using the setUserLocale function.",
    "inner_function_calls": [
      {
        "name": "setUserLocale",
        "import_path": "@/src/libs/local"
      }
    ],
    "output": {
      "type": "void",
      "description": "This function does not return any output but triggers a side effect by updating the user's selected locale."
    }
  },
  {
    "folder_path": "src/components/layout",
    "module_name": "ProtectedRoute.js",
    "method_name": "ProtectedRoute",
    "input_params": [
      {
        "type": "function",
        "name": "WrappedComponent",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function is a Higher-Order Component (HOC) that wraps another component to provide authentication logic. It controls access based on user roles and tokens, redirecting users as necessary within the context of protected routes in a Next.js application.",
    "inner_function_calls": [],
    "output": {
      "type": "function",
      "description": "Returns a new component that can only be accessed by authorized users, ensuring proper handling of user access based on authentication state."
    }
  },
  {
    "folder_path": "src/components/layout",
    "module_name": "ProtectedRoute.js",
    "method_name": "ProtectedComponent",
    "input_params": [
      {
        "type": "object",
        "name": "props",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function serves as the actual protected component that contains the logic to check authentication state and navigate users accordingly. It utilizes React hooks for managing state and side effects, integrating Redux for state management related to authentication.",
    "inner_function_calls": [
      {
        "name": "useRouter",
        "import_path": "next/navigation"
      },
      {
        "name": "usePathname",
        "import_path": "next/navigation"
      },
      {
        "name": "useSelector",
        "import_path": "react-redux"
      },
      {
        "name": "useDispatch",
        "import_path": "react-redux"
      },
      {
        "name": "useSearchParams",
        "import_path": "next/navigation"
      },
      {
        "name": "useSnackbar",
        "import_path": "@src/components/customStyle/customMUI/snackbar"
      },
      {
        "name": "checkAuth",
        "import_path": ""
      },
      {
        "name": "setAccess",
        "import_path": ""
      },
      {
        "name": "dispatch",
        "import_path": ""
      },
      {
        "name": "fetchAuthSession",
        "import_path": "aws-amplify/auth"
      },
      {
        "name": "setupToken",
        "import_path": "@/src/utils/functions"
      },
      {
        "name": "verifyShareToken",
        "import_path": "@/src/utils/functions"
      },
      {
        "name": "toast.error",
        "import_path": "react-toastify"
      }
    ],
    "output": {
      "type": "component or null",
      "description": "Renders the wrapped component (if access is allowed) or returns null based on the authentication state."
    }
  },
  {
    "folder_path": "src/components/layout",
    "module_name": "ProtectedRoute.js",
    "method_name": "checkAuth",
    "input_params": [],
    "logic": "This function checks the current authentication status of the user and manages redirects based on user roles and token availability. It incorporates external utility functions and controls navigation flows within the component.",
    "inner_function_calls": [
      {
        "name": "setupToken",
        "import_path": "@/src/utils/functions"
      },
      {
        "name": "verifyShareToken",
        "import_path": "@/src/utils/functions"
      },
      {
        "name": "fetch",
        "import_path": ""
      },
      {
        "name": "dispatch",
        "import_path": ""
      },
      {
        "name": "setUser",
        "import_path": "@/src/redux/slices"
      },
      {
        "name": "signoutUser",
        "import_path": "@/src/utils/auth"
      }
    ],
    "output": {
      "type": "promise",
      "description": "Returns a promise that resolves when the authentication check is complete, impacting what the component renders based on access."
    }
  },
  {
    "folder_path": "src/components/layout",
    "module_name": "ProtectedRouteServerSide.js",
    "method_name": "checkAuth",
    "input_params": [
      {
        "type": "string",
        "name": "pathname",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "function",
        "name": "redirect",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "The `checkAuth` function is designed to manage user authentication checks based on the requested route (pathname). It distinguishes between public routes and authentication-required routes. It uses server-side authentication methods to validate whether a user is authenticated and determines appropriate redirection based on their authentication status. This logic is crucial in Next.js for protecting routes and ensuring that users are directed to the correct pages based on their authentication state.",
    "inner_function_calls": [
      {
        "name": "GetAuthCurrentUserServer",
        "import_path": "@/src/utils/amplify"
      },
      {
        "name": "runWithAmplifyServerContext",
        "import_path": "@/src/utils/amplify"
      }
    ],
    "output": {
      "type": "boolean",
      "description": "The function returns a boolean: true if the user is authorized to access the requested route, and false if they should be redirected, particularly in the context of Next.js routing and user session management."
    }
  },
  {
    "folder_path": "src/components/layout",
    "module_name": "ProviderWrapper.js",
    "method_name": "ProviderWrapper",
    "input_params": [
      {
        "type": "object",
        "name": "children",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "The ProviderWrapper component initializes AWS Amplify configuration with specific OAuth redirect URIs and wraps its children components with a Redux Provider, allowing access to the Redux store throughout the application.",
    "inner_function_calls": [
      {
        "name": "Amplify.configure",
        "import_path": "aws-amplify"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "The React component that renders the Redux Provider with the given children, enabling state management in a Next.js application."
    }
  },
  {
    "folder_path": "src/components/layout",
    "module_name": "UserProfileUpload.js",
    "method_name": "UserProfileUpload",
    "input_params": [],
    "logic": "This is a functional React component in Next.js that handles user profile uploads. It utilizes hooks for state management and API calls based on the user's profile data, particularly to dictate whether to show a modal for face capture when specific conditions regarding the user's profile are met.",
    "inner_function_calls": [
      {
        "name": "useSelector",
        "import_path": "react-redux"
      },
      {
        "name": "usePathname",
        "import_path": "next/navigation"
      },
      {
        "name": "useEffect",
        "import_path": "react"
      },
      {
        "name": "useDispatch",
        "import_path": "react-redux"
      },
      {
        "name": "useLazyGetUserQuery",
        "import_path": "@/src/redux/slices"
      }
    ],
    "output": {
      "type": "ReactElement",
      "description": "Renders a modal component displaying a face capture interface. The modal's visibility is determined by the user's profile status."
    }
  },
  {
    "folder_path": "src/components/layout",
    "module_name": "UserProfileUpload.js",
    "method_name": "checkUserProfile",
    "input_params": [],
    "logic": "This asynchronous function checks the user's profile conditions to determine if the profile upload modal should trigger. It refers to the public routes to prevent the modal from showing on login/signup pages, and checks for required user data like a profile image and selfies. If the data is insufficient, it retrieves user data lazily and updates the Redux store accordingly.",
    "inner_function_calls": [
      {
        "name": "getUserData",
        "import_path": ""
      },
      {
        "name": "dispatch",
        "import_path": "react-redux"
      }
    ],
    "output": {
      "type": "void",
      "description": "This function does not return any value. It modifies component state and dispatches actions based on the checks performed."
    }
  },
  {
    "folder_path": "src/components/layout/auth",
    "module_name": "Header.js",
    "method_name": "bgBlur",
    "input_params": [
      {
        "type": "object",
        "name": "props",
        "is_required": "true",
        "optional_value": ""
      }
    ],
    "logic": "Defines a function to create a blurred background style based on provided properties, useful for UI components in Next.js, particularly associated with Material-UI theming.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a style object that includes background image, blur effects, and color overlay settings."
    }
  },
  {
    "folder_path": "src/components/layout/auth",
    "module_name": "Header.js",
    "method_name": "Header",
    "input_params": [
      {
        "type": "function",
        "name": "onOpenNav",
        "is_required": "true",
        "optional_value": ""
      }
    ],
    "logic": "The main header component function that returns the AppBar and contains the navigation and account-related components, adhering to Next.js and Material-UI conventions.",
    "inner_function_calls": [
      {
        "name": "useTheme",
        "import_path": "@mui/material"
      },
      {
        "name": "LanguagePopover",
        "import_path": "./LanguagePopover"
      },
      {
        "name": "NotificationsPopover",
        "import_path": "./header/NotificationsPopover"
      },
      {
        "name": "AccountPopover",
        "import_path": "./header/AccountPopover"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "Renders a Material-UI AppBar component that serves as a header for the application, containing navigation elements."
    }
  },
  {
    "folder_path": "src/components/layout/auth",
    "module_name": "LanguagePopover.js",
    "method_name": "LanguagePopover",
    "input_params": [],
    "logic": "This is a functional component that provides a language selection popover for the user. It uses React hooks to manage state and effects, particularly for internationalization based on locale.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Renders JSX elements including an animated icon button and a popover menu containing language options."
    }
  },
  {
    "folder_path": "src/components/layout/auth",
    "module_name": "LanguagePopover.js",
    "method_name": "checkCurrentLag",
    "input_params": [],
    "logic": "This function checks the current selected language against a predefined list and updates the state with the corresponding language data if found.",
    "inner_function_calls": [
      {
        "name": "findIndex",
        "import_path": "Array.prototype"
      }
    ],
    "output": {
      "type": "void",
      "description": "Updates the local state with the current language data but does not return a value."
    }
  },
  {
    "folder_path": "src/components/layout/auth",
    "module_name": "LanguagePopover.js",
    "method_name": "handleOpenPopover",
    "input_params": [
      {
        "type": "object",
        "name": "event",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function is used to open the language selection popover by setting the state to the event's current target.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "Updates the local state to open the popover but does not return a value."
    }
  },
  {
    "folder_path": "src/components/layout/auth",
    "module_name": "LanguagePopover.js",
    "method_name": "handleClosePopover",
    "input_params": [],
    "logic": "This function sets the state to null, thereby closing the language selection popover.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "Updates the local state to close the popover but does not return a value."
    }
  },
  {
    "folder_path": "src/components/layout/auth",
    "module_name": "LanguagePopover.js",
    "method_name": "handleChangeLang",
    "input_params": [
      {
        "type": "string",
        "name": "newLang",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function is called when a new language is selected. It updates the user's locale in local storage and closes the popover.",
    "inner_function_calls": [
      {
        "name": "setUserLocale",
        "import_path": "@/src/libs/local"
      },
      {
        "name": "handleClosePopover",
        "import_path": ""
      }
    ],
    "output": {
      "type": "void",
      "description": "No return value, but it updates locale settings and local state."
    }
  },
  {
    "folder_path": "src/components/layout/auth",
    "module_name": "Main.js",
    "method_name": "Main",
    "input_params": [
      {
        "type": "object",
        "name": "children",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "sx",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "other",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "The Main component serves as a layout wrapper in a Next.js application, utilizing Material-UI's Box component. It adapts its styling based on the current route and the user's device type, providing a responsive design that fits well within Next.js conventions.",
    "inner_function_calls": [
      {
        "name": "useSelector",
        "import_path": "react-redux"
      },
      {
        "name": "usePathname",
        "import_path": "next/navigation"
      },
      {
        "name": "useResponsive",
        "import_path": "@/src/hooks/useResponsive"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "The returned Box component is a primary content wrapper styled according to various conditions such as device size and active route, embodying a core layout component of the Next.js application."
    }
  },
  {
    "folder_path": "src/components/layout/auth",
    "module_name": "MainLayout.js",
    "method_name": "MainLayout",
    "input_params": [],
    "logic": "The 'MainLayout' component is a functional React component that serves as the main layout for the application. It returns a simple JSX element containing a 'div' with the text 'MainLayout'. This component could be used in Next.js to wrap additional components or pages, allowing for a consistent layout across the application.",
    "inner_function_calls": [],
    "output": {
      "type": "JSX.Element",
      "description": "The output is a JSX element representing the main layout of the application, which can be rendered in a Next.js page."
    }
  },
  {
    "folder_path": "src/components/layout/auth",
    "module_name": "NavBarUnAuth.js",
    "method_name": "NavBarUnAuth",
    "input_params": [],
    "logic": "The main functional component of the NavBarUnAuth which handles rendering a navigation bar for unauthenticated users, including responsiveness and interactive elements.",
    "inner_function_calls": [
      {
        "name": "useState",
        "import_path": "react"
      },
      {
        "name": "useTranslations",
        "import_path": "next-intl"
      },
      {
        "name": "useRouter",
        "import_path": "next/navigation"
      },
      {
        "name": "usePathname",
        "import_path": "next/navigation"
      },
      {
        "name": "useSelector",
        "import_path": "react-redux"
      },
      {
        "name": "useRef",
        "import_path": "react"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "Returns the JSX to render the navigation bar. This includes components for the AppBar, Toolbar, menu items, and user profile options."
    }
  },
  {
    "folder_path": "src/components/layout/auth",
    "module_name": "NavBarUnAuth.js",
    "method_name": "toggleDrawer",
    "input_params": [
      {
        "type": "boolean",
        "name": "newOpen",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "A callback function that toggles the state of the drawer between open and closed based on its new state.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "No return value; modifies the state of the drawer."
    }
  },
  {
    "folder_path": "src/components/layout/auth",
    "module_name": "NavBarUnAuth.js",
    "method_name": "scrollToSection",
    "input_params": [
      {
        "type": "string",
        "name": "sectionId",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Smoothly scrolls to a certain section of the page specified by the sectionId, adjusting for a specified offset.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "No return value; it manipulates the scroll position of the window."
    }
  },
  {
    "folder_path": "src/components/layout/auth",
    "module_name": "NavBarUnAuth.js",
    "method_name": "handleProfileClick",
    "input_params": [],
    "logic": "Handles clicks on the profile image to toggle the visibility of the dropdown menu for profile options.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "No return value; modifies the state of dropdownOpen."
    }
  },
  {
    "folder_path": "src/components/layout/auth",
    "module_name": "ProgressBar.js",
    "method_name": "ProgressBar",
    "input_params": [],
    "logic": "This is a functional React component that renders a progress bar using the Next.js `next-nprogress-bar` package. The component is marked as a client component by the 'use client' directive, meaning it will be rendered on the client side only. It handles the display of a progress loading bar throughout navigation events in a Next.js application.",
    "inner_function_calls": [
      {
        "name": "ProgressBarLoading",
        "import_path": "next-nprogress-bar"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "The output is a JSX element representing the progress bar component, which is used to indicate the loading state during page transitions in a Next.js application."
    }
  },
  {
    "folder_path": "src/components/layout/auth/header",
    "module_name": "AccountPopover.js",
    "method_name": "AccountPopover",
    "input_params": [],
    "logic": "This is a functional component that serves as a user account dropdown/popover menu. It uses state management and hooks from React, as well as various references from Redux, MUI, and React Router for handling user interactions and rendering UI elements. The component displays options for navigation and allows the user to log out.",
    "inner_function_calls": [
      {
        "name": "useRouter",
        "import_path": "next/navigation"
      },
      {
        "name": "useSelector",
        "import_path": "react-redux"
      },
      {
        "name": "useTranslations",
        "import_path": "next-intl"
      },
      {
        "name": "useDispatch",
        "import_path": "react-redux"
      },
      {
        "name": "useState",
        "import_path": "react"
      }
    ],
    "output": {
      "type": "ReactNode",
      "description": "This component returns UI elements structured as a popover with user account details and navigation options, fitting into the Next.js framework for dynamic user interfaces."
    }
  },
  {
    "folder_path": "src/components/layout/auth/header",
    "module_name": "AccountPopover.js",
    "method_name": "handleOpenPopover",
    "input_params": [
      {
        "type": "object",
        "name": "event",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function is invoked to set the popover's open state to the current target of the event, effectively showing the popover.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "This function has no return value and only alters the state of the component to display the popover."
    }
  },
  {
    "folder_path": "src/components/layout/auth/header",
    "module_name": "AccountPopover.js",
    "method_name": "handleClosePopover",
    "input_params": [],
    "logic": "This function resets the popover's open state, effectively closing it when called.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "This function has no return value and only alters the state of the component to hide the popover."
    }
  },
  {
    "folder_path": "src/components/layout/auth/header",
    "module_name": "AccountPopover.js",
    "method_name": "handleLogout",
    "input_params": [],
    "logic": "This asynchronous function handles the logout process by calling the external signoutUser function to perform the logout, handling success and error notifications through a snackbar.",
    "inner_function_calls": [
      {
        "name": "signoutUser",
        "import_path": "@/src/utils/auth"
      },
      {
        "name": "enqueueSnackbar",
        "import_path": "../../../customStyle/customMUI/snackbar"
      }
    ],
    "output": {
      "type": "void",
      "description": "This function does not return any value, but it performs side effects including logging out the user and providing feedback through notifications."
    }
  },
  {
    "folder_path": "src/components/layout/auth/header",
    "module_name": "AccountPopover.js",
    "method_name": "handleClickItem",
    "input_params": [
      {
        "type": "string",
        "name": "path",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function processes clicks on menu items by closing the popover and navigating to the specified path using the router.",
    "inner_function_calls": [
      {
        "name": "router.push",
        "import_path": "next/navigation"
      },
      {
        "name": "handleClosePopover",
        "import_path": ""
      }
    ],
    "output": {
      "type": "void",
      "description": "This function does not return any value but effectively navigates the user to a new route while managing the UI state."
    }
  },
  {
    "folder_path": "src/components/layout/auth/header",
    "module_name": "NotificationsPopover.js",
    "method_name": "NotificationsPopover",
    "input_params": [],
    "logic": "This function serves as a React component that renders a notifications popover, utilizing local state to manage the openness of the popover and the notifications list.",
    "inner_function_calls": [
      {
        "name": "useState",
        "import_path": "react"
      },
      {
        "name": "IconButtonAnimate",
        "import_path": "@src/components/customStyle/animate"
      },
      {
        "name": "MenuPopover",
        "import_path": "@src/components/customStyle/customMUI/menu-popover"
      },
      {
        "name": "Badge",
        "import_path": "@mui/material"
      },
      {
        "name": "fToNow",
        "import_path": "@/src/utils/formatTime"
      },
      {
        "name": "NotificationItem",
        "import_path": "not specified"
      }
    ],
    "output": {
      "type": "ReactNode",
      "description": "A React component that displays a button to trigger the notifications popover and the popover itself containing notifications."
    }
  },
  {
    "folder_path": "src/components/layout/auth/header",
    "module_name": "NotificationsPopover.js",
    "method_name": "handleOpenPopover",
    "input_params": [
      {
        "type": "object",
        "name": "event",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function sets the state to open the notifications popover when invoked, utilizing the event's current target for positioning.",
    "inner_function_calls": [
      {
        "name": "setOpenPopover",
        "import_path": "not specified"
      }
    ],
    "output": {
      "type": "void",
      "description": "No output; the function directly modifies the component's state."
    }
  },
  {
    "folder_path": "src/components/layout/auth/header",
    "module_name": "NotificationsPopover.js",
    "method_name": "handleClosePopover",
    "input_params": [],
    "logic": "This function resets the state to close the notifications popover, returning it to a closed state.",
    "inner_function_calls": [
      {
        "name": "setOpenPopover",
        "import_path": "not specified"
      }
    ],
    "output": {
      "type": "void",
      "description": "No output; the function directly modifies the component's state."
    }
  },
  {
    "folder_path": "src/components/layout/auth/header",
    "module_name": "NotificationsPopover.js",
    "method_name": "handleMarkAllAsRead",
    "input_params": [],
    "logic": "This function marks all notifications as read by mapping over the notifications list and setting each notification's isUnRead property to false.",
    "inner_function_calls": [
      {
        "name": "setNotifications",
        "import_path": "not specified"
      }
    ],
    "output": {
      "type": "void",
      "description": "No output; the function directly modifies the notifications state."
    }
  },
  {
    "folder_path": "src/components/layout/auth/header",
    "module_name": "NotificationsPopover.js",
    "method_name": "NotificationItem",
    "input_params": [
      {
        "type": "object",
        "name": "notification",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function component renders a single notification item within the notifications list, utilizing the notification's information to display an avatar and title with appropriate styling.",
    "inner_function_calls": [
      {
        "name": "renderContent",
        "import_path": "not specified"
      },
      {
        "name": "ListItemButton",
        "import_path": "@mui/material"
      },
      {
        "name": "ListItemAvatar",
        "import_path": "@mui/material"
      },
      {
        "name": "Avatar",
        "import_path": "@mui/material"
      },
      {
        "name": "ListItemText",
        "import_path": "@mui/material"
      },
      {
        "name": "Iconify",
        "import_path": "@src/components/customStyle/customMUI/iconify"
      },
      {
        "name": "Typography",
        "import_path": "@mui/material"
      }
    ],
    "output": {
      "type": "ReactNode",
      "description": "A React component that represents a single notification item, displaying its avatar, title, and time since creation."
    }
  },
  {
    "folder_path": "src/components/layout/auth/header",
    "module_name": "NotificationsPopover.js",
    "method_name": "renderContent",
    "input_params": [
      {
        "type": "object",
        "name": "notification",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function determines the avatar and title content for a given notification based on its type, enabling a dynamic display based on the notification's properties.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An object containing the avatar JSX and title JSX to be rendered for the notification."
    }
  },
  {
    "folder_path": "src/components/layout/auth",
    "module_name": "index.js",
    "method_name": "export",
    "input_params": [],
    "logic": "This command is utilized to re-export all exports from another module, specifically from the 'NavBarUnAuth' module in this instance. It facilitates grouping and organizing exports without modifications, following ES module syntax.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "This operation does not have a return value in the traditional sense; instead, it allows the module to make all exports from 'NavBarUnAuth' available for imports elsewhere."
    }
  },
  {
    "folder_path": "src/components/layout/auth/nav",
    "module_name": "NavAccount.js",
    "method_name": "NavAccount",
    "input_params": [],
    "logic": "The NavAccount function is a functional component in Next.js that utilizes React hooks to access Redux state. It renders a user account link displaying the user's profile image, name, and email. The component adheres to Next.js conventions by using NextLink for client-side navigation, enhancing performance and user experience.",
    "inner_function_calls": [
      {
        "name": "useSelector",
        "import_path": "react-redux"
      },
      {
        "name": "styled",
        "import_path": "@mui/material/styles"
      },
      {
        "name": "alpha",
        "import_path": "@mui/material/styles"
      },
      {
        "name": "CustomAvatar",
        "import_path": "../../../customStyle/customMUI/custom-avatar"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "The output is a JSX element, specifically a styled link component leading to the user profile page, displaying the user's avatar and details."
    }
  },
  {
    "folder_path": "src/components/layout/auth/nav",
    "module_name": "NavHorizontal.js",
    "method_name": "NavHorizontal",
    "input_params": [],
    "logic": "This functional component renders a horizontal navigation bar using Material-UI components. It incorporates a blur effect and configuration from a navigation configuration, adhering to the conventions of React components and Next.js layout design.",
    "inner_function_calls": [
      {
        "name": "useTheme",
        "import_path": "@mui/material/styles"
      },
      {
        "name": "AppBar",
        "import_path": "@mui/material"
      },
      {
        "name": "Toolbar",
        "import_path": "@mui/material"
      },
      {
        "name": "bgBlur",
        "import_path": "@src/utils/cssStyles"
      },
      {
        "name": "NavSectionHorizontal",
        "import_path": "../../../customStyle/customMUI/nav-section"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "Returns a JSX element representing a navigation bar that is styled with Material-UI components."
    }
  },
  {
    "folder_path": "src/components/layout/auth/nav",
    "module_name": "NavHorizontal.js",
    "method_name": "Shadow",
    "input_params": [
      {
        "type": "object",
        "name": "sx",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This functional component creates a stylized shadow effect that appears beneath the navigation bar. It accepts styling properties to customize its appearance, allowing for flexible design in the context of a Next.js layout.",
    "inner_function_calls": [
      {
        "name": "Box",
        "import_path": "@mui/material"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "Returns a JSX element representing a shadow effect with custom styling applied through props."
    }
  },
  {
    "folder_path": "src/components/layout/auth/nav",
    "module_name": "NavMini.js",
    "method_name": "NavMini",
    "input_params": [],
    "logic": "NavMini is a React functional component that serves as a minimalist navigation section for a dashboard layout, utilizing Material-UI components for structure and styling. It encapsulates navigation functions and UI elements to optimize space in a responsive design, following Next.js conventions for component rendering.",
    "inner_function_calls": [
      {
        "name": "useTranslations",
        "import_path": "next-intl"
      },
      {
        "name": "NavToggleButton",
        "import_path": "./NavToggleButton"
      },
      {
        "name": "Logo",
        "import_path": "../../../customStyle/customMUI/logo"
      },
      {
        "name": "NavSectionMini",
        "import_path": "../../../customStyle/customMUI/nav-section"
      },
      {
        "name": "hideScrollbarX",
        "import_path": "@src/utils/cssStyles"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "The output is a structured navigation component that integrates various UI elements and styling, suitable for rendering in a Next.js application."
    }
  },
  {
    "folder_path": "src/components/layout/auth/nav",
    "module_name": "NavToggleButton.js",
    "method_name": "NavToggleButton",
    "input_params": [
      {
        "type": "object",
        "name": "sx",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "NavToggleButton is a functional component used to toggle between different navigation layouts in a responsive manner. It leverages Redux for state management, retrieves the current theme layout from the state, and conditionally renders an IconButton based on the screen size.",
    "inner_function_calls": [
      {
        "name": "useDispatch",
        "import_path": "react-redux"
      },
      {
        "name": "useSelector",
        "import_path": "react-redux"
      },
      {
        "name": "useCallback",
        "import_path": "react"
      },
      {
        "name": "useResponsive",
        "import_path": "@/src/hooks/useResponsive"
      },
      {
        "name": "setTheme",
        "import_path": "@/src/redux/slices"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "The component renders an IconButton that toggles the navigation layout when clicked, or null if the screen is not large enough."
    }
  },
  {
    "folder_path": "src/components/layout/auth/nav",
    "module_name": "NavVertical.js",
    "method_name": "NavVertical",
    "input_params": [
      {
        "type": "boolean",
        "name": "openNav",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "function",
        "name": "onCloseNav",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This is a functional component that renders a vertical navigation menu using Material-UI's Drawer component. It adapts to the screen size and displays different layouts for desktop and mobile views. The navigation content includes a customizable scrolling area and various other components for account display and navigation configuration.",
    "inner_function_calls": [
      {
        "name": "usePathname",
        "import_path": "next/navigation"
      },
      {
        "name": "useResponsive",
        "import_path": "@/src/hooks/useResponsive"
      },
      {
        "name": "useTranslations",
        "import_path": "next-intl"
      },
      {
        "name": "Scrollbar",
        "import_path": "../../../customStyle/customMUI/scrollbar/Scrollbar"
      },
      {
        "name": "Logo",
        "import_path": "../../../customStyle/customMUI/logo"
      },
      {
        "name": "NavAccount",
        "import_path": "./NavAccount"
      },
      {
        "name": "NavToggleButton",
        "import_path": "./NavToggleButton"
      },
      {
        "name": "NavSectionVertical",
        "import_path": "../../../customStyle/customMUI/nav-section"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "The rendered vertical navigation component, which adapts its layout based on the device width."
    }
  },
  {
    "folder_path": "src/components/layout/auth/nav",
    "module_name": "config",
    "method_name": "navConfig",
    "input_params": [
      {
        "type": "function",
        "name": "t",
        "is_required": "true",
        "optional_value": "undefined"
      }
    ],
    "logic": "The navConfig function generates a configuration array for navigation items in a Next.js application. It utilizes a translation function to localize the titles of various navigation items, each associated with a specific path and an icon from Material-UI.",
    "inner_function_calls": [
      {
        "name": "t",
        "import_path": "N/A"
      }
    ],
    "output": {
      "type": "array",
      "description": "Returns an array of navigation items structured for use in a sidebar or navigation component, containing localized titles, paths, and icons."
    }
  },
  {
    "folder_path": "src/components/layout/auth",
    "module_name": "page.styled.js",
    "method_name": "ProfileImage",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Defines a styled component for a profile image, applying defined dimensions, background color, and hover effects, adhering to Material-UI theming conventions.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Box component intended for use as a profile image."
    }
  },
  {
    "folder_path": "src/components/layout/auth",
    "module_name": "page.styled.js",
    "method_name": "DropdownMenu",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Creates a styled dropdown menu component with positioning, styling characteristics, and responsive changes based on screen size, following Material-UI design patterns.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Box component suitable for a dropdown menu in a UI, positioned fixed relative to the viewport."
    }
  },
  {
    "folder_path": "src/components/layout/auth",
    "module_name": "page.styled.js",
    "method_name": "DropdownItem",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Sets up a styled dropdown item with padding, color, and hover effect styles, ensuring responsiveness according to Material-UI breakpoints.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Box component which serves as an individual item in a dropdown menu."
    }
  },
  {
    "folder_path": "src/components/layout/auth",
    "module_name": "page.styled.js",
    "method_name": "ProfileOptionIcon",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Defines a styled component for an icon associated with profile options, including formatting for alignment and spacing following Material-UI style guidelines.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Box component for icons used within profile options."
    }
  },
  {
    "folder_path": "src/components/layout",
    "module_name": "persistGate.js",
    "method_name": "PersistGateProvider",
    "input_params": [
      {
        "type": "object",
        "name": "children",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function component is designed to wrap its children with the Redux PersistGate component, effectively managing the loading state of the persisted Redux store before rendering its children. This aligns with Next.js conventions of wrapping components to manage state and side effects within the React lifecycle.",
    "inner_function_calls": [],
    "output": {
      "type": "JSX",
      "description": "The rendered JSX from the PersistGate component, which provides a loading mechanism for the children prop based on the Redux persisted state."
    }
  },
  {
    "folder_path": "src/components/layout/unauth",
    "module_name": "FooterBar.js",
    "method_name": "FooterBar",
    "input_params": [],
    "logic": "This is a functional component that serves as a footer for the application, utilizing Material-UI components to structure its layout. It integrates the 'useTranslations' hook from 'next-intl' for internationalization, ensuring dynamic content based on language settings.",
    "inner_function_calls": [
      {
        "name": "useTranslations",
        "import_path": "next-intl"
      },
      {
        "name": "Copyright",
        "import_path": "local"
      }
    ],
    "output": {
      "type": "JSX Element",
      "description": "Returns the JSX of the footer, including copyright information, links, and social media icons."
    }
  },
  {
    "folder_path": "src/components/layout/unauth",
    "module_name": "FooterBar.js",
    "method_name": "Copyright",
    "input_params": [],
    "logic": "This inner function generates a copyright message displaying the current year and a link to the site, formatted using Material-UI's Typography component. It utilizes the translation function for dynamic text.",
    "inner_function_calls": [
      {
        "name": "t",
        "import_path": "next-intl"
      },
      {
        "name": "Link",
        "import_path": "@mui/material/Link"
      },
      {
        "name": "Typography",
        "import_path": "@mui/material/Typography"
      }
    ],
    "output": {
      "type": "JSX Element",
      "description": "Returns the copyright information as a styled Typography element."
    }
  },
  {
    "folder_path": "src/components/layout/unauth",
    "module_name": "GoogleButton.js",
    "method_name": "GoogleButton",
    "input_params": [
      {
        "type": "function",
        "name": "onSubmit",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "The GoogleButton component renders a button styled with Google branding. When clicked, it calls the onSubmit function passed as a prop. This function could be used to trigger authentication or any action related to Google services in a Next.js application.",
    "inner_function_calls": [
      {
        "name": "onSubmit",
        "import_path": ""
      }
    ],
    "output": {
      "type": "JSX Element",
      "description": "Renders a button element that can invoke the provided onSubmit function. The button's visual design follows material design principles, suitable for UI in Next.js applications."
    }
  },
  {
    "folder_path": "src/components/layout/unauth",
    "module_name": "NavBar.js",
    "method_name": "NavBar",
    "input_params": [],
    "logic": "This functional component represents a navigation bar for the application. It utilizes state management to handle the opening of a drawer and toggling between light and dark modes. The component dynamically renders navigation links and handles the scrolling to specific sections based on user interaction, adhering to typical conventions in Next.js for client-side rendered components.",
    "inner_function_calls": [
      {
        "name": "setOpen",
        "import_path": "react"
      },
      {
        "name": "setMode",
        "import_path": "react"
      },
      {
        "name": "usePathname",
        "import_path": "next/navigation"
      },
      {
        "name": "useTranslations",
        "import_path": "next-intl"
      },
      {
        "name": "scrollToSection",
        "import_path": ""
      },
      {
        "name": "toggleDrawer",
        "import_path": ""
      },
      {
        "name": "router",
        "import_path": "next/router"
      }
    ],
    "output": {
      "type": "JSX",
      "description": "Returns a JSX element representing the navigation bar layout, which includes a logo, menu items, and actions for login and booking a demo."
    }
  },
  {
    "folder_path": "src/components/layout/unauth",
    "module_name": "NavBar.js",
    "method_name": "toggleDrawer",
    "input_params": [
      {
        "type": "boolean",
        "name": "newOpen",
        "is_required": "true",
        "optional_value": "undefined"
      }
    ],
    "logic": "This function updates the state `open` to show or hide the drawer when invoked. It conforms to React's state management conventions by utilizing closures to maintain the correct value of `newOpen` during calls.",
    "inner_function_calls": [
      {
        "name": "setOpen",
        "import_path": "react"
      }
    ],
    "output": {
      "type": "void",
      "description": "This function does not return any value; it only updates the component's state."
    }
  },
  {
    "folder_path": "src/components/layout/unauth",
    "module_name": "NavBar.js",
    "method_name": "toggleColorMode",
    "input_params": [],
    "logic": "This function toggles the current color mode between light and dark by updating the state `mode`. It leverages functional state updates, which is a common practice in React.",
    "inner_function_calls": [
      {
        "name": "setMode",
        "import_path": "react"
      }
    ],
    "output": {
      "type": "void",
      "description": "This function does not return a value; it only modifies the state of the component."
    }
  },
  {
    "folder_path": "src/components/layout/unauth",
    "module_name": "NavBar.js",
    "method_name": "scrollToSection",
    "input_params": [
      {
        "type": "string",
        "name": "sectionId",
        "is_required": "true",
        "optional_value": "undefined"
      }
    ],
    "logic": "This function scrolls the viewport smoothly to the specified section by accessing the DOM. It also closes the navigation drawer after the action completes, ensuring a good user experience.",
    "inner_function_calls": [
      {
        "name": "document.getElementById",
        "import_path": ""
      },
      {
        "name": "window.scrollTo",
        "import_path": ""
      },
      {
        "name": "setOpen",
        "import_path": "react"
      }
    ],
    "output": {
      "type": "void",
      "description": "This function does not return a value; it performs a scrolling action and modifies state."
    }
  },
  {
    "folder_path": "src/components/layout/unauth",
    "module_name": "NavBar.js",
    "method_name": "ToggleColorMode",
    "input_params": [
      {
        "type": "string",
        "name": "mode",
        "is_required": "true",
        "optional_value": "undefined"
      },
      {
        "type": "function",
        "name": "toggleColorMode",
        "is_required": "true",
        "optional_value": "undefined"
      }
    ],
    "logic": "This functional component renders a button to toggle between light and dark modes. It utilizes props to receive mode information and the toggle function, implementing a typical React functional component pattern.",
    "inner_function_calls": [],
    "output": {
      "type": "JSX",
      "description": "Returns a JSX element representing a button with an icon that corresponds to the current color mode."
    }
  },
  {
    "folder_path": "src/components/layout/unauth",
    "module_name": "index.js",
    "method_name": "export",
    "input_params": [],
    "logic": "This is an export statement that re-exports all exports from the NavBar module, allowing other modules to use the functionality defined in the NavBar file without directly importing it. In the context of Next.js, this is typically used to organize components, routes, or utilities that can be shared across the application.",
    "inner_function_calls": [],
    "output": {
      "type": "undefined",
      "description": "The statement does not produce a direct output; it facilitates the distribution of the NavBar's exports for use in other parts of the application."
    }
  },
  {
    "folder_path": "src/components/pages/Albums",
    "module_name": "AlbumCard.js",
    "method_name": "AlbumCard",
    "input_params": [
      {
        "type": "object",
        "name": "album",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "The AlbumCard component is a functional React component used to display the details of a music album, such as its name, cover image, owner, and various counts related to folders, images, and shares. It also provides navigation to the album's detail page when clicked. The logic involves destructuring the 'album' prop to retrieve relevant data and rendering it within styled MUI components, while also utilizing translations for internationalization.",
    "inner_function_calls": [
      {
        "name": "useRouter",
        "import_path": "next/navigation"
      },
      {
        "name": "useTranslations",
        "import_path": "next-intl"
      },
      {
        "name": "fShortenNumber",
        "import_path": "@src/utils/formatNumber"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "The component returns a structured layout containing the album's information, rendered as styled Material UI components. It displays the cover image, avatar, owner, and counts, while allowing navigation when clicked."
    }
  },
  {
    "folder_path": "src/components/pages/Albums",
    "module_name": "AlbumFilters.js",
    "method_name": "AlbumFilters",
    "input_params": [
      {
        "type": "function",
        "name": "setAlbumData",
        "is_required": ".true",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "albumData",
        "is_required": ".true",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "albumDataFilter",
        "is_required": ".true",
        "optional_value": "null"
      }
    ],
    "logic": "AlbumFilters is a functional component that manages album sorting and searching functionality. It utilizes React hooks to maintain its internal state for sorting options and serves as a wrapper for the AlbumSearch and AlbumSort components.",
    "inner_function_calls": [
      {
        "name": "AlbumSearch",
        "import_path": "./AlbumSearch"
      },
      {
        "name": "AlbumSort",
        "import_path": "./AlbumSort"
      },
      {
        "name": "useState",
        "import_path": "react"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "This component returns a fragment containing AlbumSearch and AlbumSort components, effectively rendering the UI for filtering and sorting albums."
    }
  },
  {
    "folder_path": "src/components/pages/Albums",
    "module_name": "AlbumFolders.js",
    "method_name": "AlbumFolders",
    "input_params": [
      {
        "type": "object",
        "name": "props",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "The AlbumFolders component manages and displays folders within an image gallery, including functionalities for image manipulation such as retrieval, viewing, deleting, and uploading images. It uses React state management, side effects with useEffect, and API interactions. It adheres to Next.js conventions for rendering pages and components, handling client-side rendering and server-side API calls.",
    "inner_function_calls": [
      {
        "name": "useTranslations",
        "import_path": "next-intl"
      },
      {
        "name": "useSnackbar",
        "import_path": "@src/components/customStyle/customMUI/snackbar"
      },
      {
        "name": "useLazyGetFolderQuery",
        "import_path": "@src/redux/slices"
      },
      {
        "name": "enqueueSnackbar",
        "import_path": "@src/components/customStyle/customMUI/snackbar"
      },
      {
        "name": "ApiRoot.getImages",
        "import_path": "@/src/api/root/Image"
      },
      {
        "name": "getFolder",
        "import_path": "internal"
      },
      {
        "name": "setDefaultFolder",
        "import_path": "internal"
      },
      {
        "name": "getFilteredImages",
        "import_path": "internal"
      },
      {
        "name": "handleDownloadImage",
        "import_path": "internal"
      },
      {
        "name": "handleDeleteImage",
        "import_path": "internal"
      },
      {
        "name": "handleOpenLightbox",
        "import_path": "internal"
      },
      {
        "name": "handleCloseLightbox",
        "import_path": "internal"
      },
      {
        "name": "handleOpenConfirm",
        "import_path": "internal"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "Returns a structured layout of folders, image upload, and image display functionalities within a gallery context."
    }
  },
  {
    "folder_path": "src/components/pages/Albums",
    "module_name": "AlbumFolders.js",
    "method_name": "getFilteredImages",
    "input_params": [],
    "logic": "This function retrieves filtered images based on the current gallery and updates the state with new image URLs fetched from an API. It collects image IDs, fetches their corresponding URLs from a specified endpoint, and processes the response data to update the application state with the latest image information.",
    "inner_function_calls": [
      {
        "name": "ApiRoot.getImages",
        "import_path": "@/src/api/root/Image"
      }
    ],
    "output": {
      "type": "void",
      "description": "No direct output, but updates the state with filtered images in the context of the AlbumFolders component."
    }
  },
  {
    "folder_path": "src/components/pages/Albums",
    "module_name": "AlbumFolders.js",
    "method_name": "getFolderData",
    "input_params": [
      {
        "type": "object",
        "name": "folderData",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function processes data retrieved from a specific folder, retrieves image URLs from an API, and updates the folder state with newly formed objects that include images with their corresponding URLs and details.",
    "inner_function_calls": [
      {
        "name": "ApiRoot.getImages",
        "import_path": "@/src/api/root/Image"
      }
    ],
    "output": {
      "type": "void",
      "description": "No direct output, but modifies the component's state to hold updated folder data."
    }
  },
  {
    "folder_path": "src/components/pages/Albums",
    "module_name": "AlbumFolders.js",
    "method_name": "getDefaultFolderId",
    "input_params": [],
    "logic": "This function determines and sets the default folder ID by searching through the gallery's folder list for a specific name, and updates the state accordingly.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "No direct output, but updates the state with the default folder ID for the gallery."
    }
  },
  {
    "folder_path": "src/components/pages/Albums",
    "module_name": "AlbumFolders.js",
    "method_name": "nextImageUrl",
    "input_params": [
      {
        "type": "string",
        "name": "src",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "number",
        "name": "size",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Constructs a URL for an image by appending query parameters that specify the desired dimensions, adhering to Next.js's image optimization URLs.",
    "inner_function_calls": [],
    "output": {
      "type": "string",
      "description": "Returns a URL string for an image with specified size parameters for Next.js image optimization."
    }
  },
  {
    "folder_path": "src/components/pages/Albums",
    "module_name": "AlbumFolders.js",
    "method_name": "handleOpenLightbox",
    "input_params": [
      {
        "type": "string",
        "name": "imageUrl",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Opens a lightbox for the image specified by the provided URL, and sets the currently selected image index in state.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "No direct output, but updates the state to show the lightbox with the selected image."
    }
  },
  {
    "folder_path": "src/components/pages/Albums",
    "module_name": "AlbumFolders.js",
    "method_name": "handleOpenConfirm",
    "input_params": [
      {
        "type": "number",
        "name": "currentIndex",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Sets the confirmation dialog to open for a specific image index, preparing for a deletion action.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "No direct output, but changes state to open confirm dialog."
    }
  },
  {
    "folder_path": "src/components/pages/Albums",
    "module_name": "AlbumFolders.js",
    "method_name": "handleCloseLightbox",
    "input_params": [],
    "logic": "Closes the currently open lightbox by resetting the selected image index in state.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "No direct output, but updates the state to close the image lightbox."
    }
  },
  {
    "folder_path": "src/components/pages/Albums",
    "module_name": "AlbumFolders.js",
    "method_name": "handleDownloadImage",
    "input_params": [
      {
        "type": "object",
        "name": "currentIndex",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Initiates downloading of an image by constructing a download URL based on the currently selected image index, redirecting the browser to that URL.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "Triggers a download action but no direct output is returned."
    }
  },
  {
    "folder_path": "src/components/pages/Albums",
    "module_name": "AlbumFolders.js",
    "method_name": "handleCloseConfirm",
    "input_params": [],
    "logic": "Closes the confirmation dialog by resetting the state variable associated with its visibility.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "No direct output, but modifies the state to close the deletion confirmation dialog."
    }
  },
  {
    "folder_path": "src/components/pages/Albums",
    "module_name": "AlbumFolders.js",
    "method_name": "handleDeleteImage",
    "input_params": [],
    "logic": "Handles the deletion of an image from the gallery by calling the respective delete mutation, and provides feedback through a snackbar notification upon success.",
    "inner_function_calls": [
      {
        "name": "deleteImage",
        "import_path": "@src/redux/slices"
      }
    ],
    "output": {
      "type": "void",
      "description": "Attempts to delete and provides user feedback on success but has no direct output."
    }
  },
  {
    "folder_path": "src/components/pages/Albums",
    "module_name": "AlbumFolders.js",
    "method_name": "GalleryItem",
    "input_params": [
      {
        "type": "object",
        "name": "props",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "The GalleryItem component displays a single album folder's information, including title and cover image, and provides functionalities to delete or edit the folder through popovers and confirmation dialogs.",
    "inner_function_calls": [
      {
        "name": "useTheme",
        "import_path": "@mui/material/styles"
      },
      {
        "name": "useRouter",
        "import_path": "next/navigation"
      },
      {
        "name": "enqueueSnackbar",
        "import_path": "@src/components/customStyle/customMUI/snackbar"
      },
      {
        "name": "handleOpenConfirm",
        "import_path": "internal"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "Returns a card component representing a folder in the gallery, complete with image and folder actions."
    }
  },
  {
    "folder_path": "src/components/pages/Albums",
    "module_name": "AlbumFolders.js",
    "method_name": "handleDelete",
    "input_params": [],
    "logic": "Executes the deletion of a folder using a mutation and displays a notification indicating the result of the action.",
    "inner_function_calls": [
      {
        "name": "deleteFolder",
        "import_path": "@src/redux/slices"
      },
      {
        "name": "enqueueSnackbar",
        "import_path": "@src/components/customStyle/customMUI/snackbar"
      },
      {
        "name": "handleCloseConfirm",
        "import_path": "internal"
      }
    ],
    "output": {
      "type": "void",
      "description": "Performs the delete action and provides feedback through a snackbar, but has no direct output."
    }
  },
  {
    "folder_path": "src/components/pages/Albums",
    "module_name": "AlbumSearch.js",
    "method_name": "AlbumSearch",
    "input_params": [
      {
        "type": "object",
        "name": "props",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "array",
        "name": "props.albumData",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "function",
        "name": "props.setAlbumData",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "array",
        "name": "props.albumDataFilter",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "props.selectedSortBy",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This is a React functional component that manages album search functionality in a user interface. It utilizes hooks (useState, useEffect) for state management and side effects, specifically filtering and sorting albums based on user input. The component communicates with Next.js routing to update the URL based on the search query.",
    "inner_function_calls": [
      {
        "name": "useRouter",
        "import_path": "next/navigation"
      },
      {
        "name": "useSearchParams",
        "import_path": "next/navigation"
      },
      {
        "name": "setUpSortAlbums",
        "import_path": "null"
      }
    ],
    "output": {
      "type": "jsx",
      "description": "This component returns a JSX element containing a text input field for searching albums, incorporating the Material-UI TextField component."
    }
  },
  {
    "folder_path": "src/components/pages/Albums",
    "module_name": "AlbumSearch.js",
    "method_name": "setUpSortAlbums",
    "input_params": [
      {
        "type": "array",
        "name": "filteredAlbums",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This asynchronous function sorts the provided albums using a utility function and updates the main album data state accordingly. It handles errors that may occur during the sorting process, ensuring that the state is only updated with sorted albums if available.",
    "inner_function_calls": [
      {
        "name": "getSortAlbums",
        "import_path": "@/src/utils/functions"
      }
    ],
    "output": {
      "type": "void",
      "description": "This function does not return anything but modifies the state through the setAlbumData function."
    }
  },
  {
    "folder_path": "src/components/pages/Albums",
    "module_name": "AlbumSort.js",
    "method_name": "renderLabel",
    "input_params": [
      {
        "type": "string",
        "name": "label",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Returns a corresponding string for a given label from the predefined options for album sorting.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An object containing the human-readable label for a specific sorting option."
    }
  },
  {
    "folder_path": "src/components/pages/Albums",
    "module_name": "AlbumSort.js",
    "method_name": "handleOpenPopover",
    "input_params": [
      {
        "type": "object",
        "name": "event",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Sets the current target element for the popover to be opened based on the event triggered.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "Does not return anything; it updates the state to indicate that the popover should be open."
    }
  },
  {
    "folder_path": "src/components/pages/Albums",
    "module_name": "AlbumSort.js",
    "method_name": "handleClosePopover",
    "input_params": [],
    "logic": "Resets the state to close the popover.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "Does not return anything; it updates the state to indicate that the popover should be closed."
    }
  },
  {
    "folder_path": "src/components/pages/Albums",
    "module_name": "AlbumSort.js",
    "method_name": "setUpSortAlbums",
    "input_params": [
      {
        "type": "string",
        "name": "selectedSortBy",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Asynchronously sorts the albums based on the selected sort option and updates the album data state accordingly.",
    "inner_function_calls": [
      {
        "name": "getSortAlbums",
        "import_path": "@/src/utils/functions"
      }
    ],
    "output": {
      "type": "void",
      "description": "Does not return anything but updates the state with sorted album data or logs an error."
    }
  },
  {
    "folder_path": "src/components/pages/Albums",
    "module_name": "AlbumSort.js",
    "method_name": "AlbumSort",
    "input_params": [
      {
        "type": "function",
        "name": "setAlbumData",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "array",
        "name": "albumData",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "function",
        "name": "setSelectedSortBy",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "The main component function that renders the sorting options and manages the state related to sorting albums.",
    "inner_function_calls": [
      {
        "name": "useForm",
        "import_path": "react-hook-form"
      },
      {
        "name": "useState",
        "import_path": "react"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "Returns a JSX element representing the sorting interface including buttons and a popover."
    }
  },
  {
    "folder_path": "src/components/pages/Albums",
    "module_name": "CoverImage.js",
    "method_name": "ImageCover",
    "input_params": [
      {
        "type": "string",
        "name": "name",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "cover",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "boolean",
        "name": "profile",
        "is_required": "",
        "optional_value": "true"
      },
      {
        "type": "any",
        "name": "logo",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "any",
        "name": "albumId",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "any",
        "name": "owner",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "any",
        "name": "email",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This is the main functional component for rendering a cover image with an optional avatar upload feature for a user's profile. It utilizes Material-UI for styling and UI elements, integrates with React Hook Form for managing form state, and handles image uploads via an avatar component or displays a logo depending on the user status. The component also implements cropping of images before upload and manages various piece states for the cropping UI and image edits.",
    "inner_function_calls": [
      {
        "name": "uploadCropImage",
        "import_path": ""
      },
      {
        "name": "useEffect",
        "import_path": "react"
      },
      {
        "name": "methods.setValue",
        "import_path": "react-hook-form"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "Renders a styled cover image and avatar component, allowing users to update their avatar if they are the owner of the image."
    }
  },
  {
    "folder_path": "src/components/pages/Albums",
    "module_name": "CoverImage.js",
    "method_name": "uploadCropImage",
    "input_params": [
      {
        "type": "object",
        "name": "croppedImage",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This asynchronous function uploads the cropped image to the server. It creates a preview URL for the cropped image, sets the value in the form, and updates the associated album if upload is successful by using a Redux mutation to manage state changes.",
    "inner_function_calls": [
      {
        "name": "uploadImages",
        "import_path": "@/src/utils/uploadImages"
      },
      {
        "name": "updateAlbum",
        "import_path": "@src/redux/slices"
      },
      {
        "name": "enqueueSnackbar",
        "import_path": "../../customStyle/customMUI/snackbar"
      }
    ],
    "output": {
      "type": "Promise<void>",
      "description": "Does not return a value; it handles side effects such as uploading images and updating the album state."
    }
  },
  {
    "folder_path": "src/components/pages/Albums",
    "module_name": "CoverImage.js",
    "method_name": "handleDrop",
    "input_params": [
      {
        "type": "Array<File>",
        "name": "acceptedFiles",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function handles the file drop event for the image upload. It takes accepted files, creates a preview URL for the first file, sets the selected file state, and initiates the cropping interface if there's a valid file.",
    "inner_function_calls": [],
    "output": {
      "type": "Promise<void>",
      "description": "Does not return a value; it primarily sets state for managing image preview and crop functionality."
    }
  },
  {
    "folder_path": "src/components/pages/Albums",
    "module_name": "CreateFolder.js",
    "method_name": "CreateFolder",
    "input_params": [
      {
        "type": "number",
        "name": "albumId",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "number",
        "name": "ratio",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This is a functional React component that allows users to create a new folder within an album. It uses hooks to manage loading states and perform asynchronous operations, adhering to React and Next.js conventions.",
    "inner_function_calls": [
      {
        "name": "useTheme",
        "import_path": "@mui/material"
      },
      {
        "name": "useCreateFolderMutation",
        "import_path": "@/src/redux/slices"
      },
      {
        "name": "useRouter",
        "import_path": "next/navigation"
      },
      {
        "name": "setLoading",
        "import_path": "react"
      },
      {
        "name": "createFolder",
        "import_path": "@/src/redux/slices"
      },
      {
        "name": "router.push",
        "import_path": "next/navigation"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "This component returns JSX markup representing the UI for creating a folder. It displays a clickable card that initiates the folder creation process and conditions rendering based on the loading state."
    }
  },
  {
    "folder_path": "src/components/pages/Albums",
    "module_name": "CreateFolder.js",
    "method_name": "handleCreateFolder",
    "input_params": [],
    "logic": "This method handles the asynchronous folder creation logic. It updates the loading state, sends a create folder request through the mutation hook, and redirects using the router upon successful folder creation.",
    "inner_function_calls": [
      {
        "name": "setLoading",
        "import_path": "react"
      },
      {
        "name": "createFolder",
        "import_path": "@/src/redux/slices"
      },
      {
        "name": "router.push",
        "import_path": "next/navigation"
      }
    ],
    "output": {
      "type": "Promise",
      "description": "This function does not return a value but represents the asynchronous operation of creating a folder."
    }
  },
  {
    "folder_path": "src/components/pages/Albums",
    "module_name": "FolderImages.js",
    "method_name": "FolderImages",
    "input_params": [
      {
        "type": "string",
        "name": "folderId",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "boolean",
        "name": "isLoading",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "gallery",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "owner",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "albumId",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "user",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "boolean",
        "name": "tabNon",
        "is_required": "",
        "optional_value": "false"
      },
      {
        "type": "function",
        "name": "handleOpenLightbox",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "filteredImagesData",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "The FolderImages component is responsible for rendering a gallery of images organized by folders. It uses state to manage tab selection and loading status, integrates with Redux to fetch filtered folder images, and utilizes Material-UI components for layout and styles. The component also uses media queries to determine the number of columns for images based on the screen size, providing a responsive design. It adheres to Next.js conventions by utilizing React hooks and functional components.",
    "inner_function_calls": [
      {
        "name": "useLazyGetFilteredFolderImagesQuery",
        "import_path": "@/src/redux/slices"
      },
      {
        "name": "useTheme",
        "import_path": "@mui/material"
      },
      {
        "name": "useMediaQuery",
        "import_path": "@mui/material"
      },
      {
        "name": "setTabValueData",
        "import_path": ""
      },
      {
        "name": "getFilteredImageData",
        "import_path": ""
      },
      {
        "name": "setFilteredData",
        "import_path": ""
      },
      {
        "name": "heroWrapper",
        "import_path": "./style/AlbumsMain.styled"
      },
      {
        "name": "NoFolderIcon",
        "import_path": "./style/AlbumsMain.styled"
      },
      {
        "name": "HeroTitle",
        "import_path": "./style/AlbumsMain.styled"
      },
      {
        "name": "HeroDescription",
        "import_path": "./style/AlbumsMain.styled"
      },
      {
        "name": "getImages",
        "import_path": "ApiRoot"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "The output is the rendered JSX of the FolderImages component, which contains a user interface for displaying images in a gallery format, handling loading states, and user interactions."
    }
  },
  {
    "folder_path": "src/components/pages/Albums",
    "module_name": "FolderImages.js",
    "method_name": "setTabValueData",
    "input_params": [],
    "logic": "This function initializes tabValue based on the first available gallery image if no tabValue is currently set. It checks the existence of images in the gallery and sets the state appropriately.",
    "inner_function_calls": [],
    "output": {
      "type": "Promise",
      "description": "This function does not return a value but updates state variables used in the component."
    }
  },
  {
    "folder_path": "src/components/pages/Albums",
    "module_name": "FolderImages.js",
    "method_name": "getFilteredImageData",
    "input_params": [
      {
        "type": "string",
        "name": "tabValue",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This async function retrieves filtered images based on the provided tabValue. It updates the filteredData state with image URLs after a successful API call, facilitating the display of corresponding images in the UI.",
    "inner_function_calls": [
      {
        "name": "setFilteredData",
        "import_path": ""
      },
      {
        "name": "getFilteredImage",
        "import_path": "@/src/redux/slices"
      },
      {
        "name": "ApiRoot.getImages",
        "import_path": "ApiRoot"
      }
    ],
    "output": {
      "type": "Promise",
      "description": "This function does not return a value but updates the component state with fetched image data."
    }
  },
  {
    "folder_path": "src/components/pages/Albums",
    "module_name": "FolderItem.js",
    "method_name": "Group",
    "input_params": [
      {
        "type": "array",
        "name": "gallery",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "albumId",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "folderId",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "boolean",
        "name": "isLoading",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "owner",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "user",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "userData",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "The 'Group' component represents a gallery structure, allowing users to upload, view, download, and delete images. It incorporates state management for handling images and upload progress, as well as handling user actions through various methods. The component utilizes hooks and external libraries to manage state and effects, leveraging Next.js conventions for routing and API interactions.",
    "inner_function_calls": [
      {
        "name": "useTranslations",
        "import_path": "next-intl"
      },
      {
        "name": "useUploadFolderImagesMutation",
        "import_path": "@/src/redux/slices"
      },
      {
        "name": "useCreateRekognitionImageMutation",
        "import_path": "@/src/redux/slices"
      },
      {
        "name": "useDeleteFolderImageMutation",
        "import_path": "@/src/redux/slices"
      },
      {
        "name": "useSnackbar",
        "import_path": "@src/components/customStyle/customMUI/snackbar"
      },
      {
        "name": "handleOpenLightbox",
        "import_path": "local"
      },
      {
        "name": "handleCloseLightbox",
        "import_path": "local"
      },
      {
        "name": "handleOpenUploadFile",
        "import_path": "local"
      },
      {
        "name": "handleCloseUploadFile",
        "import_path": "local"
      },
      {
        "name": "handleProgress",
        "import_path": "local"
      },
      {
        "name": "uploadImages",
        "import_path": "@/src/utils/uploadImages"
      },
      {
        "name": "handleDeleteImage",
        "import_path": "local"
      },
      {
        "name": "handleDownloadImage",
        "import_path": "local"
      },
      {
        "name": "handleOpenConfirm",
        "import_path": "local"
      },
      {
        "name": "handleCloseConfirm",
        "import_path": "local"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "The component renders a structured view of the image gallery, encapsulating functionality for image management and providing user feedback through various dialogs and notifications."
    }
  },
  {
    "folder_path": "src/components/pages/Albums",
    "module_name": "FolderItem.js",
    "method_name": "handleOpenLightbox",
    "input_params": [
      {
        "type": "string",
        "name": "imageUrl",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function is responsible for setting the state to open a lightbox view based on the selected image URL, enabling users to view images in a focused manner.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "The function updates the selected image index state to display the lightbox."
    }
  },
  {
    "folder_path": "src/components/pages/Albums",
    "module_name": "FolderItem.js",
    "method_name": "handleCloseLightbox",
    "input_params": [],
    "logic": "Handles closing the lightbox by resetting the selected image index back to an initial state.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "Resets the state affecting the display of the lightbox component in the UI."
    }
  },
  {
    "folder_path": "src/components/pages/Albums",
    "module_name": "FolderItem.js",
    "method_name": "handleOpenUploadFile",
    "input_params": [],
    "logic": "Sets the 'openUploadFile' state to true, triggering the display of the upload file dialog.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "Changes the state to show the Upload File dialog."
    }
  },
  {
    "folder_path": "src/components/pages/Albums",
    "module_name": "FolderItem.js",
    "method_name": "handleCloseUploadFile",
    "input_params": [],
    "logic": "Sets the 'openUploadFile' state to false, closing the upload file dialog when called.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "Changes the state to hide the Upload File dialog."
    }
  },
  {
    "folder_path": "src/components/pages/Albums",
    "module_name": "FolderItem.js",
    "method_name": "handleProgress",
    "input_params": [
      {
        "type": "object",
        "name": "progressEvent",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "fileName",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Calculates the upload progress percentage based on the loaded and total bytes from the progress event, then updates the progress state for individual files being uploaded.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "Updates the progress state, allowing the UI to reflect the ongoing upload progress for each file."
    }
  },
  {
    "folder_path": "src/components/pages/Albums",
    "module_name": "FolderItem.js",
    "method_name": "handleUpload",
    "input_params": [
      {
        "type": "array",
        "name": "files",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Handles the uploading of multiple files by first checking their presence, then processing the uploads, updating state variables and making necessary API calls for folder image uploads and object detection integration.",
    "inner_function_calls": [
      {
        "name": "uploadImages",
        "import_path": "@/src/utils/uploadImages"
      },
      {
        "name": "uploadFolderImage",
        "import_path": "local"
      },
      {
        "name": "createRekognitionImage",
        "import_path": "local"
      }
    ],
    "output": {
      "type": "void",
      "description": "Performs the actual file uploads while managing states related to loading and progress."
    }
  },
  {
    "folder_path": "src/components/pages/Albums",
    "module_name": "FolderItem.js",
    "method_name": "handleDeleteImage",
    "input_params": [],
    "logic": "Handles the deletion of the currently selected image by making an API call to delete the image and resetting state variables upon success.",
    "inner_function_calls": [
      {
        "name": "deleteImage",
        "import_path": "local"
      }
    ],
    "output": {
      "type": "void",
      "description": "Executes deletion of an image with user feedback upon success or failure."
    }
  },
  {
    "folder_path": "src/components/pages/Albums",
    "module_name": "FolderItem.js",
    "method_name": "handleDownloadImage",
    "input_params": [
      {
        "type": "object",
        "name": "currentIndex",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Triggers the download of an image based on its index, verifying the URL and initiating a fetch call to the API that serves the file.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "Handles downloading the image, navigating to the download URL if successful."
    }
  },
  {
    "folder_path": "src/components/pages/Albums",
    "module_name": "FolderItem.js",
    "method_name": "handleOpenConfirm",
    "input_params": [
      {
        "type": "object",
        "name": "currentIndex",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Sets the confirmation dialog state to open for image deletion, also closes the lightbox to ensure a clean UI during confirmation.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "Opens the confirmation dialog by setting the relevant state."
    }
  },
  {
    "folder_path": "src/components/pages/Albums",
    "module_name": "FolderItem.js",
    "method_name": "handleCloseConfirm",
    "input_params": [],
    "logic": "Handles closing the confirmation dialog for actions such as deletion.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "Resets the confirmation dialog state to close."
    }
  },
  {
    "folder_path": "src/components/pages/Albums",
    "module_name": "ProcessWidget.js",
    "method_name": "ProcessWidget",
    "input_params": [
      {
        "type": "object",
        "name": "props",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "The ProcessWidget component serves as an interactive UI element that allows users to process images associated with profiles or albums. It maintains local state for the popover's visibility and uses Redux for state management and API calls related to image processing.",
    "inner_function_calls": [
      {
        "name": "useState",
        "import_path": "react"
      },
      {
        "name": "useDispatch",
        "import_path": "react-redux"
      },
      {
        "name": "useSelector",
        "import_path": "react-redux"
      },
      {
        "name": "useProcessProfileImagesMutation",
        "import_path": "@/src/redux/slices/aiLayerSlice"
      },
      {
        "name": "useProcessAlbumImagesMutation",
        "import_path": "@/src/redux/slices/aiLayerSlice"
      },
      {
        "name": "setupToken",
        "import_path": "@/src/utils/functions"
      },
      {
        "name": "fetchAuthSession",
        "import_path": "aws-amplify/auth"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "Renders the interactive elements for processing images including the badge that triggers the popover menu with options to process either profile or album images."
    }
  },
  {
    "folder_path": "src/components/pages/Albums",
    "module_name": "ProcessWidget.js",
    "method_name": "handleOpenPopover",
    "input_params": [
      {
        "type": "object",
        "name": "event",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Event handler that sets the popover's visibility state, determining where it appears on the screen when a user interacts with the widget.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "The function does not return a value; it updates the local state to show the popover."
    }
  },
  {
    "folder_path": "src/components/pages/Albums",
    "module_name": "ProcessWidget.js",
    "method_name": "handleClosePopover",
    "input_params": [],
    "logic": "Closes the popover by resetting the state that determines its visibility.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "The function does not return a value; it updates the local state to hide the popover."
    }
  },
  {
    "folder_path": "src/components/pages/Albums",
    "module_name": "ProcessWidget.js",
    "method_name": "handleChangeProcess",
    "input_params": [
      {
        "type": "string",
        "name": "processValue",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Handles the processing of images based on the type specified ('profile' or 'album'). It makes API requests to process the corresponding images and closes the popover after a timeout.",
    "inner_function_calls": [
      {
        "name": "setupToken",
        "import_path": "@/src/utils/functions"
      },
      {
        "name": "fetch",
        "import_path": "global"
      }
    ],
    "output": {
      "type": "void",
      "description": "The function does not return a value; instead, it triggers network requests to process images based on user selection."
    }
  },
  {
    "folder_path": "src/components/pages/Albums",
    "module_name": "ShareAlbums.js",
    "method_name": "ShareAlbums",
    "input_params": [
      {
        "type": "boolean",
        "name": "open",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "function",
        "name": "setOpen",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "id",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "email",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "action",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "folderId",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "array",
        "name": "shared",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This is a React functional component that manages the sharing of albums via a modal. It utilizes Formik for form state management, Yup for validation, and various Material-UI components for UI elements. The component handles the submission of email addresses for sharing and provides functionality to copy sharing links to the clipboard.",
    "inner_function_calls": [
      {
        "name": "handleClose",
        "import_path": ""
      },
      {
        "name": "useTranslations",
        "import_path": "next-intl"
      },
      {
        "name": "useMediaQuery",
        "import_path": "@mui/material"
      },
      {
        "name": "useShareAlbumMutation",
        "import_path": "@/src/redux/slices"
      },
      {
        "name": "enqueueSnackbar",
        "import_path": "@src/components/customStyle/customMUI/snackbar"
      },
      {
        "name": "handleSubmit",
        "import_path": ""
      },
      {
        "name": "generateLink",
        "import_path": "@/src/utils/functions"
      },
      {
        "name": "handleDeleteEmail",
        "import_path": ""
      },
      {
        "name": "MultiEmailInput",
        "import_path": ""
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "Renders a sharing modal for albums with form validation and clipboard functionalities."
    }
  },
  {
    "folder_path": "src/components/pages/Albums",
    "module_name": "ShareAlbums.js",
    "method_name": "handleClose",
    "input_params": [],
    "logic": "Handles the closing of the modal by setting its open state to false.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "Does not return any value. It is called to close the modal."
    }
  },
  {
    "folder_path": "src/components/pages/Albums",
    "module_name": "ShareAlbums.js",
    "method_name": "handleSubmit",
    "input_params": [
      {
        "type": "object",
        "name": "values",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Handles form submission, calling the shareAlbum mutation with the provided email addresses and album ID. Shows a notification upon successful sharing and closes the modal thereafter.",
    "inner_function_calls": [
      {
        "name": "shareAlbum",
        "import_path": "@src/redux/slices"
      },
      {
        "name": "handleClose",
        "import_path": ""
      },
      {
        "name": "enqueueSnackbar",
        "import_path": "@src/components/customStyle/customMUI/snackbar"
      }
    ],
    "output": {
      "type": "Promise<void>",
      "description": "Returns a Promise that resolves when the async submission logic is completed."
    }
  },
  {
    "folder_path": "src/components/pages/Albums",
    "module_name": "ShareAlbums.js",
    "method_name": "copyToClipboard",
    "input_params": [
      {
        "type": "string",
        "name": "type",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Generates a sharing link based on the provided type (guest or user), and then copies the generated URL to the clipboard. Utilizes a notification to inform the user of successful copying.",
    "inner_function_calls": [
      {
        "name": "generateLink",
        "import_path": "@/src/utils/functions"
      },
      {
        "name": "enqueueSnackbar",
        "import_path": "@src/components/customStyle/customMUI/snackbar"
      },
      {
        "name": "handleClose",
        "import_path": ""
      }
    ],
    "output": {
      "type": "Promise<void>",
      "description": "Returns a Promise that resolves when the copying to clipboard operation is complete."
    }
  },
  {
    "folder_path": "src/components/pages/Albums",
    "module_name": "ShareAlbums.js",
    "method_name": "fetchSuggestions",
    "input_params": [
      {
        "type": "string",
        "name": "key",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Fetches email suggestions based on input and updates the suggestions state.",
    "inner_function_calls": [],
    "output": {
      "type": "Promise<void>",
      "description": "Returns a Promise that resolves when the suggestions fetching is completed."
    }
  },
  {
    "folder_path": "src/components/pages/Albums",
    "module_name": "ShareAlbums.js",
    "method_name": "validateEmail",
    "input_params": [
      {
        "type": "string",
        "name": "email",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Validates an email address using Yup and returns true if valid, false otherwise.",
    "inner_function_calls": [],
    "output": {
      "type": "Promise<boolean>",
      "description": "Returns a Promise that resolves to a boolean indicating if the email is valid."
    }
  },
  {
    "folder_path": "src/components/pages/Albums",
    "module_name": "ShareAlbums.js",
    "method_name": "handleAddEmail",
    "input_params": [
      {
        "type": "object",
        "name": "e",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Handles adding an email to the form state when the user presses Enter. It validates the email and updates the state accordingly.",
    "inner_function_calls": [
      {
        "name": "validateEmail",
        "import_path": ""
      },
      {
        "name": "push",
        "import_path": ""
      }
    ],
    "output": {
      "type": "void",
      "description": "Does not return any value. It modifies the internal state of the component."
    }
  },
  {
    "folder_path": "src/components/pages/Albums",
    "module_name": "ShareAlbums.js",
    "method_name": "handleDeleteEmail",
    "input_params": [
      {
        "type": "number",
        "name": "index",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Removes an email from the array of emails state based on the provided index.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "Does not return any value. It updates the state by removing the specified email."
    }
  },
  {
    "folder_path": "src/components/pages/Albums",
    "module_name": "ShareAlbums.js",
    "method_name": "handleSuggestionClick",
    "input_params": [
      {
        "type": "string",
        "name": "suggestion",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Handles the logic for adding a clicked suggestion to the email input, validating it first.",
    "inner_function_calls": [
      {
        "name": "validateEmail",
        "import_path": ""
      },
      {
        "name": "push",
        "import_path": ""
      }
    ],
    "output": {
      "type": "void",
      "description": "Does not return any value. It updates the component's state."
    }
  },
  {
    "folder_path": "src/components/pages/Albums",
    "module_name": "UploadImages.js",
    "method_name": "UploadImages",
    "input_params": [
      {
        "type": "object",
        "name": "actionData",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "owner",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "action",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Main functional component that renders upload functionality for images. It manages states, handles file uploads, and provides feedback on the upload progress. Integrates with various redux hooks and other custom components, adhering to Next.js conventions.",
    "inner_function_calls": [
      {
        "name": "useForm",
        "import_path": "react-hook-form"
      },
      {
        "name": "useCreateRekognitionImageMutation",
        "import_path": "@/src/redux/slices"
      },
      {
        "name": "useUploadFolderImagesMutation",
        "import_path": "@/src/redux/slices"
      },
      {
        "name": "useLazyGetFolderQuery",
        "import_path": "@/src/redux/slices"
      },
      {
        "name": "useCreateFolderMutation",
        "import_path": "@/src/redux/slices"
      }
    ],
    "output": {
      "type": "JSX",
      "description": "Renders a form provider with avatar upload functionality and an optional progress portal."
    }
  },
  {
    "folder_path": "src/components/pages/Albums",
    "module_name": "UploadImages.js",
    "method_name": "handleDrop",
    "input_params": [
      {
        "type": "array",
        "name": "acceptedFiles",
        "is_required": "true",
        "optional_value": ""
      }
    ],
    "logic": "Processes files dropped onto the upload area by extracting and previewing them. It updates local state with new files and triggers the upload function.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "No output; updates state and triggers upload."
    }
  },
  {
    "folder_path": "src/components/pages/Albums",
    "module_name": "UploadImages.js",
    "method_name": "waitForFolderCreation",
    "input_params": [
      {
        "type": "string",
        "name": "folderId",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "boolean",
        "name": "isFolderCreating",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "boolean",
        "name": "folderCreatingLoading",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Polls for the completion of folder creation. Resolves when the folder is created or skips polling if conditions are met.",
    "inner_function_calls": [],
    "output": {
      "type": "Promise",
      "description": "Resolves once the folder creation process is completed."
    }
  },
  {
    "folder_path": "src/components/pages/Albums",
    "module_name": "UploadImages.js",
    "method_name": "uploadImage",
    "input_params": [
      {
        "type": "array",
        "name": "files",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Handles the logic to upload images, checks for missing data, processes files, creates default folders if needed, and manages the state of uploads and synchronization with backend services.",
    "inner_function_calls": [
      {
        "name": "waitForFolderCreation",
        "import_path": ""
      },
      {
        "name": "uploadImages",
        "import_path": "@/src/utils/uploadImages"
      },
      {
        "name": "uploadFolderImage",
        "import_path": "@/src/redux/slices"
      }
    ],
    "output": {
      "type": "void",
      "description": "Updates process states without a return value."
    }
  },
  {
    "folder_path": "src/components/pages/Albums",
    "module_name": "UploadImages.js",
    "method_name": "handleProgress",
    "input_params": [
      {
        "type": "object",
        "name": "progressEvent",
        "is_required": "true",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "fileName",
        "is_required": "true",
        "optional_value": ""
      }
    ],
    "logic": "Handles the progress updates during file uploads, updating the local state with the current progress percentage for each file.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "No direct output; updates upload progress in state."
    }
  },
  {
    "folder_path": "src/components/pages/Albums/style",
    "module_name": "AlbumCard.styled.js",
    "method_name": "AlbumCardMain",
    "input_params": [],
    "logic": "Defines a styled component using MUI's styled function, creating a Card component with centered text and a pointer cursor. This is used for UI representation within a Next.js application, providing a card layout for albums.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Card component."
    }
  },
  {
    "folder_path": "src/components/pages/Albums/style",
    "module_name": "AlbumCard.styled.js",
    "method_name": "AlbumCardSvgColor",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Creates a styled version of the SvgColor component with specific dimensions and positioning, adaptively using the provided theme's properties. This component is likely used to represent SVG graphics in the application's card layout.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled SvgColor component."
    }
  },
  {
    "folder_path": "src/components/pages/Albums/style",
    "module_name": "AlbumCard.styled.js",
    "method_name": "AlbumCardAvatar",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Defines a styled Avatar component from MUI with fixed dimensions and absolute positioning, aiming to present an icon or image relevant to the album card within the interface.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styled Avatar component."
    }
  },
  {
    "folder_path": "src/components/pages/Albums/style",
    "module_name": "AlbumFolders.styled.js",
    "method_name": "AlbumFoldersGridBox",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "true",
        "optional_value": ""
      }
    ],
    "logic": "Defines a styled grid layout specifically for album folders, adjusting the grid template columns based on the viewport size using Material-UI's theming system.",
    "inner_function_calls": [],
    "output": {
      "type": "component",
      "description": "Returns a styled Box component that organizes content into a responsive grid layout according to Material-UI conventions."
    }
  },
  {
    "folder_path": "src/components/pages/Albums/style",
    "module_name": "AlbumFolders.styled.js",
    "method_name": "AlbumFolderStack",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "true",
        "optional_value": ""
      }
    ],
    "logic": "Creates a styled Stack component that makes use of the bgBlur utility to apply background styling, positioning and spacing based on Material-UI's core theme.",
    "inner_function_calls": [
      {
        "name": "bgBlur",
        "import_path": "@src/utils/cssStyles"
      }
    ],
    "output": {
      "type": "component",
      "description": "Returns a styled Stack component designed for layout flexibility and visual styling within the context of album folders."
    }
  },
  {
    "folder_path": "src/components/pages/Albums/style",
    "module_name": "AlbumsMain.styled.js",
    "method_name": "AlbumGridBox",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Defines the grid layout for the album display with responsive column configuration based on screen size using Material-UI's styled API. This component is intended to enhance layout flexibility in the UI, following Next.js conventions with SSR compatibility.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box component from Material-UI that represents a grid container for albums."
    }
  },
  {
    "folder_path": "src/components/pages/Albums/style",
    "module_name": "AlbumsMain.styled.js",
    "method_name": "AlbumStack",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Creates a styled Stack component for organizing album items in a responsive manner, allowing for vertical or horizontal arrangement based on screen size. It maintains consistent margins and alignment, adhering to responsive design principles typical in Next.js applications.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Stack component from Material-UI used for stacking album-related components."
    }
  },
  {
    "folder_path": "src/components/pages/Albums/style",
    "module_name": "AlbumsMain.styled.js",
    "method_name": "HeroWrapper",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "margin",
        "is_required": "",
        "optional_value": "140px 0"
      }
    ],
    "logic": "Styles a Box component to serve as a wrapper for hero section elements (such as title and description), allowing custom margins while maintaining proper alignment and styling. This component leverages Next.js's responsiveness framework for better UI usability.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box component that serves as a wrapper for elements in the hero section."
    }
  },
  {
    "folder_path": "src/components/pages/Albums/style",
    "module_name": "AlbumsMain.styled.js",
    "method_name": "NoFolderIcon",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Creates a styled Icon component that includes specific margin styling using Material-UI's styled API, offering a visual representation for the 'No Folder' state in an album context. It follows the reusable component approach recommended in Next.js.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Icon component representing the 'No Folder' state."
    }
  },
  {
    "folder_path": "src/components/pages/Albums/style",
    "module_name": "AlbumsMain.styled.js",
    "method_name": "LottieWrapper",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Designs a styled Lottie component with a fixed width for displaying animations. It allows for dynamic loading of animations, consistent with Next.js's SSR capabilities.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Lottie component for dynamic animation rendering."
    }
  },
  {
    "folder_path": "src/components/pages/Albums/style",
    "module_name": "AlbumsMain.styled.js",
    "method_name": "HeroTitle",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Defines the styling for the Hero title with specific font weight and size, allowing for prominent display in the hero section. It adheres to the design spacing principles common in Next.js pages.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box component specifically for the title in the hero section."
    }
  },
  {
    "folder_path": "src/components/pages/Albums/style",
    "module_name": "AlbumsMain.styled.js",
    "method_name": "HeroDescription",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Creates a styled Box component for the hero section's description, utilizing theme colors and font sizes to ensure consistent styling across the application. This is essential for conveying message clarity in Next.js UI designs.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A styled Box component for the description in the hero section."
    }
  },
  {
    "folder_path": "src/components/pages/Albums/style",
    "module_name": "CoverImage.styled.js",
    "method_name": "CoverImageAvatar",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This styled component creates a custom avatar with specific styles applied based on the MUI theme. It is used within the context of Next.js to follow best practices with styled components.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "The styled component that represents the custom avatar with specific styles applied to it."
    }
  },
  {
    "folder_path": "src/components/pages/Albums/style",
    "module_name": "CoverImage.styled.js",
    "method_name": "CoverUploadImageAvatar",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This styled component creates a custom avatar for file uploads with styles that adapt based on the MUI theme, following Next.js's approach to component styling.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "The styled component functioning as a file upload avatar with specific styles based on the theme."
    }
  },
  {
    "folder_path": "src/components/progress",
    "module_name": "UploadFilesPortal.js",
    "method_name": "UploadFilePortal",
    "input_params": [
      {
        "type": "function",
        "name": "onCloseCompose",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "array",
        "name": "files",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "progress",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function component creates a responsive file upload portal UI, allowing users to upload files and view their progress. It utilizes MUI components for styling and layout, state management for handling dropdown visibility and fullscreen toggling, and translation support from the next-intl library.",
    "inner_function_calls": [
      {
        "name": "useResponsive",
        "import_path": "@/src/hooks/useResponsive"
      },
      {
        "name": "setState",
        "import_path": "react"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "This component returns a JSX element representing the upload file portal UI, which includes upload status, file thumbnails, and progress indicators."
    }
  },
  {
    "folder_path": "src/components/progress",
    "module_name": "UploadFilesPortal.js",
    "method_name": "toggleDropdown",
    "input_params": [],
    "logic": "This helper function toggles the visibility of a dropdown that shows the list of files. It modifies the state that dictates whether the dropdown is open or closed.",
    "inner_function_calls": [
      {
        "name": "setIsDropdownOpen",
        "import_path": "react"
      }
    ],
    "output": {
      "type": "void",
      "description": "This function does not return a value; it updates the component state to reflect the new dropdown visibility."
    }
  },
  {
    "folder_path": "src/components/progress",
    "module_name": "index.js",
    "method_name": "LinearWithValueLabel",
    "input_params": [],
    "logic": "This is a React functional component that most likely represents a linear progress bar with accompanying label values, possibly indicating progress percentages or other metrics. It is imported from another module and exported as the default export for this module.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "The output represents a React component that will be rendered within a Next.js page or another component."
    }
  },
  {
    "folder_path": "src/components/progress",
    "module_name": "linearProgressWithLabel.js",
    "method_name": "LinearProgressWithLabel",
    "input_params": [
      {
        "type": "object",
        "name": "props",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function component renders a linear progress indicator with a label showing the progress value. It uses Material-UI components to style the layout and display the percentage of progress based on the received props.",
    "inner_function_calls": [
      {
        "name": "LinearProgress",
        "import_path": "@mui/material/LinearProgress"
      },
      {
        "name": "Typography",
        "import_path": "@mui/material/Typography"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns a styled component that shows the progress bar and a textual representation of the progress percentage."
    }
  },
  {
    "folder_path": "src/components/progress",
    "module_name": "linearProgressWithLabel.js",
    "method_name": "LinearWithValueLabel",
    "input_params": [
      {
        "type": "number",
        "name": "progress",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "props",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function component serves as a wrapper for the LinearProgressWithLabel, passing the progress value along with any additional props. It provides a clear separation of concerns in the UI structure, allowing for better reusability of the progress label and progress bar displayed together.",
    "inner_function_calls": [
      {
        "name": "LinearProgressWithLabel",
        "import_path": ""
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns a Box that contains a LinearProgressWithLabel component, properly structured to allow for additional props to be passed through."
    }
  },
  {
    "folder_path": "src/components/skeleton",
    "module_name": "AlbumCoverImgSkeleton.js",
    "method_name": "AlbumCoverImgSkeleton",
    "input_params": [],
    "logic": "This function is a React functional component that renders a skeleton placeholder for an album cover image using MUI's Card and Skeleton components. It serves as a loading indicator while the actual album cover is being fetched or rendered.",
    "inner_function_calls": [],
    "output": {
      "type": "JSX.Element",
      "description": "It returns a JSX element representing a card with a skeleton that mimics an album cover image."
    }
  },
  {
    "folder_path": "src/components/skeleton",
    "module_name": "AlbumGroupCardSkeleton.js",
    "method_name": "AlbumGroupCardSkeleton",
    "input_params": [],
    "logic": "This functional component serves as a skeleton loader for an album group card, providing a visual placeholder while content is being loaded. It utilizes Material-UI components such as Card, Stack, and Skeleton to create a responsive and visually appealing loading interface.",
    "inner_function_calls": [],
    "output": {
      "type": "JSX.Element",
      "description": "Renders a card skeleton layout, mimicking the structure of the actual album group card while its content is loading."
    }
  },
  {
    "folder_path": "src/components/skeleton",
    "module_name": "FolderImageSkeleton.js",
    "method_name": "FolderImageSkeleton",
    "input_params": [],
    "logic": "This functional component serves as a placeholder for an image in a gallery or image list layout, utilizing Material UI's `ImageListItem` and `Skeleton` components. It represents the loading state of an image, providing visual feedback to users when the actual image has not yet loaded, which aligns with practices for improving UX in a Next.js application.",
    "inner_function_calls": [],
    "output": {
      "type": "JSX.Element",
      "description": "The component returns a JSX element that visually represents a rectangular skeleton loader for image content, intended to be used in a responsive layout in Next.js."
    }
  },
  {
    "folder_path": "src/components/skeleton",
    "module_name": "PeopleFacesSkeleton.js",
    "method_name": "PeopleFacesSkeleton",
    "input_params": [],
    "logic": "Renders a skeleton loading placeholder using Material-UI's Skeleton component. This component is useful in Next.js for improving the user experience during data loading by providing a visual placeholder in the UI.",
    "inner_function_calls": [
      {
        "name": "Skeleton",
        "import_path": "@mui/material"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "Returns a JSX element representing the loading skeleton, which can be used within a React component's render output."
    }
  },
  {
    "folder_path": "src/components/skeleton",
    "module_name": "albumCardSkeleton.js",
    "method_name": "AlbumCardSkeleton",
    "input_params": [],
    "logic": "This functional component renders a skeleton UI for an album card, providing placeholder content while data is loading. It follows Next.js conventions by leveraging React functional components and material-ui components for styling and layout.",
    "inner_function_calls": [
      {
        "name": "SvgColor",
        "import_path": "../customStyle/customMUI/svg-color"
      },
      {
        "name": "Skeleton",
        "import_path": "@mui/material"
      },
      {
        "name": "AlbumCardCoverImgSkeleton",
        "import_path": ""
      },
      {
        "name": "IconButton",
        "import_path": "@mui/material"
      },
      {
        "name": "Divider",
        "import_path": "@mui/material"
      },
      {
        "name": "Box",
        "import_path": "@mui/material"
      },
      {
        "name": "Typography",
        "import_path": "@mui/material"
      },
      {
        "name": "Stack",
        "import_path": "@mui/material"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "Returns a JSX Element representing a skeleton layout of an album card, allowing for a visually appealing loading state in a Next.js application."
    }
  },
  {
    "folder_path": "src/components/skeleton",
    "module_name": "albumCardSkeleton.js",
    "method_name": "AlbumCardCoverImgSkeleton",
    "input_params": [],
    "logic": "This functional component renders a rectangular skeleton placeholder for an album cover image, maintaining a specified aspect ratio. It's part of the UI for displaying a content-loading state in a Next.js project.",
    "inner_function_calls": [
      {
        "name": "Skeleton",
        "import_path": "@mui/material"
      },
      {
        "name": "Image",
        "import_path": "../customStyle/customMUI/image"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "Returns a JSX Element that serves as a placeholder for the album cover image, indicating loading state and preserving layout in the parent component."
    }
  },
  {
    "folder_path": "src/config",
    "module_name": "appConfig.js",
    "method_name": "appConfig",
    "input_params": [
      {
        "type": "object",
        "name": "appConfig",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Defines a configuration object for application locales including available locales, the default locale, and how locale prefixes should be handled. This configuration can be utilized throughout a Next.js application to manage localized content and provide language options.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An object that holds the application's localization configuration, which can be imported and used in different parts of the Next.js application for internationalization purposes."
    }
  },
  {
    "folder_path": "src/config",
    "module_name": "config",
    "method_name": "HEADER",
    "input_params": [],
    "logic": "This is a constant export that defines fixed numerical values used for header heights in a responsive design context. It organizes the layout dimensions for mobile and desktop views, which is useful for positioning elements consistently across different screen sizes in a Next.js application.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An object containing fixed numerical values for header heights, providing a standard for layout in various devices."
    }
  },
  {
    "folder_path": "src/config",
    "module_name": "config",
    "method_name": "NAV",
    "input_params": [],
    "logic": "This is a constant export that defines various dimensions related to the navigation layout. It consists of various width and height settings for dashboard navigation items, which plays a crucial role in maintaining a consistent navigation experience throughout the Next.js application.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An object containing fixed numerical values for navigation dimensions, facilitating uniformity in positioning and sizing navigation elements."
    }
  },
  {
    "folder_path": "src/config",
    "module_name": "config",
    "method_name": "ICON",
    "input_params": [],
    "logic": "This constant export defines the sizes used for icons in the navigation, ensuring that icons are visually balanced with the navigation items. It adheres to standard icon sizes that are common in user interfaces of Next.js applications, helping maintain aesthetic consistency.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An object containing fixed values representing the sizes of various icons, which are vital for UI consistency."
    }
  },
  {
    "folder_path": "src/config",
    "module_name": "config",
    "method_name": "imageSizes",
    "input_params": [],
    "logic": "This is an array export that lists various sizes for images, facilitating responsive image rendering. In the context of Next.js, it supports optimal image loading practices by accommodating different devices and screen resolutions.",
    "inner_function_calls": [],
    "output": {
      "type": "array",
      "description": "An array of integers representing image dimensions, which aids in rendering responsive images in a Next.js application."
    }
  },
  {
    "folder_path": "src/config",
    "module_name": "config",
    "method_name": "deviceSizes",
    "input_params": [],
    "logic": "This is an array export that specifies standard device widths used for responsive design within the application. It helps in defining breakpoints and ensuring the UI adapts smoothly across different screen sizes, a core practice in Next.js development.",
    "inner_function_calls": [],
    "output": {
      "type": "array",
      "description": "An array of integers representing standard device widths, facilitating responsive layout adjustments in a Next.js application."
    }
  },
  {
    "folder_path": "src/config",
    "module_name": "config",
    "method_name": "allLangs",
    "input_params": [],
    "logic": "Defines an array of language objects that includes label, value, and icon for each language. This can be used in a Next.js component to provide language selection options.",
    "inner_function_calls": [],
    "output": {
      "type": "array",
      "description": "An array of language objects, each representing a language option, which can be used in UI components for language selection."
    }
  },
  {
    "folder_path": "src/config",
    "module_name": "config",
    "method_name": "defaultLang",
    "input_params": [],
    "logic": "Exports the first entry from the allLangs array, providing a default language option, which can be utilized in components for fallback or initial state purposes.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An object representing the default language option; in this case, it corresponds to the English language entry."
    }
  },
  {
    "folder_path": "src/constants/form",
    "module_name": "inputs.js",
    "method_name": "loginInputProps",
    "input_params": [],
    "logic": "Defines an array of input properties for the login form, including labels and icons for email and password fields.",
    "inner_function_calls": [],
    "output": {
      "type": "array",
      "description": "An array of objects containing properties for login inputs, intended for use in a form."
    }
  },
  {
    "folder_path": "src/constants/form",
    "module_name": "inputs.js",
    "method_name": "signupInputProps",
    "input_params": [],
    "logic": "Defines an array of input properties for the signup form, including fields for full name, email, password, and account type with corresponding icons.",
    "inner_function_calls": [],
    "output": {
      "type": "array",
      "description": "An array of objects containing properties for signup inputs, intended to facilitate user registration."
    }
  },
  {
    "folder_path": "src/constants/form",
    "module_name": "inputs.js",
    "method_name": "newPasswordInputProps",
    "input_params": [],
    "logic": "Defines an array of input properties for the new password form, which includes fields for OTP, password, and repeat password, along with their respective labels and icons.",
    "inner_function_calls": [],
    "output": {
      "type": "array",
      "description": "An array of objects containing properties for new password inputs, aimed at apps requiring password updates."
    }
  },
  {
    "folder_path": "src/constants/form",
    "module_name": "inputs.js",
    "method_name": "loginText",
    "input_params": [],
    "logic": "Creates an object containing text for the login interface, specifically a welcome message, enhancing the user experience by providing a greeting.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An object holding text elements for the login UI, aiding in providing context and instructions to the user."
    }
  },
  {
    "folder_path": "src/constants",
    "module_name": "functions.js",
    "method_name": "generateRandomNumber",
    "input_params": [
      {
        "type": "number",
        "name": "n",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Generates a random integer between 0 (inclusive) and the specified number n (exclusive). It uses JavaScript's built-in Math.random() to create a random number, which is then multiplied by n and floored to get an integer value. This function is useful for scenarios where random number generation is needed, such as selecting random items or generating random values in games.",
    "inner_function_calls": [],
    "output": {
      "type": "number",
      "description": "Returns a random integer between 0 and n - 1, which can be used to provide variability in applications like games, sampling, or randomized algorithms."
    }
  },
  {
    "folder_path": "src/constants",
    "module_name": "global.js",
    "method_name": "DRAWER_WIDTH",
    "input_params": [],
    "logic": "This constant represents the width of the drawer used in UI components, typically for layouts that include side navigation in a Next.js application.",
    "inner_function_calls": [],
    "output": {
      "type": "number",
      "description": "The constant value representing the width of the drawer, used for styling/layout purposes in Next.js components."
    }
  },
  {
    "folder_path": "src/hooks",
    "module_name": "useActiveLink.js",
    "method_name": "useActiveLink",
    "input_params": [
      {
        "type": "string",
        "name": "path",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "boolean",
        "name": "deep",
        "is_required": "",
        "optional_value": "true"
      }
    ],
    "logic": "This function is a custom React hook used to determine if a given link is currently active within a Next.js application. It utilizes Next.js's `usePathname` hook to get the current pathname and checks against the provided path to ascertain if the link is active based on depth or exact matching.",
    "inner_function_calls": [
      {
        "name": "usePathname",
        "import_path": "next/navigation"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns an object indicating if the link is active and whether the link is an external one."
    }
  },
  {
    "folder_path": "src/hooks",
    "module_name": "useInterval.js",
    "method_name": "useInterval",
    "input_params": [
      {
        "type": "function",
        "name": "callback",
        "is_required": "true",
        "optional_value": "undefined"
      },
      {
        "type": "number",
        "name": "delay",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "useInterval is a custom hook that sets up an interval timer to execute a provided callback function at specified intervals. It follows React's conventions for hooks, allowing side effects with useEffect and persisting the latest callback using useRef.",
    "inner_function_calls": [
      {
        "name": "useRef",
        "import_path": "react"
      },
      {
        "name": "useEffect",
        "import_path": "react"
      },
      {
        "name": "setInterval",
        "import_path": "native browser API"
      },
      {
        "name": "clearInterval",
        "import_path": "native browser API"
      }
    ],
    "output": {
      "type": "undefined",
      "description": "The useInterval hook does not return a value; it sets up an interval for the callback to be executed"
    }
  },
  {
    "folder_path": "src/hooks",
    "module_name": "useOffSetTop.js",
    "method_name": "useOffSetTop",
    "input_params": [
      {
        "type": "number",
        "name": "top",
        "is_required": "/optional/",
        "optional_value": "100"
      },
      {
        "type": "object",
        "name": "options",
        "is_required": "/optional/",
        "optional_value": "undefined"
      }
    ],
    "logic": "This hook detects when the scroll position exceeds a given offset (top). It uses Framer Motion's useScroll and React's useEffect for reacting to scroll changes, setting a state variable that indicates whether the scroll exceeds the specified top value.",
    "inner_function_calls": [
      {
        "name": "useScroll",
        "import_path": "framer-motion"
      },
      {
        "name": "useState",
        "import_path": "react"
      },
      {
        "name": "useEffect",
        "import_path": "react"
      },
      {
        "name": "onChange",
        "import_path": "framer-motion"
      }
    ],
    "output": {
      "type": "boolean",
      "description": "Returns a boolean indicating whether the scroll position is greater than the specified top offset, useful for controlling UI behavior based on scroll position."
    }
  },
  {
    "folder_path": "src/hooks",
    "module_name": "useResponsive.js",
    "method_name": "useResponsive",
    "input_params": [
      {
        "type": "string",
        "name": "query",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "start",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "end",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "A custom hook that determines media query status based on the provided `query`, `start`, and `end` parameters. It leverages Material-UI's `useMediaQuery` and `useTheme` to create responsive design logic, fulfilling Next.js's need for adaptive components.",
    "inner_function_calls": [
      {
        "name": "useTheme",
        "import_path": "@mui/material"
      },
      {
        "name": "useMediaQuery",
        "import_path": "@mui/material"
      }
    ],
    "output": {
      "type": "boolean",
      "description": "Returns a boolean indicating the result of the media query based on the type of query passed (up, down, between, or only). It is essential for conditionally rendering components responsive to screen sizes."
    }
  },
  {
    "folder_path": "src/hooks",
    "module_name": "useResponsive.js",
    "method_name": "useWidth",
    "input_params": [],
    "logic": "A custom hook that returns the current width breakpoint by checking the media queries in reverse order, starting from the largest breakpoint provided by Material-UI theme. It is used to determine the layout and rendering of components according to the current screen width in a Next.js application.",
    "inner_function_calls": [
      {
        "name": "useTheme",
        "import_path": "@mui/material"
      },
      {
        "name": "useMediaQuery",
        "import_path": "@mui/material"
      }
    ],
    "output": {
      "type": "string",
      "description": "Returns the current width breakpoint key (e.g., 'xs', 'sm', 'md', etc.) based on the matched media query. This is crucial for responsive designs in Next.js applications."
    }
  },
  {
    "folder_path": "src/libs",
    "module_name": "i18n.js",
    "method_name": "getRequestConfig",
    "input_params": [
      {
        "type": "function",
        "name": "async () => {...}",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function is a wrapper that utilizes Next.js conventions to create a request configuration function that gets the user's locale and corresponding translation messages. It is used in the context of Next.js's internationalization (i18n) support.",
    "inner_function_calls": [
      {
        "name": "getUserLocale",
        "import_path": "./local"
      },
      {
        "name": "import",
        "import_path": "@src/locales/${locale}/translation.json"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns a configuration object containing the user's locale and the corresponding translation messages for internationalization."
    }
  },
  {
    "folder_path": "src/libs",
    "module_name": "local.js",
    "method_name": "getUserLocale",
    "input_params": [
      {
        "type": "undefined",
        "name": "undefined",
        "is_required": "false",
        "optional_value": "undefined"
      }
    ],
    "logic": "Retrieves the user's locale from cookies. If the locale is not found, it returns a default locale specified in the app configuration. This function is part of server-side logic to manage user preferences in a Next.js application.",
    "inner_function_calls": [
      {
        "name": "cookies().get",
        "import_path": "next/headers"
      },
      {
        "name": "appConfig.defaultLocale",
        "import_path": "../config/appConfig"
      }
    ],
    "output": {
      "type": "string",
      "description": "The user's locale as a string, either from cookies or the default locale from app configuration."
    }
  },
  {
    "folder_path": "src/libs",
    "module_name": "local.js",
    "method_name": "setUserLocale",
    "input_params": [
      {
        "type": "string",
        "name": "locale",
        "is_required": "true",
        "optional_value": "undefined"
      }
    ],
    "logic": "Sets the user's locale in cookies. This function is used to update the user's locale preference, contributing to user-specific configurations in a Next.js application.",
    "inner_function_calls": [
      {
        "name": "cookies().set",
        "import_path": "next/headers"
      }
    ],
    "output": {
      "type": "undefined",
      "description": "No output value; the function modifies the cookies for the current user session."
    }
  },
  {
    "folder_path": "src/redux",
    "module_name": "baseQuery.js",
    "method_name": "axiosBaseQuery",
    "input_params": [
      {
        "type": "object",
        "name": "options",
        "is_required": "",
        "optional_value": "{ baseUrl: '' }"
      },
      {
        "type": "object",
        "name": "context",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Defines a custom base query function using Axios for handling API requests in a Redux-like environment. It incorporates token management and retry logic for internal server errors, following Next.js conventions for state and session management.",
    "inner_function_calls": [
      {
        "name": "setupToken",
        "import_path": "../utils/functions"
      },
      {
        "name": "axios",
        "import_path": "axios"
      },
      {
        "name": "toast.error",
        "import_path": "react-toastify"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns either the response data from the API request or an error object for further handling."
    }
  },
  {
    "folder_path": "src/redux/endpoints",
    "module_name": "aiLayer.js",
    "method_name": "processProfileImagesEndpoint",
    "input_params": [
      {
        "type": "object",
        "name": "builder",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Defines a mutation endpoint for processing profile images, returning a configuration object for the request.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An object representing the mutation configuration, specifically a query configuration for Next.js API handling."
    }
  },
  {
    "folder_path": "src/redux/endpoints",
    "module_name": "aiLayer.js",
    "method_name": "processAlbumImagesEndpoint",
    "input_params": [
      {
        "type": "object",
        "name": "builder",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "albumId",
        "is_required": "true",
        "optional_value": ""
      }
    ],
    "logic": "Defines a mutation endpoint for processing album images, utilizing the provided albumId to construct the URL for the API request.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An object representing the mutation configuration for handling album image processing requests."
    }
  },
  {
    "folder_path": "src/redux/endpoints",
    "module_name": "albums.js",
    "method_name": "getAlbumsEndpoint",
    "input_params": [
      {
        "type": "function",
        "name": "builder",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Defines a query to fetch a list of albums from an API endpoint, following Next.js conventions on API route design and data fetching.",
    "inner_function_calls": [
      {
        "name": "query",
        "import_path": "builder"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns a query function that fetches albums."
    }
  },
  {
    "folder_path": "src/redux/endpoints",
    "module_name": "albums.js",
    "method_name": "getByIdAlbumsEndpoint",
    "input_params": [
      {
        "type": "function",
        "name": "builder",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Sets up a query to fetch a specific album by ID from the API using a dynamic URL.",
    "inner_function_calls": [
      {
        "name": "query",
        "import_path": "builder"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns a query function that fetches an album by its ID."
    }
  },
  {
    "folder_path": "src/redux/endpoints",
    "module_name": "albums.js",
    "method_name": "getAlbumOwnerEndpoint",
    "input_params": [
      {
        "type": "function",
        "name": "builder",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Creates a query to obtain the owner of a specified album by ID, encapsulating API logic.",
    "inner_function_calls": [
      {
        "name": "query",
        "import_path": "builder"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns a query function to retrieve the owner details of an album."
    }
  },
  {
    "folder_path": "src/redux/endpoints",
    "module_name": "albums.js",
    "method_name": "createAlbumEndpoint",
    "input_params": [
      {
        "type": "function",
        "name": "builder",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "formData",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Defines a mutation to create a new album by sending data via a POST request to the API.",
    "inner_function_calls": [
      {
        "name": "query",
        "import_path": "builder"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns a mutation function for creating a new album."
    }
  },
  {
    "folder_path": "src/redux/endpoints",
    "module_name": "albums.js",
    "method_name": "getAlbumEndpoint",
    "input_params": [
      {
        "type": "function",
        "name": "builder",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Sets up a query to retrieve a specific album using its ID, consistent with data fetching patterns in Next.js.",
    "inner_function_calls": [
      {
        "name": "query",
        "import_path": "builder"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns a query function to fetch details of an album."
    }
  },
  {
    "folder_path": "src/redux/endpoints",
    "module_name": "albums.js",
    "method_name": "shareAlbumEndpoint",
    "input_params": [
      {
        "type": "function",
        "name": "builder",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "albumId",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "formData",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Creates a mutation for sharing an album by updating its properties via a PATCH request made to the API.",
    "inner_function_calls": [
      {
        "name": "query",
        "import_path": "builder"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns a mutation function for sharing an album."
    }
  },
  {
    "folder_path": "src/redux/endpoints",
    "module_name": "albums.js",
    "method_name": "updateAlbumEndpoint",
    "input_params": [
      {
        "type": "function",
        "name": "builder",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "albumId",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "formData",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Defines a mutation to update an existing album's data, making use of a PATCH request.",
    "inner_function_calls": [
      {
        "name": "query",
        "import_path": "builder"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns a mutation function to update an existing album."
    }
  },
  {
    "folder_path": "src/redux/endpoints",
    "module_name": "albums.js",
    "method_name": "createGroupEndpoint",
    "input_params": [
      {
        "type": "function",
        "name": "builder",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "albumId",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Sets up a mutation for creating a new group associated with a specific album through a POST request.",
    "inner_function_calls": [
      {
        "name": "query",
        "import_path": "builder"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns a mutation function for creating a group."
    }
  },
  {
    "folder_path": "src/redux/endpoints",
    "module_name": "albums.js",
    "method_name": "getGroupEndpoint",
    "input_params": [
      {
        "type": "function",
        "name": "builder",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "groupId",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Creates a query to obtain details of a specified group by its ID, complying with Next.js API fetching guidelines.",
    "inner_function_calls": [
      {
        "name": "query",
        "import_path": "builder"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns a query function to fetch a specific group's details."
    }
  },
  {
    "folder_path": "src/redux/endpoints",
    "module_name": "albums.js",
    "method_name": "updateGroupEndpoint",
    "input_params": [
      {
        "type": "function",
        "name": "builder",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "groupId",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "body",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Defines a mutation for updating a group's information through a POST request in the API.",
    "inner_function_calls": [
      {
        "name": "query",
        "import_path": "builder"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns a mutation function for updating a group's data."
    }
  },
  {
    "folder_path": "src/redux/endpoints",
    "module_name": "albums.js",
    "method_name": "addImagesEndpoint",
    "input_params": [
      {
        "type": "function",
        "name": "builder",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "groupId",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "array",
        "name": "images",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Sets up a mutation to add images to a specified group through the API, adhering to RESTful practices.",
    "inner_function_calls": [
      {
        "name": "query",
        "import_path": "builder"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns a mutation function for adding images to a group."
    }
  },
  {
    "folder_path": "src/redux/endpoints",
    "module_name": "albums.js",
    "method_name": "deleteAlbumEndpoint",
    "input_params": [
      {
        "type": "function",
        "name": "builder",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "albumId",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Defines a mutation for deleting an album by ID, implementing a delete HTTP request in compliance with API routes in Next.js.",
    "inner_function_calls": [
      {
        "name": "query",
        "import_path": "builder"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns a mutation function for deleting an album."
    }
  },
  {
    "folder_path": "src/redux/endpoints",
    "module_name": "cluster.js",
    "method_name": "getAlbumClusterEndpoint",
    "input_params": [
      {
        "type": "function builder",
        "name": "builder",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function is a query builder for fetching album cluster data based on an album ID. It utilizes the RTK Query pattern in Next.js to define how to query the album cluster endpoint.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a query object that defines the HTTP request to fetch data from the specified album cluster endpoint."
    }
  },
  {
    "folder_path": "src/redux/endpoints",
    "module_name": "cluster.js",
    "method_name": "getClusterEndpoint",
    "input_params": [
      {
        "type": "function builder",
        "name": "builder",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function is a query builder for fetching cluster data based on a cluster ID. It follows the RTK Query pattern in Next.js, specifying how to query the cluster endpoint.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a query object that outlines the HTTP request to retrieve data from the specified cluster endpoint."
    }
  },
  {
    "folder_path": "src/redux/endpoints",
    "module_name": "folder.js",
    "method_name": "deleteFolderEndpoint",
    "input_params": [
      {
        "type": "object",
        "name": "builder",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "folderId",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Defines a mutation for deleting a folder specified by folderId, returning the appropriate REST API call under the Next.js framework for state management in client-side data manipulation.",
    "inner_function_calls": [
      {
        "name": "mutation",
        "import_path": "builder"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns a mutation definition used within RTK Query to handle the deletion of a folder against the specified API endpoint."
    }
  },
  {
    "folder_path": "src/redux/endpoints",
    "module_name": "folder.js",
    "method_name": "getFolderEndpoint",
    "input_params": [
      {
        "type": "object",
        "name": "builder",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "folderId",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Defines a query for fetching folder data specified by folderId, compliant with Next.js API routes by utilizing the builder.query method from RTK Query.",
    "inner_function_calls": [
      {
        "name": "query",
        "import_path": "builder"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns a query definition that retrieves folder details from the specified API endpoint."
    }
  },
  {
    "folder_path": "src/redux/endpoints",
    "module_name": "folder.js",
    "method_name": "getFilteredFolderImagesEndpoint",
    "input_params": [
      {
        "type": "object",
        "name": "builder",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "folderId",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "email",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Defines a query for fetching images from a specific folder filtered by an email address, following Next.js best practices for API interaction.",
    "inner_function_calls": [
      {
        "name": "query",
        "import_path": "builder"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns a query definition that retrieves filtered images from a specified folder based on folderId and email."
    }
  },
  {
    "folder_path": "src/redux/endpoints",
    "module_name": "folder.js",
    "method_name": "uploadFolderImagesEndpoint",
    "input_params": [
      {
        "type": "object",
        "name": "builder",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "folderId",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "formData",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Defines a mutation for uploading images to a specific folder, ensuring compliance with RESTful standards through payload management.",
    "inner_function_calls": [
      {
        "name": "mutation",
        "import_path": "builder"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns a mutation definition that is responsible for sending images to a folder endpoint to update with new images."
    }
  },
  {
    "folder_path": "src/redux/endpoints",
    "module_name": "folder.js",
    "method_name": "uploadFolderEndpoint",
    "input_params": [
      {
        "type": "object",
        "name": "builder",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "folderId",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "formData",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Defines a mutation for updating a folder's data, following RTK Query patterns commonly utilized in Next.js applications for optimized state handling.",
    "inner_function_calls": [
      {
        "name": "mutation",
        "import_path": "builder"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns a mutation definition that is used to update the specific folder resource with new information."
    }
  },
  {
    "folder_path": "src/redux/endpoints",
    "module_name": "folder.js",
    "method_name": "deleteFolderImageEndpoint",
    "input_params": [
      {
        "type": "object",
        "name": "builder",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "folderId",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "formData",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Defines a mutation for deleting images from a specific folder, utilizing standard REST methods and adhering to Next.js API route conventions.",
    "inner_function_calls": [
      {
        "name": "mutation",
        "import_path": "builder"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns a mutation definition that is responsible for removing specified images from a folder."
    }
  },
  {
    "folder_path": "src/redux/endpoints",
    "module_name": "folder.js",
    "method_name": "createFolderEndpoint",
    "input_params": [
      {
        "type": "object",
        "name": "builder",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "formData",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Defines a mutation for creating a new folder, encapsulating the necessary RESTful logic for resource creation compliant with Next.js practices.",
    "inner_function_calls": [
      {
        "name": "mutation",
        "import_path": "builder"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns a mutation definition used for creating a new folder resource through the specified API endpoint."
    }
  },
  {
    "folder_path": "src/redux/endpoints",
    "module_name": "guest.js",
    "method_name": "createGuestEndpoint",
    "input_params": [
      {
        "type": "function",
        "name": "builder",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Defines a mutation endpoint to create a guest, using a builder to structure the request for a POST method.",
    "inner_function_calls": [
      {
        "name": "mutation",
        "import_path": ""
      },
      {
        "name": "query",
        "import_path": ""
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns an object containing the query configuration for posting data regarding a new guest."
    }
  },
  {
    "folder_path": "src/redux/endpoints",
    "module_name": "guest.js",
    "method_name": "getGuestEndpoint",
    "input_params": [
      {
        "type": "function",
        "name": "builder",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Defines a query endpoint to retrieve filtered images for a guest based on their ID, utilizing a builder to structure the GET request.",
    "inner_function_calls": [
      {
        "name": "query",
        "import_path": ""
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns an object that specifies the structure of the query to retrieve guest-specific filtered images."
    }
  },
  {
    "folder_path": "src/redux/endpoints",
    "module_name": "header.js",
    "method_name": "getPhotographerBySubEndpoint",
    "input_params": [
      {
        "type": "function",
        "name": "builder",
        "is_required": ">=1",
        "optional_value": ""
      }
    ],
    "logic": "Defines a query endpoint to retrieve photographer data based on a user subscription identifier using a RESTful API request. This follows a typical pattern in creating API slices with Redux Toolkit for effective state management.",
    "inner_function_calls": [
      {
        "name": "query",
        "import_path": ""
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns a query endpoint configuration for fetching photographer data."
    }
  },
  {
    "folder_path": "src/redux/endpoints",
    "module_name": "header.js",
    "method_name": "updatePhotographerBySubEndpoint",
    "input_params": [
      {
        "type": "function",
        "name": "builder",
        "is_required": ">=1",
        "optional_value": ""
      }
    ],
    "logic": "Defines a query endpoint to update photographer data based on user subscription, allowing the sending of data via POST requests. This conforms to Next.js's data fetching conventions using API routes and state management.",
    "inner_function_calls": [
      {
        "name": "query",
        "import_path": ""
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns a query endpoint configuration for updating photographer data."
    }
  },
  {
    "folder_path": "src/redux/endpoints",
    "module_name": "index.js",
    "method_name": "getAlbumsEndpoint",
    "input_params": [],
    "logic": "This function retrieves a list of albums. It is likely used to populate album data in components or API responses.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns an object containing details of the albums retrieved."
    }
  },
  {
    "folder_path": "src/redux/endpoints",
    "module_name": "index.js",
    "method_name": "createAlbumEndpoint",
    "input_params": [
      {
        "type": "object",
        "name": "albumData",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function is responsible for creating a new album based on the provided album data.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns the newly created album details."
    }
  },
  {
    "folder_path": "src/redux/endpoints",
    "module_name": "index.js",
    "method_name": "getAlbumEndpoint",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function fetches a specific album based on its ID, providing details for a specific album view or API response.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns the details of the album specified by the albumId."
    }
  },
  {
    "folder_path": "src/redux/endpoints",
    "module_name": "index.js",
    "method_name": "updateAlbumEndpoint",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "updateData",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function updates an existing album using album ID and the data to update.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns the updated album details."
    }
  },
  {
    "folder_path": "src/redux/endpoints",
    "module_name": "index.js",
    "method_name": "createGroupEndpoint",
    "input_params": [
      {
        "type": "object",
        "name": "groupData",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function creates a new group based on the provided group data.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns the details of the newly created group."
    }
  },
  {
    "folder_path": "src/redux/endpoints",
    "module_name": "index.js",
    "method_name": "getGroupEndpoint",
    "input_params": [
      {
        "type": "string",
        "name": "groupId",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function retrieves data for a specific group using its ID, useful for group-related views or API data.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns details of the specified group."
    }
  },
  {
    "folder_path": "src/redux/endpoints",
    "module_name": "index.js",
    "method_name": "updateGroupEndpoint",
    "input_params": [
      {
        "type": "string",
        "name": "groupId",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "updateData",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function updates an existing group using its ID and provided data.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns the updated group details."
    }
  },
  {
    "folder_path": "src/redux/endpoints",
    "module_name": "index.js",
    "method_name": "addImagesEndpoint",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "array",
        "name": "images",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function adds images to a specific album identified by album ID.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns confirmation of the images added to the album."
    }
  },
  {
    "folder_path": "src/redux/endpoints",
    "module_name": "index.js",
    "method_name": "deleteAlbumEndpoint",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function deletes an album based on its ID.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns confirmation of the deleted album."
    }
  },
  {
    "folder_path": "src/redux/endpoints",
    "module_name": "index.js",
    "method_name": "getAlbumOwnerEndpoint",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function retrieves the owner of a specified album.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns details of the album owner."
    }
  },
  {
    "folder_path": "src/redux/endpoints",
    "module_name": "index.js",
    "method_name": "shareAlbumEndpoint",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "shareData",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function shares an album with specified users or groups using sharing data.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns the status of the sharing operation."
    }
  },
  {
    "folder_path": "src/redux/endpoints",
    "module_name": "index.js",
    "method_name": "getByIdAlbumsEndpoint",
    "input_params": [
      {
        "type": "string",
        "name": "userId",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function retrieves albums created by a specific user via their ID.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a list of albums belonging to the specified user."
    }
  },
  {
    "folder_path": "src/redux/endpoints",
    "module_name": "index.js",
    "method_name": "getPhotographerBySubEndpoint",
    "input_params": [
      {
        "type": "string",
        "name": "subId",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function retrieves a photographer's details using their subscriber ID.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns details of the photographer associated with the provided subscriber ID."
    }
  },
  {
    "folder_path": "src/redux/endpoints",
    "module_name": "index.js",
    "method_name": "updatePhotographerBySubEndpoint",
    "input_params": [
      {
        "type": "string",
        "name": "subId",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "updateData",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function allows for updating the details of a photographer based on their subscriber ID.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns the updated details of the photographer."
    }
  },
  {
    "folder_path": "src/redux/endpoints",
    "module_name": "index.js",
    "method_name": "getAllRBACEndpoint",
    "input_params": [],
    "logic": "This function retrieves all RBAC entities.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns an array of all RBAC entities."
    }
  },
  {
    "folder_path": "src/redux/endpoints",
    "module_name": "index.js",
    "method_name": "createRBACEndpoint",
    "input_params": [
      {
        "type": "object",
        "name": "rbacData",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function creates a new RBAC entity based on the provided data.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns the newly created RBAC entity details."
    }
  },
  {
    "folder_path": "src/redux/endpoints",
    "module_name": "index.js",
    "method_name": "updateRBACEndpoint",
    "input_params": [
      {
        "type": "string",
        "name": "rbacId",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "updateData",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function updates an existing RBAC entity using its ID and the update data.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns the updated RBAC entity details."
    }
  },
  {
    "folder_path": "src/redux/endpoints",
    "module_name": "index.js",
    "method_name": "getRBACByIdEndpoint",
    "input_params": [
      {
        "type": "string",
        "name": "rbacId",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function retrieves RBAC entity details using its ID.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns the details of the specified RBAC entity."
    }
  },
  {
    "folder_path": "src/redux/endpoints",
    "module_name": "index.js",
    "method_name": "deleteManyRBACEndpoint",
    "input_params": [
      {
        "type": "array",
        "name": "ids",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function allows for deleting multiple RBAC entities based on the provided IDs.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns confirmation of the RBAC entities that have been deleted."
    }
  },
  {
    "folder_path": "src/redux/endpoints",
    "module_name": "peoples.js",
    "method_name": "getAllByAlbumIdEndpoint",
    "input_params": [
      {
        "type": "object",
        "name": "builder",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Defines a query endpoint for fetching all faces by album ID using the builder pattern typical to RTK Query in Next.js.",
    "inner_function_calls": [
      {
        "name": "query",
        "import_path": ""
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns a query endpoint configuration object with a URL and HTTP method."
    }
  },
  {
    "folder_path": "src/redux/endpoints",
    "module_name": "peoples.js",
    "method_name": "getAllByUniqueFaceIdEndpoint",
    "input_params": [
      {
        "type": "object",
        "name": "builder",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Defines a query endpoint for fetching a specific face by album ID and face ID using the builder pattern, adhering to Next.js API route conventions.",
    "inner_function_calls": [
      {
        "name": "query",
        "import_path": ""
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns a query endpoint configuration object with a unique URL for face ID and HTTP method."
    }
  },
  {
    "folder_path": "src/redux/endpoints",
    "module_name": "rbac.js",
    "method_name": "getAllEndpoint",
    "input_params": [
      {
        "type": "object",
        "name": "builder",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "collection",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Defines a query endpoint to fetch all items from a specified collection. It constructs a URL for a GET request with the specified collection and a corresponding action, in alignment with Next.js API route conventions.",
    "inner_function_calls": [
      {
        "name": "query",
        "import_path": ""
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns a query configuration for fetching all items of a collection."
    }
  },
  {
    "folder_path": "src/redux/endpoints",
    "module_name": "rbac.js",
    "method_name": "deleteManyEndpoint",
    "input_params": [
      {
        "type": "object",
        "name": "builder",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "collection",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "array",
        "name": "ids",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Defines a mutation endpoint for deleting multiple items from a specified collection using an array of IDs. The mutation is designed to invalidate cached data associated with that collection after the operation, following standards for CRUD operations in API design within Next.js.",
    "inner_function_calls": [
      {
        "name": "mutation",
        "import_path": ""
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns a mutation configuration for deleting multiple items of a collection."
    }
  },
  {
    "folder_path": "src/redux/endpoints",
    "module_name": "rbac.js",
    "method_name": "createEndpoint",
    "input_params": [
      {
        "type": "object",
        "name": "builder",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "collection",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "name",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Defines a mutation endpoint for creating a new item in a specified collection, providing functionality to add resources through the API. It invalidates cached the data post-creation to ensure updated data access.",
    "inner_function_calls": [
      {
        "name": "mutation",
        "import_path": ""
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns a mutation configuration for creating a new item in a collection."
    }
  },
  {
    "folder_path": "src/redux/endpoints",
    "module_name": "rbac.js",
    "method_name": "getByIdEndpoint",
    "input_params": [
      {
        "type": "object",
        "name": "builder",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "collection",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "_id",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Defines a query endpoint to fetch a single item by its ID from a specified collection. This is a common operation in API design within Next.js that supports data retrieval on demand.",
    "inner_function_calls": [
      {
        "name": "query",
        "import_path": ""
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns a query configuration for fetching an item by its ID from a collection."
    }
  },
  {
    "folder_path": "src/redux/endpoints",
    "module_name": "rbac.js",
    "method_name": "getByNameEndpoint",
    "input_params": [
      {
        "type": "object",
        "name": "builder",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "collection",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "name",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Defines a query endpoint to retrieve an item by its name from a specified collection, facilitating name-based lookups to enhance API usability.",
    "inner_function_calls": [
      {
        "name": "query",
        "import_path": ""
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns a query configuration for fetching an item by its name from a collection."
    }
  },
  {
    "folder_path": "src/redux/endpoints",
    "module_name": "rbac.js",
    "method_name": "updateEndpoint",
    "input_params": [
      {
        "type": "object",
        "name": "builder",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "collection",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "_id",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "newName",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Defines a mutation endpoint for updating an existing item in a specified collection. This follows standard practices in Next.js design for managing resources in an API by allowing modification of current entries.",
    "inner_function_calls": [
      {
        "name": "mutation",
        "import_path": ""
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns a mutation configuration for updating an existing item in a collection."
    }
  },
  {
    "folder_path": "src/redux/endpoints",
    "module_name": "rekognition.js",
    "method_name": "createImageRekognitionEndpoint",
    "input_params": [
      {
        "type": "function",
        "name": "builder",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function sets up an image recognition API endpoint using a builder pattern, which is common in state management libraries such as Redux Toolkit. It defines a mutation that allows for posting image data to a specified API route, consistent with standard Next.js backend conventions.",
    "inner_function_calls": [
      {
        "name": "builder.mutation",
        "import_path": ""
      },
      {
        "name": "query",
        "import_path": ""
      }
    ],
    "output": {
      "type": "object",
      "description": "The output represents the mutation setup which can be dispatched to utilize its functionality in a component. It enables interaction with the backend API."
    }
  },
  {
    "folder_path": "src/redux/endpoints",
    "module_name": "user.js",
    "method_name": "getUserEndpoint",
    "input_params": [
      {
        "type": "function",
        "name": "builder",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Defines a RESTful query endpoint for fetching users in a React application using a builder pattern, typical in Next.js for API handling.",
    "inner_function_calls": [
      {
        "name": "builder.query",
        "import_path": "Not specified (likely from a library like RTK Query)"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns a query definition for fetching users using the provided builder."
    }
  },
  {
    "folder_path": "src/redux/endpoints",
    "module_name": "user.js",
    "method_name": "updateUserEndpoint",
    "input_params": [
      {
        "type": "function",
        "name": "builder",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "formData",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Defines a RESTful mutation endpoint for updating user data in a React application using a builder pattern, following Next.js API conventions.",
    "inner_function_calls": [
      {
        "name": "builder.mutation",
        "import_path": "Not specified (likely from a library like RTK Query)"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns a mutation definition for updating user information, typically used in React components to trigger updates."
    }
  },
  {
    "folder_path": "src/redux",
    "module_name": "persistGate.js",
    "method_name": "PersistGateProvider",
    "input_params": [
      {
        "type": "object",
        "name": "children",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "This function is a React component that acts as a wrapper providing a Redux Persist Gate, ensuring that the application waits for the persisted state before rendering its children. This is particularly useful in a Next.js app to prevent UI flickers while loading state.",
    "inner_function_calls": [
      {
        "name": "PersistGate",
        "import_path": "redux-persist/integration/react"
      }
    ],
    "output": {
      "type": "jsx",
      "description": "The output of the function represents a React component that renders the PersistGate with the given children, effectively managing the loading state of the Redux store."
    }
  },
  {
    "folder_path": "src/redux/slices",
    "module_name": "aiLayerSlice.js",
    "method_name": "aiSlice",
    "input_params": [
      {
        "type": "object",
        "name": "builder",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function creates a slice of the Redux store using Redux Toolkit Query with the necessary configuration for processing images through specified endpoints.",
    "inner_function_calls": [
      {
        "name": "processAlbumImagesEndpoint",
        "import_path": "../endpoints/aiLayer"
      },
      {
        "name": "processProfileImagesEndpoint",
        "import_path": "../endpoints/aiLayer"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns an API slice object that includes hooks for the specified endpoints, allowing components to use these hooks to dispatch actions and retrieve data related to album and profile images."
    }
  },
  {
    "folder_path": "src/redux/slices",
    "module_name": "apiSlice.js",
    "method_name": "createApi",
    "input_params": [
      {
        "type": "object",
        "name": "definition",
        "is_required": "true",
        "optional_value": ""
      }
    ],
    "logic": "Creates a new API slice for managing state and providing an interface to call various endpoints, leveraging Redux Toolkit's query capabilities to automatically manage the data fetching lifecycle. It's central to the fetch-update state pattern in Next.js applications that utilize React-Redux.",
    "inner_function_calls": [
      {
        "name": "axiosBaseQuery",
        "import_path": "../baseQuery"
      },
      {
        "name": "getAlbumsEndpoint",
        "import_path": "../endpoints"
      },
      {
        "name": "getByIdAlbumsEndpoint",
        "import_path": "../endpoints"
      },
      {
        "name": "getAlbumsEndpoint",
        "import_path": "../endpoints"
      },
      {
        "name": "createAlbumEndpoint",
        "import_path": "../endpoints"
      },
      {
        "name": "getAlbumEndpoint",
        "import_path": "../endpoints"
      },
      {
        "name": "deleteAlbumEndpoint",
        "import_path": "../endpoints"
      },
      {
        "name": "updateAlbumEndpoint",
        "import_path": "../endpoints"
      },
      {
        "name": "createGroupEndpoint",
        "import_path": "../endpoints"
      },
      {
        "name": "getGroupEndpoint",
        "import_path": "../endpoints"
      },
      {
        "name": "updateGroupEndpoint",
        "import_path": "../endpoints"
      },
      {
        "name": "addImagesEndpoint",
        "import_path": "../endpoints"
      },
      {
        "name": "getPhotographerBySubEndpoint",
        "import_path": "../endpoints"
      },
      {
        "name": "updatePhotographerBySubEndpoint",
        "import_path": "../endpoints"
      },
      {
        "name": "getAllRBACEndpoint",
        "import_path": "../endpoints"
      },
      {
        "name": "deleteManyRBACEndpoint",
        "import_path": "../endpoints"
      },
      {
        "name": "createRBACEndpoint",
        "import_path": "../endpoints"
      },
      {
        "name": "getRBACByIdEndpoint",
        "import_path": "../endpoints"
      },
      {
        "name": "updateRBACEndpoint",
        "import_path": "../endpoints"
      },
      {
        "name": "getAllByAlbumIdEndpoint",
        "import_path": "../endpoints"
      },
      {
        "name": "getAllByUniqueFaceIdEndpoint",
        "import_path": "../endpoints"
      },
      {
        "name": "deleteFolderEndpoint",
        "import_path": "../endpoints"
      },
      {
        "name": "createGuestEndpoint",
        "import_path": "../endpoints"
      },
      {
        "name": "getGuestEndpoint",
        "import_path": "../endpoints"
      },
      {
        "name": "getAlbumOwnerEndpoint",
        "import_path": "../endpoints"
      },
      {
        "name": "uploadFolderImagesEndpoint",
        "import_path": "../endpoints"
      },
      {
        "name": "getFolderEndpoint",
        "import_path": "../endpoints"
      },
      {
        "name": "getUserEndpoint",
        "import_path": "../endpoints"
      },
      {
        "name": "updateUserEndpoint",
        "import_path": "../endpoints"
      },
      {
        "name": "deleteFolderImageEndpoint",
        "import_path": "../endpoints"
      },
      {
        "name": "shareAlbumEndpoint",
        "import_path": "../endpoints"
      },
      {
        "name": "createFolderEndpoint",
        "import_path": "../endpoints"
      },
      {
        "name": "uploadFolderEndpoint",
        "import_path": "../endpoints"
      },
      {
        "name": "createImageRekognitionEndpoint",
        "import_path": "../endpoints"
      },
      {
        "name": "getFilteredFolderImagesEndpoint",
        "import_path": "../endpoints"
      },
      {
        "name": "getAlbumClusterEndpoint",
        "import_path": "../endpoints/cluster"
      },
      {
        "name": "getClusterEndpoint",
        "import_path": "../endpoints/cluster"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns an object representing the generated API slice, which includes the actions and state management for handling API interactions."
    }
  },
  {
    "folder_path": "src/redux/slices",
    "module_name": "apiSlice.js",
    "method_name": "useGetAlbumsQuery",
    "input_params": [
      {
        "type": "object",
        "name": "params",
        "is_required": "false",
        "optional_value": "{}"
      }
    ],
    "logic": "A React hook provided by the API slice that allows components to fetch a list of albums. It automatically manages loading and error states, inline with React-Redux patterns.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns the state of the current request, including the fetched data, loading state, and any error that might have occurred."
    }
  },
  {
    "folder_path": "src/redux/slices",
    "module_name": "apiSlice.js",
    "method_name": "useCreateAlbumMutation",
    "input_params": [
      {
        "type": "object",
        "name": "data",
        "is_required": "true",
        "optional_value": ""
      }
    ],
    "logic": "A hook that provides a function to create a new album via a POST request. This mutation is tied to the component's lifecycle, providing a way to handle state changes effectively following CRUD conventions in Next.js.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a tuple of the mutation function and an object representing the mutation state, including loading and error information."
    }
  },
  {
    "folder_path": "src/redux/slices",
    "module_name": "apiSlice.js",
    "method_name": "useGetAlbumQuery",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "true",
        "optional_value": ""
      }
    ],
    "logic": "A hook that retrieves an album based on its ID, managing any asynchronous fetching and error states in a React-friendly manner.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns the album data for the specified ID, with built-in state management for loading errors."
    }
  },
  {
    "folder_path": "src/redux/slices",
    "module_name": "authSlice.js",
    "method_name": "setToken",
    "input_params": [
      {
        "type": "object",
        "name": "actions",
        "is_required": "true",
        "optional_value": ""
      }
    ],
    "logic": "Updates the tokens in the state with the payload from the actions. This is part of the Redux slice created for authentication management.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "This function does not return a value; it mutates the state directly."
    }
  },
  {
    "folder_path": "src/redux/slices",
    "module_name": "authSlice.js",
    "method_name": "deleteToken",
    "input_params": [
      {
        "type": "object",
        "name": "actions",
        "is_required": "true",
        "optional_value": ""
      }
    ],
    "logic": "Resets the tokens and user details in the state to empty objects. This effectively logs out the user by clearing authentication data.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "This function does not return a value; it mutates the state directly."
    }
  },
  {
    "folder_path": "src/redux/slices",
    "module_name": "authSlice.js",
    "method_name": "setUser",
    "input_params": [
      {
        "type": "object",
        "name": "actions",
        "is_required": "true",
        "optional_value": ""
      }
    ],
    "logic": "Updates the userDetails in the state with the payload from the actions. This is used to store user-specific information after authentication.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "This function does not return a value; it mutates the state directly."
    }
  },
  {
    "folder_path": "src/redux/slices",
    "module_name": "comonSlice.js",
    "method_name": "setLeftNav",
    "input_params": [
      {
        "type": "boolean",
        "name": "payload",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Updates the state property leftNav with the provided value from the action's payload. This function toggles visibility of a left sidebar navigation component.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "This function does not return a value but modifies the Redux state."
    }
  },
  {
    "folder_path": "src/redux/slices",
    "module_name": "comonSlice.js",
    "method_name": "setUnNav",
    "input_params": [
      {
        "type": "boolean",
        "name": "payload",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Updates the state property unNav based on the action's payload. This function likely controls another navigation element's visibility.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "This function does not return a value but modifies the Redux state."
    }
  },
  {
    "folder_path": "src/redux/slices",
    "module_name": "comonSlice.js",
    "method_name": "setProfilePicUrl",
    "input_params": [
      {
        "type": "string",
        "name": "payload",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Sets the profilePicUrl state to the value again taken from the action's payload. This could be used for changing a user profile picture URL.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "This function does not return a value but modifies the Redux state."
    }
  },
  {
    "folder_path": "src/redux/slices",
    "module_name": "comonSlice.js",
    "method_name": "deleteProfilePicUrl",
    "input_params": [
      {
        "type": "object",
        "name": "payload",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Resets the profilePicUrl state to an empty object, effectively removing the user's profile picture information from the state.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "This function does not return a value but modifies the Redux state."
    }
  },
  {
    "folder_path": "src/redux/slices",
    "module_name": "guestUserSlice.js",
    "method_name": "createGuestAlbum",
    "input_params": [
      {
        "type": "object",
        "name": "actions",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Handles the addition of a new album for a guest user by pushing the new album data into the albums array in the state.",
    "inner_function_calls": [
      {
        "name": "push",
        "import_path": ""
      }
    ],
    "output": {
      "type": "void",
      "description": "No direct output, modifies the state by adding a new album."
    }
  },
  {
    "folder_path": "src/redux/slices",
    "module_name": "guestUserSlice.js",
    "method_name": "updateGuestAlbum",
    "input_params": [
      {
        "type": "object",
        "name": "actions",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Updates an existing guest album based on the provided album ID, modifying its data with the new form data.",
    "inner_function_calls": [
      {
        "name": "map",
        "import_path": ""
      }
    ],
    "output": {
      "type": "void",
      "description": "No direct output, modifies the state by updating an existing album."
    }
  },
  {
    "folder_path": "src/redux/slices",
    "module_name": "guestUserSlice.js",
    "method_name": "deleteGuestAlbum",
    "input_params": [
      {
        "type": "object",
        "name": "actions",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Removes a guest album from the albums array based on the album's ID.",
    "inner_function_calls": [
      {
        "name": "filter",
        "import_path": ""
      }
    ],
    "output": {
      "type": "void",
      "description": "No direct output, modifies the state by removing an album."
    }
  },
  {
    "folder_path": "src/redux/slices",
    "module_name": "guestUserSlice.js",
    "method_name": "createGuestFolder",
    "input_params": [
      {
        "type": "object",
        "name": "actions",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Adds a new folder to a specified guest album's folders array.",
    "inner_function_calls": [
      {
        "name": "map",
        "import_path": ""
      },
      {
        "name": "push",
        "import_path": ""
      }
    ],
    "output": {
      "type": "void",
      "description": "No direct output, modifies the state by adding a new folder to an album."
    }
  },
  {
    "folder_path": "src/redux/slices",
    "module_name": "guestUserSlice.js",
    "method_name": "updateFolder",
    "input_params": [
      {
        "type": "object",
        "name": "actions",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Updates a folder within a specific guest album based on the folder ID, modifying its data with new folder data.",
    "inner_function_calls": [
      {
        "name": "map",
        "import_path": ""
      },
      {
        "name": "map",
        "import_path": ""
      }
    ],
    "output": {
      "type": "void",
      "description": "No direct output, modifies the state by updating a specific folder."
    }
  },
  {
    "folder_path": "src/redux/slices",
    "module_name": "guestUserSlice.js",
    "method_name": "deleteGuestFolder",
    "input_params": [
      {
        "type": "object",
        "name": "actions",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Removes a specific folder from a guest album based on the folder's ID.",
    "inner_function_calls": [
      {
        "name": "map",
        "import_path": ""
      },
      {
        "name": "filter",
        "import_path": ""
      }
    ],
    "output": {
      "type": "void",
      "description": "No direct output, modifies the state by removing a folder from an album."
    }
  },
  {
    "folder_path": "src/redux/slices",
    "module_name": "guestUserSlice.js",
    "method_name": "deleteGuestAllAlbums",
    "input_params": [
      {
        "type": "object",
        "name": "actions",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Clears all albums from the guest user state, setting the albums array to empty.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "No direct output, resets the state to remove all albums."
    }
  },
  {
    "folder_path": "src/redux/slices",
    "module_name": "settingsSlice.js",
    "method_name": "setTheme",
    "input_params": [
      {
        "type": "object",
        "name": "actions",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "The setTheme function modifies the state of the slice by updating a specific theme property based on the payload provided in the actions parameter. This function is part of the Redux state management logic, allowing the application to handle theme settings dynamically.",
    "inner_function_calls": [
      {
        "name": "createSlice",
        "import_path": "@reduxjs/toolkit"
      }
    ],
    "output": {
      "type": "void",
      "description": "This function does not return anything directly; it mutates the Redux state according to the action received."
    }
  },
  {
    "folder_path": "src/redux",
    "module_name": "store.js",
    "method_name": "persistReducer",
    "input_params": [
      {
        "type": "object",
        "name": "config",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "function",
        "name": "reducer",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Wraps a reducer with persistence capabilities, allowing the state to be saved to the specified storage (e.g., local storage) and rehydrated on subsequent application loads. This is common practice in Redux for maintaining state across sessions.",
    "inner_function_calls": [
      {
        "name": "persistReducer",
        "import_path": "redux-persist"
      }
    ],
    "output": {
      "type": "function",
      "description": "A reducer function that retains the ability to save and load state with Redux Persist."
    }
  },
  {
    "folder_path": "src/redux",
    "module_name": "store.js",
    "method_name": "configureStore",
    "input_params": [
      {
        "type": "object",
        "name": "options",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Configures the Redux store with the provided reducers and middleware, enabling the integration of Redux with the application state management. `configureStore` simplifies the setup by combining commonly used configurations, making it a quintessential part of setting up Redux in Next.js applications.",
    "inner_function_calls": [
      {
        "name": "configureStore",
        "import_path": "@reduxjs/toolkit"
      }
    ],
    "output": {
      "type": "object",
      "description": "The Redux store instance that holds the complete state tree of the application."
    }
  },
  {
    "folder_path": "src/redux",
    "module_name": "store.js",
    "method_name": "setupListeners",
    "input_params": [
      {
        "type": "function",
        "name": "dispatch",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Sets up listeners for Redux middleware that enables some functionalities, such as automatic reconnection to the server. This is essential for working with react-query or Redux Toolkit Query, ensuring smooth data fetching and updates.",
    "inner_function_calls": [
      {
        "name": "setupListeners",
        "import_path": "@reduxjs/toolkit/query"
      }
    ],
    "output": {
      "type": "void",
      "description": "This function does not return a value; it configures side-effect listeners."
    }
  },
  {
    "folder_path": "src/redux",
    "module_name": "store.js",
    "method_name": "persistStore",
    "input_params": [
      {
        "type": "object",
        "name": "store",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Creates a persistor object that can be used to persist the Redux store, which saves the state to persistent storage. It's crucial for maintaining the application state across sessions in a Redux setup.",
    "inner_function_calls": [
      {
        "name": "persistStore",
        "import_path": "redux-persist"
      }
    ],
    "output": {
      "type": "object",
      "description": "The persistor object that handles the persistence of the store's state."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout",
    "module_name": "customShadows.js",
    "method_name": "createShadow",
    "input_params": [
      {
        "type": "string",
        "name": "color",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function generates a set of shadow styles based on a specified color. It leverages the alpha utility from Material-UI to create transparent variations of the passed color, which are then used to define various shadow depth levels. This function aligns with Next.js conventions as it contributes to component styling by producing styles that can be used across different UI components.",
    "inner_function_calls": [
      {
        "name": "alpha",
        "import_path": "@mui/material/styles"
      }
    ],
    "output": {
      "type": "object",
      "description": "The output is an object containing various shadow styles (z1, z4, z8, etc.) defined in CSS format. It represents the shadow configurations usable within the theme of a Next.js application."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout",
    "module_name": "customShadows.js",
    "method_name": "customShadows",
    "input_params": [
      {
        "type": "string",
        "name": "themeMode",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This is a default exported function that determines the shadow styles based on the provided theme mode (light or dark). If the theme mode is 'light', it calls createShadow with the LIGHT_MODE color; otherwise, it uses DARK_MODE. This is consistent with Next.js theme management practices where applications often support light and dark themes for user preferences.",
    "inner_function_calls": [
      {
        "name": "createShadow",
        "import_path": "./path-to-createShadow"
      }
    ],
    "output": {
      "type": "object",
      "description": "The output is an object of shadow styles generated by the createShadow function, which adapts based on the theme mode. This allows for dynamic styling in UI components of a Next.js application."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout",
    "module_name": "globalStyles.js",
    "method_name": "GlobalStyles",
    "input_params": [
      {
        "type": "function",
        "name": "props",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "This function defines and applies global styles using Material-UI's GlobalStyles component. It sets up various CSS modifications that are applied to the entire application, adhering to best practices in style management within the context of Next.js and React.",
    "inner_function_calls": [
      {
        "name": "MUIGlobalStyles",
        "import_path": "@mui/material"
      }
    ],
    "output": {
      "type": "React Element",
      "description": "The function returns a React element that contains the global styles to be applied within the Next.js application."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout",
    "module_name": "index.js",
    "method_name": "ThemeProvider",
    "input_params": [
      {
        "type": "node",
        "name": "children",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "The ThemeProvider component is responsible for providing a custom Material-UI theme to its child components. It utilizes React's useMemo hook to optimize the creation of theme options by recomputing them only when the themeMode or themeDirection changes. The function incorporates global styles, a baseline CSS reset, and supports configuring theme attributes such as mode, direction, palettes, typography, and shadows.",
    "inner_function_calls": [
      {
        "name": "useMemo",
        "import_path": "react"
      },
      {
        "name": "createTheme",
        "import_path": "@mui/material/styles"
      },
      {
        "name": "componentsOverride",
        "import_path": "./overrides"
      }
    ],
    "output": {
      "type": "JSX.Element",
      "description": "The resulting JSX element that renders the styled components with the defined theme, including CssBaseline, GlobalStyles, and any child components passed to ThemeProvider."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout/overrides",
    "module_name": "Accordion.js",
    "method_name": "Accordion",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "The Accordion function is a default export that creates a customization object for MUI (Material-UI) components, specifically the Accordion and Accordion Summary components. It follows the Next.js conventions by providing a theme object that allows for styling overrides based on the current theme settings.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An object containing style overrides for MUI's Accordion and AccordionSummary components, which is typically utilized in a theme provider in a Next.js application."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout/overrides",
    "module_name": "Alert.js",
    "method_name": "Alert",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "/true/",
        "optional_value": "null"
      }
    ],
    "logic": "The Alert function generates the default properties and style overrides for a custom MuiAlert component in a Next.js application based on the provided theme object. It uses `ownerState` to apply different styles based on variant and severity while considering the light/dark mode of the theme.",
    "inner_function_calls": [
      {
        "name": "rootStyle",
        "import_path": "./CustomIcons"
      }
    ],
    "output": {
      "type": "object",
      "description": "An object containing MuiAlert component default properties and style overrides, which dictates how the alert component should render based on the theme."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout/overrides",
    "module_name": "Alert.js",
    "method_name": "rootStyle",
    "input_params": [
      {
        "type": "object",
        "name": "ownerState",
        "is_required": "/true/",
        "optional_value": "null"
      }
    ],
    "logic": "The rootStyle function computes the styling properties for the MuiAlert component based on the variant and severity passed in the ownerState. It provides specific styles for standard, filled, and outlined variants using the theme palette.",
    "inner_function_calls": [],
    "output": {
      "type": "array",
      "description": "An array of styling objects that correspond to the CSS styles needed for different alert variants and severities."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout/overrides",
    "module_name": "Autocomplete.js",
    "method_name": "Autocomplete",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": ">true",
        "optional_value": ""
      }
    ],
    "logic": "This function creates a style overrides object for the Material-UI Autocomplete component, customizing its appearance based on the provided theme. It adheres to Material-UI's conventions for styling components using a theme object to access typography, shapes, colors, and shadows.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An object containing style overrides for the MuiAutocomplete component, which will be used in a Material-UI theme configuration."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout/overrides",
    "module_name": "Avatar.js",
    "method_name": "Avatar",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "The Avatar function is used to customize the styles of Material-UI Avatar components within a theme. It adheres to the conventions of Next.js by allowing for theme-based styles to be applied, enabling consistent design across components.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "The function returns an object that contains style overrides and default properties for the MuiAvatar and MuiAvatarGroup components."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout/overrides",
    "module_name": "Backdrop.js",
    "method_name": "Backdrop",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "The Backdrop function customizes MUI's Backdrop component styles using the provided theme. It leverages Next.js and MUI conventions for styling components by adjusting style overrides for backdrops based on the theme's palette.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An object containing the customized styles for MUI's Backdrop component that will be used by MUI's theming system in a Next.js application."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout/overrides",
    "module_name": "Badge.js",
    "method_name": "Badge",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "The Badge function generates style overrides for the MuiBadge component in a Material-UI theme context. It is typically used in Next.js applications to customize UI components based on Material-UI's theming capabilities.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "The output is an object containing the style overrides for the MuiBadge component, which will be merged with the default theme settings in a Material-UI application."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout/overrides",
    "module_name": "Breadcrumbs.js",
    "method_name": "Breadcrumbs",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "The function defines style overrides for the Material-UI Breadcrumbs component, customizing its appearance based on a provided theme. It extracts spacing and typography properties from the theme, ensuring consistency within a Material-UI styled application, typically used in a Next.js context for global styling or component customization.",
    "inner_function_calls": [
      {
        "name": "theme.spacing",
        "import_path": "Not applicable (the function is likely from Material-UI theme context)"
      }
    ],
    "output": {
      "type": "object",
      "description": "An object containing style overrides for the MuiBreadcrumbs component, specifically targeting the separator and list item styling."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout/overrides",
    "module_name": "Button.js",
    "method_name": "Button",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "This function serves as a custom Button component style configuration within the MUI framework. It leverages the theme to determine color and style variations based on different button properties like variant and size.",
    "inner_function_calls": [
      {
        "name": "rootStyle",
        "import_path": ""
      },
      {
        "name": "COLORS.map",
        "import_path": ""
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns an object containing default props and style overrides for MUI Button components."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout/overrides",
    "module_name": "Button.js",
    "method_name": "rootStyle",
    "input_params": [
      {
        "type": "object",
        "name": "ownerState",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "This inner function generates dynamic styles for the button based on the provided ownerState, which includes color and variant. It takes care of various button styles like contained, outlined, text, and soft variants, as well as size variations.",
    "inner_function_calls": [
      {
        "name": "COLORS.map",
        "import_path": ""
      }
    ],
    "output": {
      "type": "array",
      "description": "Returns an array of styles based on the ownerState properties, which will be used for the MUI Button styling."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout/overrides",
    "module_name": "ButtonGroup.js",
    "method_name": "ButtonGroup",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "The ButtonGroup function is a style customization function for MUI's ButtonGroup component, applying specific styles based on the variant, color, orientation, and disabled states of the buttons in the group. It integrates with the MUI theming capabilities to apply conditional styles.",
    "inner_function_calls": [
      {
        "name": "alpha",
        "import_path": "@mui/material/styles"
      },
      {
        "name": "map",
        "import_path": "Array.prototype"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns an object containing default props and style overrides for the MuiButtonGroup component, which is used by MUI to customize the button group's appearance within the context of the MUI theme."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout/overrides",
    "module_name": "Card.js",
    "method_name": "Card",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "/required/",
        "optional_value": "undefined"
      }
    ],
    "logic": "This function generates a set of style overrides for various Material-UI Card components, modifying their appearance based on the provided theme. It aligns with Next.js conventions for theming and style customization in React components.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a configuration object that contains style overrides for MuiCard, MuiCardHeader, and MuiCardContent, enhancing Material-UI components with custom styles as per the provided theme."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout/overrides",
    "module_name": "Checkbox.js",
    "method_name": "Checkbox",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Creates a configuration object for customizing the MuiCheckbox component in Material-UI. It sets default properties for different icon states and provides style overrides based on the theme and owner state.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns an object containing the default properties and style overrides for the MuiCheckbox component."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout/overrides",
    "module_name": "Chip.js",
    "method_name": "Chip",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "The Chip function defines styles for the MUI Chip component based on the provided theme. It contains logic to determine styles for different color variants and states, leveraging the theme's palette to dynamically set styles for both light and dark modes. It adheres to Next.js and Material-UI conventions by exporting a function that returns an object for MUI theme customization.",
    "inner_function_calls": [
      {
        "name": "rootStyle",
        "import_path": ""
      },
      {
        "name": "alpha",
        "import_path": "@mui/material/styles"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns an object containing default properties and style overrides for the MuiChip component, suitable for integration into a MUI theme."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout/overrides",
    "module_name": "Chip.js",
    "method_name": "rootStyle",
    "input_params": [
      {
        "type": "object",
        "name": "ownerState",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "The rootStyle function generates an array of style objects based on the ownerState of the Chip component. It checks various conditions related to color and variant types and returns styles accordingly, ensuring dynamic and context-sensitive styles for different chip states.",
    "inner_function_calls": [
      {
        "name": "map",
        "import_path": ""
      },
      {
        "name": "alpha",
        "import_path": "@mui/material/styles"
      }
    ],
    "output": {
      "type": "array",
      "description": "Returns an array of style objects applied to the Chip component depending on its color and variant properties."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout/overrides",
    "module_name": "ControlLabel.js",
    "method_name": "ControlLabel",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "true",
        "optional_value": ""
      }
    ],
    "logic": "This function defines custom style overrides for Material-UI form components using the provided theme object. It enhances the appearance and spacing of form elements, aligning them with the application's design conventions.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An object containing the style overrides for MuiFormControlLabel, MuiFormHelperText, and MuiFormLabel components, which are intended to be used in conjunction with Material-UI's styling system."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout/overrides",
    "module_name": "CustomIcons.js",
    "method_name": "CloseIcon",
    "input_params": [
      {
        "type": "object",
        "name": "props",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Renders a close icon using the SvgIcon component from MUI. It receives props to customize the icon's appearance.",
    "inner_function_calls": [],
    "output": {
      "type": "JSX.Element",
      "description": "Returns an SVG close icon rendered as part of a React component."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout/overrides",
    "module_name": "CustomIcons.js",
    "method_name": "StarIcon",
    "input_params": [
      {
        "type": "object",
        "name": "props",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Renders a star icon utilizing the SvgIcon from MUI. Accepts props for customization.",
    "inner_function_calls": [],
    "output": {
      "type": "JSX.Element",
      "description": "Returns an SVG star icon rendered in a React component."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout/overrides",
    "module_name": "CustomIcons.js",
    "method_name": "InfoIcon",
    "input_params": [
      {
        "type": "object",
        "name": "props",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Displays an information icon via MUI's SvgIcon, taking props for flexibility in its usage.",
    "inner_function_calls": [],
    "output": {
      "type": "JSX.Element",
      "description": "Outputs an SVG info icon used typically for alert or information notifications."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout/overrides",
    "module_name": "CustomIcons.js",
    "method_name": "WarningIcon",
    "input_params": [
      {
        "type": "object",
        "name": "props",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Renders a warning icon utilizing SvgIcon from MUI, with props for component customizability.",
    "inner_function_calls": [],
    "output": {
      "type": "JSX.Element",
      "description": "Returns an SVG warning icon, often used to signify caution or alerts."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout/overrides",
    "module_name": "CustomIcons.js",
    "method_name": "SuccessIcon",
    "input_params": [
      {
        "type": "object",
        "name": "props",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Shows a success icon using MUI's SvgIcon, with customizable props for developers.",
    "inner_function_calls": [],
    "output": {
      "type": "JSX.Element",
      "description": "Outputs a success icon, usually indicated to show a positive result or confirmation."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout/overrides",
    "module_name": "CustomIcons.js",
    "method_name": "ErrorIcon",
    "input_params": [
      {
        "type": "object",
        "name": "props",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Renders an error icon via the SvgIcon component from MUI, accommodating props for further customization.",
    "inner_function_calls": [],
    "output": {
      "type": "JSX.Element",
      "description": "Returns an SVG error icon, typically used to notify users of issues or mistakes."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout/overrides",
    "module_name": "CustomIcons.js",
    "method_name": "CheckboxIcon",
    "input_params": [
      {
        "type": "object",
        "name": "props",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Creates a checkbox icon with the ability to pass props for customization using SvgIcon from MUI.",
    "inner_function_calls": [],
    "output": {
      "type": "JSX.Element",
      "description": "Outputs a checkbox icon, which can be used to represent selectable options."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout/overrides",
    "module_name": "CustomIcons.js",
    "method_name": "CheckboxCheckedIcon",
    "input_params": [
      {
        "type": "object",
        "name": "props",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Renders a checked checkbox icon, allowing props for flexible design options.",
    "inner_function_calls": [],
    "output": {
      "type": "JSX.Element",
      "description": "Returns an SVG icon representing a checked state of a checkbox."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout/overrides",
    "module_name": "CustomIcons.js",
    "method_name": "CheckboxIndeterminateIcon",
    "input_params": [
      {
        "type": "object",
        "name": "props",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Displays an indeterminate state for a checkbox using MUI's SvgIcon, with props support.",
    "inner_function_calls": [],
    "output": {
      "type": "JSX.Element",
      "description": "Outputs an indeterminate state icon for checkboxes, used when the selection is partially complete."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout/overrides",
    "module_name": "CustomIcons.js",
    "method_name": "RadioIcon",
    "input_params": [
      {
        "type": "object",
        "name": "props",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Renders a radio button icon using SvgIcon from MUI, accepting customizable props.",
    "inner_function_calls": [],
    "output": {
      "type": "JSX.Element",
      "description": "Returns a radio button icon, often representing a group selection where only one option can be chosen."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout/overrides",
    "module_name": "CustomIcons.js",
    "method_name": "RadioCheckedIcon",
    "input_params": [
      {
        "type": "object",
        "name": "props",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Displays a checked radio button icon via MUI's SvgIcon, with props for customization.",
    "inner_function_calls": [],
    "output": {
      "type": "JSX.Element",
      "description": "Outputs an SVG icon representing a selected state of a radio button."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout/overrides",
    "module_name": "CustomIcons.js",
    "method_name": "InputSelectIcon",
    "input_params": [
      {
        "type": "object",
        "name": "props",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Creates an input select icon using SvgIcon, suitable for select input fields and customizable through props.",
    "inner_function_calls": [],
    "output": {
      "type": "JSX.Element",
      "description": "Returns an SVG icon suitable for select fields in forms."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout/overrides",
    "module_name": "CustomIcons.js",
    "method_name": "TreeViewCollapseIcon",
    "input_params": [
      {
        "type": "object",
        "name": "props",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Renders a collapse icon for tree view components, leveraging MUI's SvgIcon and supporting props.",
    "inner_function_calls": [],
    "output": {
      "type": "JSX.Element",
      "description": "Outputs an SVG collapse icon used in tree view structures to indicate collapsible sections."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout/overrides",
    "module_name": "CustomIcons.js",
    "method_name": "TreeViewExpandIcon",
    "input_params": [
      {
        "type": "object",
        "name": "props",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Shows an expand icon for tree view structures utilizing SvgIcon from MUI, accepting customizable props.",
    "inner_function_calls": [],
    "output": {
      "type": "JSX.Element",
      "description": "Returns an SVG expand icon for tree view components to signify expandable content."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout/overrides",
    "module_name": "CustomIcons.js",
    "method_name": "TreeViewEndIcon",
    "input_params": [
      {
        "type": "object",
        "name": "props",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Displays an end icon for tree views, employing SvgIcon from MUI and allowing props customization.",
    "inner_function_calls": [],
    "output": {
      "type": "JSX.Element",
      "description": "Outputs an SVG end icon in tree view structures representing the end of a tree node."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout/overrides",
    "module_name": "DataGrid.js",
    "method_name": "DataGrid",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Defines a customization object for the Material-UI Data Grid component, using the provided theme object to override default styles for various Data Grid elements. This is relevant for theming in Next.js applications that utilize Material-UI for UI components.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An object containing style overrides for the MuiDataGrid component that will be used in Material-UI applications."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout/overrides",
    "module_name": "Dialog.js",
    "method_name": "Dialog",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function serves as a customization utility for the Dialog component in Material-UI. It returns an object that defines the style overrides for different subcomponents of the Dialog, allowing for personalized theming according to the provided 'theme' parameters.",
    "inner_function_calls": [
      {
        "name": "theme.customShadows.dialog",
        "import_path": "theme"
      },
      {
        "name": "theme.shape.borderRadius",
        "import_path": "theme"
      },
      {
        "name": "theme.spacing",
        "import_path": "theme"
      }
    ],
    "output": {
      "type": "object",
      "description": "An object representing the style overrides for the Material-UI Dialog components, including MuiDialog, MuiDialogTitle, MuiDialogContent, and MuiDialogActions."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout/overrides",
    "module_name": "Drawer.js",
    "method_name": "Drawer",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "The Drawer function is a style override configuration for the MUI Drawer component based on the provided theme. It utilizes the Material-UI styling approach to dynamically adjust the CSS properties of the Drawer depending on the theme's palette mode (light or dark).",
    "inner_function_calls": [
      {
        "name": "alpha",
        "import_path": "@mui/material/styles"
      }
    ],
    "output": {
      "type": "object",
      "description": "An object containing the style overrides for the MuiDrawer component, adhering to the MUI theming conventions."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout/overrides",
    "module_name": "Fab.js",
    "method_name": "Fab",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "The Fab function defines a Material-UI Floating Action Button (FAB) styling function using a theme object. It determines various styles based on theme settings and owner state, adhering to Next.js conventions for component styling.",
    "inner_function_calls": [
      {
        "name": "rootStyle",
        "import_path": ""
      },
      {
        "name": "map",
        "import_path": ""
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns an object containing default properties and style overrides for the Material-UI FAB component."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout/overrides",
    "module_name": "Fab.js",
    "method_name": "rootStyle",
    "input_params": [
      {
        "type": "object",
        "name": "ownerState",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Defines styles for the FAB based on the ownerâ€™s state, such as color, variant, and size. This function utilizes the theme for color values and handles multiple conditions for styling.",
    "inner_function_calls": [
      {
        "name": "map",
        "import_path": ""
      },
      {
        "name": "alpha",
        "import_path": "@mui/material/styles"
      }
    ],
    "output": {
      "type": "array",
      "description": "Returns an array of styles to be applied to the FAB based on various conditions."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout/overrides",
    "module_name": "Input.js",
    "method_name": "Input",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function defines the style overrides for Material-UI input components using a theme object. It customizes styles for MuiInputBase, MuiInput, MuiTextField, MuiFilledInput, and MuiOutlinedInput to ensure consistent theming across the application.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "This function returns an object containing style overrides for various Material-UI input components, allowing for theme-based customization in the Next.js application."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout/overrides",
    "module_name": "Link.js",
    "method_name": "Link",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function serves as a customization hook for the Material-UI link component in a Next.js application. It modifies the default properties of the MuiLink component, specifically setting the underline property to 'hover'. This is often used within a theme-related context to ensure consistent UI styling across the application.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns an object that defines the modified MuiLink properties for use with Material-UI's theme system."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout/overrides",
    "module_name": "List.js",
    "method_name": "List",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function is a default export that defines style overrides for Material-UI components. It adheres to Next.js conventions by providing a theme object that is commonly used in component styling for MUI integration.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "It returns an object containing style overrides for various Material-UI list components, specifically `MuiListItemIcon`, `MuiListItemAvatar`, and `MuiListItemText`, which control the appearance of list items."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout/overrides",
    "module_name": "LoadingButton.js",
    "method_name": "LoadingButton",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "This function defines custom styles and variants for a loading button component in a Material-UI theme context. It utilizes Next.js conventions by exporting a default function that integrates with the theme provider, allowing customization of the loading button's appearance based on props.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An object representing the theme customization for a loading button, which includes variant specifications and style overrides specific to the loading states."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout/overrides",
    "module_name": "Menu.js",
    "method_name": "Menu",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "The Menu function takes a theme object and returns style overrides for the MuiMenuItem component in a Material-UI theme. It customizes the styling for selected menu items and their hover states, adhering to Material-UI conventions.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns an object containing style overrides for the MuiMenuItem component, which is used in a Material-UI theme."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout/overrides",
    "module_name": "Pagination.js",
    "method_name": "Pagination",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "The Pagination function is a styled component that customizes the MUI Pagination component based on the current theme's mode. It generates styles and default properties for the pagination UI element which are to be used within the Next.js application context to ensure consistent styling across light and dark themes.",
    "inner_function_calls": [
      {
        "name": "alpha",
        "import_path": "@mui/material/styles"
      },
      {
        "name": "map",
        "import_path": "Array.prototype"
      }
    ],
    "output": {
      "type": "object",
      "description": "The output is an object that contains configurations for the MUI Pagination component, including default properties and style overrides."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout/overrides",
    "module_name": "Pagination.js",
    "method_name": "rootStyle",
    "input_params": [
      {
        "type": "object",
        "name": "ownerState",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "The rootStyle function generates a style object based on the ownerState properties, specifically configuring styles depending on selected variants and the current color theme mode. It is mainly used inside the Pagination function to provide dynamic styling for the Pagination component.",
    "inner_function_calls": [
      {
        "name": "map",
        "import_path": "Array.prototype"
      }
    ],
    "output": {
      "type": "array",
      "description": "The output is an array of style objects that dictate how the root element of the pagination should be styled based on its variant and color."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout/overrides",
    "module_name": "Paper.js",
    "method_name": "Paper",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function is a configuration function for Material-UI's Paper component, providing default properties and style overrides in a theme context. It adheres to Next.js conventions by exporting a default function which is commonly employed for theme customization in conjunction with Material-UI.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "The function returns a configuration object for the MuiPaper component within the Material-UI theme. This object includes default properties such as 'elevation' and style overrides for the 'root' style."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout/overrides",
    "module_name": "Popover.js",
    "method_name": "Popover",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "The Popover function is a default export that takes a theme object as an argument and returns an object to customize the styles of the MuiPopover component in a Material-UI project. It specifically overrides the 'paper' style for the Popover component, applying a custom box shadow and border radius based on the provided theme object.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "The output is an object that contains style overrides for the MuiPopover component, specifically designed to enhance its appearance according to the provided theme."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout/overrides",
    "module_name": "Progress.js",
    "method_name": "Progress",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "The Progress function serves as a Style Override related to the MUI Linear Progress component. It employs the provided theme to generate styles based on the component's owner state. This aligns with Next.js best practices by enabling dynamic styling in a strongly typed fashion while ensuring consistent UI.",
    "inner_function_calls": [
      {
        "name": "rootStyle",
        "import_path": ""
      },
      {
        "name": "alpha",
        "import_path": "@mui/material"
      }
    ],
    "output": {
      "type": "object",
      "description": "The function returns an object containing style overrides for the MuiLinearProgress component, which will be applied dynamically based on the component's owner state."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout/overrides",
    "module_name": "Progress.js",
    "method_name": "rootStyle",
    "input_params": [
      {
        "type": "object",
        "name": "ownerState",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "The rootStyle function calculates and returns styles based on the variant and color defined in the ownerState. It contributes to the customization of the MUI Linear Progress component by providing specific styles depending on its state.",
    "inner_function_calls": [
      {
        "name": "COLORS.map",
        "import_path": ""
      }
    ],
    "output": {
      "type": "array",
      "description": "Returns an array of style objects that are either the default styles or modified styles based on the variant or color associated with the Linear Progress."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout/overrides",
    "module_name": "Radio.js",
    "method_name": "Radio",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "/true/",
        "optional_value": "undefined"
      }
    ],
    "logic": "The function is a Next.js default export that defines styles and default properties for the MuiRadio component, integrating custom icons and styling based on the theme provided. It is used for customizing the Material-UI Radio component's appearance.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An object that contains the default properties and style overrides for the MuiRadio component, specifically tailored for usage within Material-UI's theming context."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout/overrides",
    "module_name": "Rating.js",
    "method_name": "Rating",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "The Rating function is a customization hook for the Material-UI Rating component. It returns an object that configures default properties and style overrides for the Rating component, integrating custom icons and styles specific to the theme provided. This is particularly important for maintaining consistent design across components in a Next.js application.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An object containing configuration for the MuiRating component, including default props and style overrides to apply to the Material-UI Rating component in a Next.js application."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout/overrides",
    "module_name": "Select.js",
    "method_name": "Select",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "The Select function is a configuration function for Material-UI's MuiSelect component, defining default properties for its use within a Next.js application. It sets the default icon component for the select dropdown to a custom icon defined by InputSelectIcon.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An object that contains configurations for the MuiSelect component, specifically setting its default properties."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout/overrides",
    "module_name": "Skeleton.js",
    "method_name": "Skeleton",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function is part of the Material-UI customization in a Next.js application. It generates styles and default properties for the MuiSkeleton component, focusing on a specific theme's palette. The function is typically called when setting up a Material-UI theme and is essential for applying styles consistently across the application.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An object containing the style overrides and default properties for the MuiSkeleton component, which will be used by Material-UI to render the component with the specified styles."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout/overrides",
    "module_name": "Slider.js",
    "method_name": "Slider",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "The function configures the MUI Slider component styles based on the provided theme, determining styling for different states like disabled, focused, and the appearance of the slider's marks and value labels. It adheres to the customization patterns in Material-UI when integrating with Next.js, which often requires theme-aware component designs.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns an object with customized default properties and style overrides for the MUI Slider component, aligning with the Material-UI theme."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout/overrides",
    "module_name": "Stepper.js",
    "method_name": "Stepper",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function is a custom Stepper component style override for Material-UI in a Next.js application. It modifies the default styles for the StepConnector component using the provided theme object, specifically changing the border color of the connecting line.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An object configured for Material-UI theme overrides, specifically for the MuiStepConnector component, returning custom style definitions."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout/overrides",
    "module_name": "SvgIcon.js",
    "method_name": "SvgIcon",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "true",
        "optional_value": ""
      }
    ],
    "logic": "This function customizes the Material-UI component `MuiSvgIcon` by providing style overrides when a theme is applied. It defines the size and font inheritance for the large version of the icon.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An object containing the customized styles for the `MuiSvgIcon` component, specifically tailoring its appearance as per theme specifications."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout/overrides",
    "module_name": "Switch.js",
    "method_name": "Switch",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "The 'Switch' function is a custom theme configuration for the Material-UI Switch component. It defines styles based on the light/dark mode of the theme and sets specific styles for different owner states of the Switch component (such as size).",
    "inner_function_calls": [
      {
        "name": "alpha",
        "import_path": "@mui/material/styles"
      }
    ],
    "output": {
      "type": "object",
      "description": "It returns an object containing style overrides for the MuiSwitch component, which includes custom styles based on the theme and the current state of the component."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout/overrides",
    "module_name": "Table.js",
    "method_name": "Table",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function customizes the Material-UI table components' styles based on the provided theme, allowing consistent design and behavior across table-related elements in a Next.js application. It follows the conventions of applying theme overrides in Material-UI components.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An object containing style overrides and default properties for various Material-UI table components, specifically configured to match the provided theme."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout/overrides",
    "module_name": "Tabs.js",
    "method_name": "Tabs",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "The `Tabs` function is a default export that defines component styles and default properties for Material-UI Tabs and Tab components based on the provided theme. It customizes the default properties and overrides the styles according to design specifications, aligning with Next.js conventions when integrating with Material-UI for UI components.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "The output is an object that contains configuration for MuiTabs and MuiTab components, including their default properties and style overrides, which are to be used in a Material-UI theme setup."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout/overrides",
    "module_name": "Timeline.js",
    "method_name": "Timeline",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "The `Timeline` function is a default export that takes a `theme` object and returns an object containing style overrides for Material-UI Timeline components. It utilizes theme properties to customize the appearance of the `MuiTimelineDot` and `MuiTimelineConnector` components according to the provided theme, which is a common approach in styling components in Next.js applications to ensure consistency with the application's design system.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "The output is an object with style overrides that are passed to Material-UI components, specifically customizing the appearance of Timeline components in accordance with the provided theme."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout/overrides",
    "module_name": "ToggleButton.js",
    "method_name": "ToggleButton",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "The ToggleButton function generates a customization object for MUI ToggleButton and ToggleButtonGroup components based on the provided theme. It defines styles based on the owner's state and different color specifications, enhancing UI representations consistent with MUI best practices.",
    "inner_function_calls": [
      {
        "name": "alpha",
        "import_path": "@mui/material/styles"
      },
      {
        "name": "map",
        "import_path": ""
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns an object that contains style overrides for the MuiToggleButton and MuiToggleButtonGroup components, which is used in a Next.js project integrated with Material-UI for styling components."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout/overrides",
    "module_name": "ToggleButton.js",
    "method_name": "rootStyle",
    "input_params": [
      {
        "type": "object",
        "name": "ownerState",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "An inner function of ToggleButton that determines the style rules for the ToggleButton root component based on the color and disabled states from ownerState.",
    "inner_function_calls": [
      {
        "name": "map",
        "import_path": ""
      },
      {
        "name": "alpha",
        "import_path": "@mui/material/styles"
      }
    ],
    "output": {
      "type": "array",
      "description": "Returns an array of style rules that are applied to components based on their color and selection state."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout/overrides",
    "module_name": "Tooltip.js",
    "method_name": "Tooltip",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "true",
        "optional_value": ""
      }
    ],
    "logic": "This function is a default export that customizes the styles for the Material-UI Tooltip component based on the provided theme. It checks whether the theme is light and applies appropriate background and arrow colors accordingly. This approach aligns with styling customization conventions in Next.js using Material-UI for design consistency.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a styles object for customizing the MuiTooltip component in Material-UI, which will be merged with the default styles."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout/overrides",
    "module_name": "TreeView.js",
    "method_name": "TreeView",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "The TreeView function customizes the default props and styles for Material-UI's TreeView and TreeItem components, using a supplied theme object. This aligns with the conventions of Next.js by enabling dynamic theming for components.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An object containing customized default properties and style overrides for the MuiTreeView and MuiTreeItem components used in a Material-UI context."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout/overrides",
    "module_name": "Typography.js",
    "method_name": "Typography",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "true",
        "optional_value": ""
      }
    ],
    "logic": "The Typography function is used to define style overrides for the Material-UI Typography component based on the provided theme. This function adheres to the Next.js conventions as it prepares a style object that can be used in the Material-UI theme configuration.",
    "inner_function_calls": [
      {
        "name": "theme.spacing",
        "import_path": "@material-ui/core/styles"
      }
    ],
    "output": {
      "type": "object",
      "description": "This output is an object that contains the style overrides for the MuiTypography component, which will be applied throughout the application, helping maintain styling consistency."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout/overrides",
    "module_name": "index.js",
    "method_name": "ComponentsOverrides",
    "input_params": [
      {
        "type": "object",
        "name": "theme",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "This function applies theme overrides to a collection of UI components by invoking each component's function with the provided theme argument. It leverages object assignment to combine the returned overrides into a single object, following best practices for theme customization in a Next.js application.",
    "inner_function_calls": [
      {
        "name": "Fab",
        "import_path": "./Fab"
      },
      {
        "name": "Tabs",
        "import_path": "./Tabs"
      },
      {
        "name": "Chip",
        "import_path": "./Chip"
      },
      {
        "name": "Card",
        "import_path": "./Card"
      },
      {
        "name": "Menu",
        "import_path": "./Menu"
      },
      {
        "name": "Link",
        "import_path": "./Link"
      },
      {
        "name": "Input",
        "import_path": "./Input"
      },
      {
        "name": "Radio",
        "import_path": "./Radio"
      },
      {
        "name": "Badge",
        "import_path": "./Badge"
      },
      {
        "name": "Lists",
        "import_path": "./List"
      },
      {
        "name": "Table",
        "import_path": "./Table"
      },
      {
        "name": "Paper",
        "import_path": "./Paper"
      },
      {
        "name": "Alert",
        "import_path": "./Alert"
      },
      {
        "name": "Switch",
        "import_path": "./Switch"
      },
      {
        "name": "Select",
        "import_path": "./Select"
      },
      {
        "name": "Button",
        "import_path": "./Button"
      },
      {
        "name": "Rating",
        "import_path": "./Rating"
      },
      {
        "name": "Dialog",
        "import_path": "./Dialog"
      },
      {
        "name": "Avatar",
        "import_path": "./Avatar"
      },
      {
        "name": "Slider",
        "import_path": "./Slider"
      },
      {
        "name": "Drawer",
        "import_path": "./Drawer"
      },
      {
        "name": "Stepper",
        "import_path": "./Stepper"
      },
      {
        "name": "Tooltip",
        "import_path": "./Tooltip"
      },
      {
        "name": "Popover",
        "import_path": "./Popover"
      },
      {
        "name": "SvgIcon",
        "import_path": "./SvgIcon"
      },
      {
        "name": "Checkbox",
        "import_path": "./Checkbox"
      },
      {
        "name": "DataGrid",
        "import_path": "./DataGrid"
      },
      {
        "name": "Skeleton",
        "import_path": "./Skeleton"
      },
      {
        "name": "Timeline",
        "import_path": "./Timeline"
      },
      {
        "name": "TreeView",
        "import_path": "./TreeView"
      },
      {
        "name": "Backdrop",
        "import_path": "./Backdrop"
      },
      {
        "name": "Progress",
        "import_path": "./Progress"
      },
      {
        "name": "Accordion",
        "import_path": "./Accordion"
      },
      {
        "name": "Typography",
        "import_path": "./Typography"
      },
      {
        "name": "Pagination",
        "import_path": "./Pagination"
      },
      {
        "name": "ButtonGroup",
        "import_path": "./ButtonGroup"
      },
      {
        "name": "Breadcrumbs",
        "import_path": "./Breadcrumbs"
      },
      {
        "name": "Autocomplete",
        "import_path": "./Autocomplete"
      },
      {
        "name": "ControlLabel",
        "import_path": "./ControlLabel"
      },
      {
        "name": "ToggleButton",
        "import_path": "./ToggleButton"
      },
      {
        "name": "LoadingButton",
        "import_path": "./LoadingButton"
      }
    ],
    "output": {
      "type": "object",
      "description": "An object containing the theme overrides for various UI components, allowing consistent styling and appearance across the app."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout",
    "module_name": "palette.js",
    "method_name": "palette",
    "input_params": [
      {
        "type": "string",
        "name": "themeMode",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function generates a color palette based on the provided theme mode ('light' or 'dark'). It sets appropriate colors for text, background, and action states in the context of Material-UI's theming functionality, thereby assisting in maintaining a consistent look and feel across the application as per the selected theme.",
    "inner_function_calls": [
      {
        "name": "alpha",
        "import_path": "@mui/material/styles"
      }
    ],
    "output": {
      "type": "object",
      "description": "The function returns an object representing the color palette for the given theme mode. This palette includes colors for text, background, and various states, enabling theme consistency in a Next.js application."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout",
    "module_name": "shadows.js",
    "method_name": "createShadow",
    "input_params": [
      {
        "type": "string",
        "name": "color",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Generates an array of shadow values based on the specified color, utilizing the alpha function to create transparent colors for different shadow levels.",
    "inner_function_calls": [
      {
        "name": "alpha",
        "import_path": "@mui/material/styles"
      }
    ],
    "output": {
      "type": "array",
      "description": "Returns an array of shadows represented as CSS box-shadow strings, to be used in a theme."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout",
    "module_name": "shadows.js",
    "method_name": "shadows",
    "input_params": [
      {
        "type": "string",
        "name": "themeMode",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Exports a default function that determines which shadow set to return based on the input themeMode. It utilizes createShadow with predefined color constants for light and dark themes.",
    "inner_function_calls": [
      {
        "name": "createShadow",
        "import_path": ""
      }
    ],
    "output": {
      "type": "array",
      "description": "Returns an array of shadow values for the specified theme mode (light or dark), to be used in styling components."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout",
    "module_name": "typography.js",
    "method_name": "remToPx",
    "input_params": [
      {
        "type": "string",
        "name": "value",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Converts a rem value to pixels by multiplying the parsed value by 16 and rounding it to the nearest integer.",
    "inner_function_calls": [],
    "output": {
      "type": "number",
      "description": "Returns the pixel equivalent of the provided rem value."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout",
    "module_name": "typography.js",
    "method_name": "pxToRem",
    "input_params": [
      {
        "type": "number",
        "name": "value",
        "is_required": "true",
        "optional_value": ""
      }
    ],
    "logic": "Converts a pixel value to rem by dividing the pixel value by 16 and returning it as a string with 'rem' appended.",
    "inner_function_calls": [],
    "output": {
      "type": "string",
      "description": "Returns the rem equivalent of the provided pixel value as a string."
    }
  },
  {
    "folder_path": "src/themes/(auth)/themeLayout",
    "module_name": "typography.js",
    "method_name": "responsiveFontSizes",
    "input_params": [
      {
        "type": "object",
        "name": "sizes",
        "is_required": "true",
        "optional_value": ""
      }
    ],
    "logic": "Creates an object containing responsive font sizes for different media queries based on provided sizes for small, medium, and large breakpoints.",
    "inner_function_calls": [
      {
        "name": "pxToRem",
        "import_path": ""
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns an object containing media queries for responsive font sizes based on the input sizes."
    }
  },
  {
    "folder_path": "src/themes/(unauth)",
    "module_name": "theme.js",
    "method_name": "workSans",
    "input_params": [
      {
        "type": "object",
        "name": "options",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "array",
        "name": "weight",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "array",
        "name": "subsets",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "display",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Creates a Google Font style configuration for the Work Sans font, specifying the weights, subsets, and display properties.",
    "inner_function_calls": [
      {
        "name": "Work_Sans",
        "import_path": "next/font/google"
      }
    ],
    "output": {
      "type": "object",
      "description": "The object containing the styles for the Work Sans font configuration."
    }
  },
  {
    "folder_path": "src/themes/(unauth)",
    "module_name": "theme.js",
    "method_name": "poppins",
    "input_params": [
      {
        "type": "object",
        "name": "options",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "array",
        "name": "weight",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "array",
        "name": "subsets",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "display",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Creates a Google Font style configuration for the Poppins font, specifying the weights, subsets, and display properties.",
    "inner_function_calls": [
      {
        "name": "Poppins",
        "import_path": "next/font/google"
      }
    ],
    "output": {
      "type": "object",
      "description": "The object containing the styles for the Poppins font configuration."
    }
  },
  {
    "folder_path": "src/themes/(unauth)",
    "module_name": "theme.js",
    "method_name": "raleway",
    "input_params": [
      {
        "type": "object",
        "name": "options",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "array",
        "name": "weight",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "array",
        "name": "subsets",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "display",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Creates a Google Font style configuration for the Raleway font, specifying the weights, subsets, and display properties.",
    "inner_function_calls": [
      {
        "name": "Raleway",
        "import_path": "next/font/google"
      }
    ],
    "output": {
      "type": "object",
      "description": "The object containing the styles for the Raleway font configuration."
    }
  },
  {
    "folder_path": "src/themes/(unauth)",
    "module_name": "theme.js",
    "method_name": "montserrat",
    "input_params": [
      {
        "type": "object",
        "name": "options",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "array",
        "name": "weight",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "array",
        "name": "subsets",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "display",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Creates a Google Font style configuration for the Montserrat font, specifying the weights, subsets, and display properties.",
    "inner_function_calls": [
      {
        "name": "Montserrat",
        "import_path": "next/font/google"
      }
    ],
    "output": {
      "type": "object",
      "description": "The object containing the styles for the Montserrat font configuration."
    }
  },
  {
    "folder_path": "src/themes/(unauth)",
    "module_name": "theme.js",
    "method_name": "playfairDisplay",
    "input_params": [
      {
        "type": "object",
        "name": "options",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "array",
        "name": "weight",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "array",
        "name": "subsets",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "display",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Creates a Google Font style configuration for the Playfair Display font, specifying the weights, subsets, and display properties.",
    "inner_function_calls": [
      {
        "name": "Playfair_Display",
        "import_path": "next/font/google"
      }
    ],
    "output": {
      "type": "object",
      "description": "The object containing the styles for the Playfair Display font configuration."
    }
  },
  {
    "folder_path": "src/themes/(unauth)",
    "module_name": "theme.js",
    "method_name": "createTheme",
    "input_params": [
      {
        "type": "object",
        "name": "options",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Creates a custom Material-UI theme, configuring the palette, typography, components styles, and breakpoints for the dark theme.",
    "inner_function_calls": [
      {
        "name": "createTheme",
        "import_path": "@mui/material/styles"
      }
    ],
    "output": {
      "type": "object",
      "description": "The theme object that contains all the configuration for the Material-UI theme."
    }
  },
  {
    "folder_path": "src/themes/(unauth)",
    "module_name": "theme.js",
    "method_name": "lightTheme",
    "input_params": [
      {
        "type": "object",
        "name": "options",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Creates a custom Material-UI theme, configuring the palette, typography, and styling for the light theme variant.",
    "inner_function_calls": [
      {
        "name": "createTheme",
        "import_path": "@mui/material/styles"
      }
    ],
    "output": {
      "type": "object",
      "description": "The theme object that contains the configuration for the Material-UI light theme."
    }
  },
  {
    "folder_path": "src/utils",
    "module_name": "amplify.js",
    "method_name": "GetAuthCurrentUserServer",
    "input_params": [
      {
        "type": "undefined",
        "name": "None",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Fetches the current authenticated user on the server side using AWS Amplify's authentication. This function utilizes Next.js server-side capabilities to maintain session integrity and security.",
    "inner_function_calls": [
      {
        "name": "runWithAmplifyServerContext",
        "import_path": "@aws-amplify/adapter-nextjs"
      },
      {
        "name": "getCurrentUser",
        "import_path": "aws-amplify/auth/server"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns the current user object retrieved from AWS Amplify, which contains user information like ID, email, etc., useful in server-rendered pages for authenticated content."
    }
  },
  {
    "folder_path": "src/utils",
    "module_name": "apiClient.js",
    "method_name": "apiClient",
    "input_params": [
      {
        "type": "string",
        "name": "queryParams",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "data",
        "is_required": "false",
        "optional_value": "{}"
      },
      {
        "type": "string",
        "name": "method",
        "is_required": "false",
        "optional_value": "\"POST\""
      },
      {
        "type": "boolean",
        "name": "withAuth",
        "is_required": "false",
        "optional_value": "true"
      },
      {
        "type": "object",
        "name": "config",
        "is_required": "false",
        "optional_value": "{}"
      }
    ],
    "logic": "The 'apiClient' function serves as a generic utility for making authenticated API calls in a Next.js application. It constructs the request using Axios and handles authentication seamlessly by optionally including an ID token in the headers for authorized requests. This is particularly useful when interacting with protected resources on the backend, adhering to Next.js API call conventions.",
    "inner_function_calls": [
      {
        "name": "fetchAuthSession",
        "import_path": "aws-amplify/auth"
      },
      {
        "name": "axios",
        "import_path": "axios"
      }
    ],
    "output": {
      "type": "object",
      "description": "The output represents the data returned from the API call, which is received in the form of a response from the server after a successful request. It can be any data shape depending on the endpoint being called."
    }
  },
  {
    "folder_path": "src/utils/apiInstance.js",
    "module_name": "mainInstance.js",
    "method_name": "getAlbum",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "token",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This method retrieves a specific album by its ID using a GET request to the API.",
    "inner_function_calls": [
      {
        "name": "get",
        "import_path": "axios"
      }
    ],
    "output": {
      "type": "object",
      "description": "The response from the GET request including album details."
    }
  },
  {
    "folder_path": "src/utils/apiInstance.js",
    "module_name": "mainInstance.js",
    "method_name": "createAlbum",
    "input_params": [
      {
        "type": "object",
        "name": "formData",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "token",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Creates a new album by sending a POST request to the API with the provided form data.",
    "inner_function_calls": [
      {
        "name": "post",
        "import_path": "axios"
      }
    ],
    "output": {
      "type": "object",
      "description": "The response from the POST request indicating the result of the album creation."
    }
  },
  {
    "folder_path": "src/utils/apiInstance.js",
    "module_name": "mainInstance.js",
    "method_name": "getAllAlbums",
    "input_params": [
      {
        "type": "string",
        "name": "token",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Retrieves all albums for the current user, utilizing a GET request to the API to fetch the data.",
    "inner_function_calls": [
      {
        "name": "get",
        "import_path": "axios"
      }
    ],
    "output": {
      "type": "object",
      "description": "The response from the GET request containing a list of all albums."
    }
  },
  {
    "folder_path": "src/utils/apiInstance.js",
    "module_name": "mainInstance.js",
    "method_name": "shareAlbum",
    "input_params": [
      {
        "type": "object",
        "name": "formData",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "token",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "id",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Shares an existing album by sending a PATCH request to the API with updated sharing information.",
    "inner_function_calls": [
      {
        "name": "patch",
        "import_path": "axios"
      }
    ],
    "output": {
      "type": "object",
      "description": "The response indicating the success or failure of the album sharing operation."
    }
  },
  {
    "folder_path": "src/utils/apiInstance.js",
    "module_name": "mainInstance.js",
    "method_name": "updateAlbum",
    "input_params": [
      {
        "type": "object",
        "name": "formData",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "token",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "id",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Updates an existing album by sending a PATCH request to the API with new album details.",
    "inner_function_calls": [
      {
        "name": "patch",
        "import_path": "axios"
      }
    ],
    "output": {
      "type": "object",
      "description": "The response from the PATCH request indicating the result of the album update."
    }
  },
  {
    "folder_path": "src/utils/apiInstance.js",
    "module_name": "mainInstance.js",
    "method_name": "getFolderbyAlbumId",
    "input_params": [
      {
        "type": "string",
        "name": "token",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "id",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Fetches folders associated with a specific album using a GET request.",
    "inner_function_calls": [
      {
        "name": "get",
        "import_path": "axios"
      }
    ],
    "output": {
      "type": "object",
      "description": "The response containing folders related to the specified album."
    }
  },
  {
    "folder_path": "src/utils/apiInstance.js",
    "module_name": "mainInstance.js",
    "method_name": "getFolder",
    "input_params": [
      {
        "type": "string",
        "name": "token",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "id",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Fetches a specific folder by its ID utilizing a GET request to retrieve folder details.",
    "inner_function_calls": [
      {
        "name": "get",
        "import_path": "axios"
      }
    ],
    "output": {
      "type": "object",
      "description": "The response containing details of the specific folder retrieved."
    }
  },
  {
    "folder_path": "src/utils/apiInstance.js",
    "module_name": "mainInstance.js",
    "method_name": "createFolder",
    "input_params": [
      {
        "type": "string",
        "name": "token",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "formData",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Creates a new folder by sending a POST request to the API with the provided form data.",
    "inner_function_calls": [
      {
        "name": "post",
        "import_path": "axios"
      }
    ],
    "output": {
      "type": "object",
      "description": "The response from the POST request indicating the result of the folder creation."
    }
  },
  {
    "folder_path": "src/utils/apiInstance.js",
    "module_name": "mainInstance.js",
    "method_name": "updateFolder",
    "input_params": [
      {
        "type": "string",
        "name": "token",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "formData",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "id",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Updates the specified folder by sending a PATCH request with new folder data.",
    "inner_function_calls": [
      {
        "name": "patch",
        "import_path": "axios"
      }
    ],
    "output": {
      "type": "object",
      "description": "The response from the PATCH request indicating the result of the folder update."
    }
  },
  {
    "folder_path": "src/utils/apiInstance.js",
    "module_name": "mainInstance.js",
    "method_name": "addImgFolder",
    "input_params": [
      {
        "type": "string",
        "name": "token",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "formData",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "id",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Adds images to a specific folder via a PATCH request.",
    "inner_function_calls": [
      {
        "name": "patch",
        "import_path": "axios"
      }
    ],
    "output": {
      "type": "object",
      "description": "The response from the PATCH request indicating the success of the image addition."
    }
  },
  {
    "folder_path": "src/utils/apiInstance.js",
    "module_name": "mainInstance.js",
    "method_name": "deleteImgFolder",
    "input_params": [
      {
        "type": "string",
        "name": "token",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "formData",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "id",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Deletes specified images from a folder by sending a PATCH request to the API.",
    "inner_function_calls": [
      {
        "name": "patch",
        "import_path": "axios"
      }
    ],
    "output": {
      "type": "object",
      "description": "The response from the PATCH request indicating the success of the image deletion."
    }
  },
  {
    "folder_path": "src/utils/apiInstance.js",
    "module_name": "mainInstance.js",
    "method_name": "deleteFolder",
    "input_params": [
      {
        "type": "string",
        "name": "token",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "id",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Deletes a folder by sending a DELETE request to the API, removing it from the backend.",
    "inner_function_calls": [
      {
        "name": "delete",
        "import_path": "axios"
      }
    ],
    "output": {
      "type": "object",
      "description": "The response from the DELETE request confirming the folder deletion."
    }
  },
  {
    "folder_path": "src/utils/apiInstance.js",
    "module_name": "mainInstance.js",
    "method_name": "updateUser",
    "input_params": [
      {
        "type": "string",
        "name": "token",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "id",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "formData",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Updates user data using a PATCH request to the appropriate API endpoint, modifying user information as needed.",
    "inner_function_calls": [
      {
        "name": "patch",
        "import_path": "axios"
      }
    ],
    "output": {
      "type": "object",
      "description": "The response from the PATCH request indicating the success or failure of the user update."
    }
  },
  {
    "folder_path": "src/utils",
    "module_name": "auth.js",
    "method_name": "currentAuthenticatedUser",
    "input_params": [
      {
        "type": "object",
        "name": "router",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "boolean",
        "name": "protectedPage",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "The function checks if there is an authenticated user by retrieving the access token using the AWS Amplify library. If there is an access token and the page is not protected, it redirects to the '/dashboard'. If there is an error and the page is protected, it redirects the user to the '/' route. This function is typically used to manage user session in Next.js applications with protected routes.",
    "inner_function_calls": [
      {
        "name": "fetchAuthSession",
        "import_path": "aws-amplify/auth"
      }
    ],
    "output": {
      "type": "undefined",
      "description": "This function does not return an output explicitly as it is used for side effects like redirection."
    }
  },
  {
    "folder_path": "src/utils",
    "module_name": "auth.js",
    "method_name": "signoutUser",
    "input_params": [
      {
        "type": "object",
        "name": "props",
        "is_required": "",
        "optional_value": "{}"
      }
    ],
    "logic": "The function handles the user sign-out process. It uses the signOut function from the AWS Amplify library, setting OAuth redirection URL from environment variables. If a dispatch function is provided, it uses it to clear the user's token and profile picture in the Redux store. After signing out, if a router is provided, it redirects the user to the login page. This function is essential in a Next.js app to manage user authentication state and logout behavior.",
    "inner_function_calls": [
      {
        "name": "signOut",
        "import_path": "aws-amplify/auth"
      },
      {
        "name": "deleteToken",
        "import_path": "../redux/slices"
      },
      {
        "name": "deleteProfilePicUrl",
        "import_path": "../redux/slices"
      }
    ],
    "output": {
      "type": "undefined",
      "description": "This function also does not return an output explicitly as it is primarily used for side effects involved in user sign-out."
    }
  },
  {
    "folder_path": "src/utils",
    "module_name": "cssStyles.js",
    "method_name": "bgBlur",
    "input_params": [
      {
        "type": "object",
        "name": "props",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "The bgBlur function generates styles for a background with a blur effect, optionally incorporating an image, color, blur radius, and opacity based on the provided props. It conditionally styles the component depending on whether an imgUrl is provided.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "The output is an object containing CSS styles for the background blur effect."
    }
  },
  {
    "folder_path": "src/utils",
    "module_name": "cssStyles.js",
    "method_name": "bgGradient",
    "input_params": [
      {
        "type": "object",
        "name": "props",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "The bgGradient function generates a CSS style for a gradient background, which can use a linear gradient or include an image as part of the background. The direction, start and end colors, imgUrl, and a fallback color can be customized through the props parameter.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "The output is an object containing CSS styles for the gradient background."
    }
  },
  {
    "folder_path": "src/utils",
    "module_name": "cssStyles.js",
    "method_name": "textGradient",
    "input_params": [
      {
        "type": "string",
        "name": "value",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "The textGradient function returns styles that create a gradient effect on text. It uses a WebKit-specific linear gradient and sets the text color to transparent to allow the background gradient to show through.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "The output is an object containing CSS styles for text with a gradient effect."
    }
  },
  {
    "folder_path": "src/utils",
    "module_name": "cssStyles.js",
    "method_name": "filterStyles",
    "input_params": [
      {
        "type": "string",
        "name": "value",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "The filterStyles function returns an object containing CSS styles to apply CSS filters, which can be used to modify the appearance of an element through effects such as blur or brightness.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "The output is an object containing CSS filter styles."
    }
  },
  {
    "folder_path": "src/utils",
    "module_name": "formatNumber.js",
    "method_name": "fNumber",
    "input_params": [
      {
        "type": "number",
        "name": "number",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Formats a given number using the numeral library and returns it as a formatted string. This function serves as a utility to present numbers in a more readable format within a Next.js application.",
    "inner_function_calls": [
      {
        "name": "format",
        "import_path": "numeral"
      }
    ],
    "output": {
      "type": "string",
      "description": "Returns a formatted string representation of the input number."
    }
  },
  {
    "folder_path": "src/utils",
    "module_name": "formatNumber.js",
    "method_name": "fCurrency",
    "input_params": [
      {
        "type": "number",
        "name": "number",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Formats a given number as a currency string. If the input number is falsy, it returns an empty string. This function provides currency formatting useful in financial components or monetary displays in Next.js.",
    "inner_function_calls": [
      {
        "name": "format",
        "import_path": "numeral"
      },
      {
        "name": "result",
        "import_path": "."
      }
    ],
    "output": {
      "type": "string",
      "description": "Returns a formatted currency string if the number is valid, or an empty string."
    }
  },
  {
    "folder_path": "src/utils",
    "module_name": "formatNumber.js",
    "method_name": "fPercent",
    "input_params": [
      {
        "type": "number",
        "name": "number",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Converts a given number into a percentage format string. If the number is falsy, it returns an empty string. This method is valuable for displaying percentage values clearly in UI components of a Next.js application.",
    "inner_function_calls": [
      {
        "name": "format",
        "import_path": "numeral"
      },
      {
        "name": "result",
        "import_path": "."
      }
    ],
    "output": {
      "type": "string",
      "description": "Returns a formatted percentage string or an empty string if the number is falsy."
    }
  },
  {
    "folder_path": "src/utils",
    "module_name": "formatNumber.js",
    "method_name": "fShortenNumber",
    "input_params": [
      {
        "type": "number",
        "name": "number",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Shortens the numeric value into a more compact format. For example, 1,000 can become '1k'. This function is useful for displaying large numbers concisely in a Next.js application's UI.",
    "inner_function_calls": [
      {
        "name": "format",
        "import_path": "numeral"
      },
      {
        "name": "result",
        "import_path": "."
      }
    ],
    "output": {
      "type": "string",
      "description": "Returns a shortened formatted string representation of the input number."
    }
  },
  {
    "folder_path": "src/utils",
    "module_name": "formatNumber.js",
    "method_name": "fData",
    "input_params": [
      {
        "type": "number",
        "name": "number",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Formats a number representing data size (e.g., bytes) into a human-readable string. If the input number is falsy, it returns an empty string. This is particularly useful in applications that involve data metrics or storage information.",
    "inner_function_calls": [
      {
        "name": "format",
        "import_path": "numeral"
      },
      {
        "name": "result",
        "import_path": "."
      }
    ],
    "output": {
      "type": "string",
      "description": "Returns a formatted data size string or an empty string if the number is falsy."
    }
  },
  {
    "folder_path": "src/utils",
    "module_name": "formatNumber.js",
    "method_name": "result",
    "input_params": [
      {
        "type": "string",
        "name": "format",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "key",
        "is_required": "",
        "optional_value": ".00"
      }
    ],
    "logic": "Determines whether the formatted number is an integer by checking for the presence of the specified key, then modifies the format accordingly. This helper function aids in the output formatting logic of other functions in this module.",
    "inner_function_calls": [],
    "output": {
      "type": "string",
      "description": "Returns the adjusted formatted string based on whether it is an integer or not."
    }
  },
  {
    "folder_path": "src/utils",
    "module_name": "formatTime.js",
    "method_name": "fDate",
    "input_params": [
      {
        "type": "Date | string",
        "name": "date",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "newFormat",
        "is_required": "false",
        "optional_value": "dd MMM yyyy"
      }
    ],
    "logic": "Formats a date using the specified format or a default format if none is provided. It converts the input date to a new format for display purposes.",
    "inner_function_calls": [
      {
        "name": "format",
        "import_path": "date-fns"
      }
    ],
    "output": {
      "type": "string",
      "description": "Returns the formatted date as a string, or an empty string if no date is provided."
    }
  },
  {
    "folder_path": "src/utils",
    "module_name": "formatTime.js",
    "method_name": "fDateTime",
    "input_params": [
      {
        "type": "Date | string",
        "name": "date",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "newFormat",
        "is_required": "false",
        "optional_value": "dd MMM yyyy p"
      }
    ],
    "logic": "Formats a date and time using the specified format or a default format if none is provided. This function is useful for displaying dates with both date and time components.",
    "inner_function_calls": [
      {
        "name": "format",
        "import_path": "date-fns"
      }
    ],
    "output": {
      "type": "string",
      "description": "Returns the formatted date and time as a string, or an empty string if no date is provided."
    }
  },
  {
    "folder_path": "src/utils",
    "module_name": "formatTime.js",
    "method_name": "fTimestamp",
    "input_params": [
      {
        "type": "Date | string",
        "name": "date",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Converts a date to a Unix timestamp in milliseconds. This function is particularly useful for backend processing or comparisons of time.",
    "inner_function_calls": [
      {
        "name": "getTime",
        "import_path": "date-fns"
      }
    ],
    "output": {
      "type": "string",
      "description": "Returns the Unix timestamp as a string, or an empty string if no date is provided."
    }
  },
  {
    "folder_path": "src/utils",
    "module_name": "formatTime.js",
    "method_name": "fToNow",
    "input_params": [
      {
        "type": "Date | string",
        "name": "date",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Calculates the distance from the current time to the provided date, returning a human-readable string indicating how long ago or how long from now that date is.",
    "inner_function_calls": [
      {
        "name": "formatDistanceToNow",
        "import_path": "date-fns"
      }
    ],
    "output": {
      "type": "string",
      "description": "Returns a string representation of the time elapsed or remaining until the specified date, or an empty string if no date is provided."
    }
  },
  {
    "folder_path": "src/utils",
    "module_name": "functions.js",
    "method_name": "handleMouseMove3dCard",
    "input_params": [
      {
        "type": "MouseEvent",
        "name": "e",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "Object",
        "name": "bounds",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "Object",
        "name": "cardRef",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Handles mouse movement over a 3D card, applying transformations and glow effects based on mouse position.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "No return value; modifies DOM elements directly."
    }
  },
  {
    "folder_path": "src/utils",
    "module_name": "functions.js",
    "method_name": "handleGlowOnMouseMove",
    "input_params": [
      {
        "type": "MouseEvent",
        "name": "e",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "Object",
        "name": "bounds",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "Object",
        "name": "cardRef",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Handles mouse movement to update the glow effect on a card, based on mouse position relative to the card's bounds.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "No return value; modifies DOM elements directly."
    }
  },
  {
    "folder_path": "src/utils",
    "module_name": "functions.js",
    "method_name": "getExtensionFromMimeType",
    "input_params": [
      {
        "type": "string",
        "name": "mimeType",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Retrieves the file extension associated with a given MIME type using the mime-db.",
    "inner_function_calls": [],
    "output": {
      "type": "string|null",
      "description": "Returns the file extension associated with the MIME type or null if not found."
    }
  },
  {
    "folder_path": "src/utils",
    "module_name": "functions.js",
    "method_name": "base64ToBlob",
    "input_params": [
      {
        "type": "string",
        "name": "base64",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "contentType",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "number",
        "name": "sliceSize",
        "is_required": "",
        "optional_value": "512"
      }
    ],
    "logic": "Converts a Base64 encoded string to a Blob object.",
    "inner_function_calls": [],
    "output": {
      "type": "Blob",
      "description": "Returns a Blob object representing the binary large object created from the Base64 input."
    }
  },
  {
    "folder_path": "src/utils",
    "module_name": "functions.js",
    "method_name": "handleFillImages",
    "input_params": [
      {
        "type": "Array",
        "name": "allImagesData",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "number",
        "name": "scrollCount",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "Array",
        "name": "imagesGroup",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "function",
        "name": "setImagesGroup",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "number",
        "name": "PAGE_IMAGES_SIZE",
        "is_required": "",
        "optional_value": "3"
      },
      {
        "type": "number",
        "name": "COLUMN_SIZE",
        "is_required": "",
        "optional_value": "3"
      }
    ],
    "logic": "Fills the images group data based on the current scroll count and state management using setImagesGroup.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "No return value; directly modifies state to update the images group."
    }
  },
  {
    "folder_path": "src/utils",
    "module_name": "functions.js",
    "method_name": "decodeToken",
    "input_params": [
      {
        "type": "string",
        "name": "token",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Decodes a JWT token to retrieve its payload data.",
    "inner_function_calls": [],
    "output": {
      "type": "Object",
      "description": "Returns the parsed payload from the decoded token."
    }
  },
  {
    "folder_path": "src/utils",
    "module_name": "functions.js",
    "method_name": "getTokens",
    "input_params": [],
    "logic": "Fetches authentication tokens from the session using AWS Amplify's fetchAuthSession function.",
    "inner_function_calls": [
      {
        "name": "fetchAuthSession",
        "import_path": "aws-amplify/auth"
      }
    ],
    "output": {
      "type": "Object",
      "description": "Returns an object containing the ID token."
    }
  },
  {
    "folder_path": "src/utils",
    "module_name": "functions.js",
    "method_name": "checkExpiration",
    "input_params": [
      {
        "type": "number",
        "name": "expirationTimeInSeconds",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Checks if the token has expired based on the current time and the provided expiration time.",
    "inner_function_calls": [],
    "output": {
      "type": "boolean",
      "description": "Returns true if the token has expired, otherwise false."
    }
  },
  {
    "folder_path": "src/utils",
    "module_name": "functions.js",
    "method_name": "setupToken",
    "input_params": [
      {
        "type": "function",
        "name": "fetchAuthSession",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "function",
        "name": "dispatch",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "Object",
        "name": "userData",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "Object",
        "name": "tokens",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Sets up the authentication token, handling refreshing and saving it accordingly based on user data and token validity.",
    "inner_function_calls": [
      {
        "name": "fetchAuthSession",
        "import_path": "aws-amplify/auth"
      },
      {
        "name": "setToken",
        "import_path": "../redux/slices"
      }
    ],
    "output": {
      "type": "Object|string",
      "description": "Returns user session data or a styled component reference if the token needs to be refreshed."
    }
  },
  {
    "folder_path": "src/utils",
    "module_name": "functions.js",
    "method_name": "deviceInfo",
    "input_params": [],
    "logic": "Retrieves the user agent information to determine device or browser specifics.",
    "inner_function_calls": [],
    "output": {
      "type": "string",
      "description": "Returns the user agent string from the navigator."
    }
  },
  {
    "folder_path": "src/utils",
    "module_name": "functions.js",
    "method_name": "generateLink",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "owner",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "expiresIn",
        "is_required": "",
        "optional_value": "1h"
      },
      {
        "type": "string",
        "name": "baseUrl",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "role",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "folderId",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Generates a shareable URL link for an album using JWT for authorization, including optional folder identification.",
    "inner_function_calls": [
      {
        "name": "jwt.sign",
        "import_path": "jsonwebtoken"
      }
    ],
    "output": {
      "type": "string",
      "description": "Returns a shareable URL containing the album ID and JWT token."
    }
  },
  {
    "folder_path": "src/utils",
    "module_name": "functions.js",
    "method_name": "verifyShareToken",
    "input_params": [
      {
        "type": "string",
        "name": "token",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "type",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Verifies a JWT token based on specified criteria and returns the verification result.",
    "inner_function_calls": [
      {
        "name": "jwt.verify",
        "import_path": "jsonwebtoken"
      }
    ],
    "output": {
      "type": "boolean|Object",
      "description": "Returns true if the token is valid; otherwise false."
    }
  },
  {
    "folder_path": "src/utils",
    "module_name": "functions.js",
    "method_name": "getCroppedImg",
    "input_params": [
      {
        "type": "string",
        "name": "imageSrc",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "Object",
        "name": "crop",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "fileName",
        "is_required": "",
        "optional_value": "croppedImage.jpg"
      }
    ],
    "logic": "Crops an image based on the provided specifications and returns a Blob of the cropped image.",
    "inner_function_calls": [],
    "output": {
      "type": "Promise",
      "description": "Returns a promise resolving to a Blob of the cropped image."
    }
  },
  {
    "folder_path": "src/utils",
    "module_name": "functions.js",
    "method_name": "getSortAlbums",
    "input_params": [
      {
        "type": "string",
        "name": "selectedSortBy",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "Array",
        "name": "albumData",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Sorts the album data based on a selected criteria such as alphabetical order or creation date.",
    "inner_function_calls": [],
    "output": {
      "type": "Array",
      "description": "Returns a sorted array of albums based on the selected criteria."
    }
  },
  {
    "folder_path": "src/utils",
    "module_name": "functions.js",
    "method_name": "nextImageUrl",
    "input_params": [
      {
        "type": "string",
        "name": "src",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "number",
        "name": "size",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Generates a URL for optimized image loading in Next.js using the `/next/image` component convention.",
    "inner_function_calls": [],
    "output": {
      "type": "string",
      "description": "Returns the formatted image URL for the Next.js imaging optimization."
    }
  },
  {
    "folder_path": "src/utils",
    "module_name": "i18n.js",
    "method_name": "init",
    "input_params": [
      {
        "type": "object",
        "name": "options",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Initializes the i18n instance with configuration options for translation, including fallback language, debugging, and loading path for the translation files.",
    "inner_function_calls": [
      {
        "name": "use",
        "import_path": "i18next"
      },
      {
        "name": "use",
        "import_path": "i18next-http-backend"
      },
      {
        "name": "use",
        "import_path": "i18next-browser-languagedetector"
      },
      {
        "name": "use",
        "import_path": "react-i18next"
      }
    ],
    "output": {
      "type": "object",
      "description": "The i18n instance that is initialized and configured for use with React and other functionalities."
    }
  },
  {
    "folder_path": "src/utils",
    "module_name": "regex.js",
    "method_name": "phoneRegExp",
    "input_params": [],
    "logic": "Defines a regular expression to validate phone numbers. This regex pattern adheres to common international formats, including optional country codes and various separators like spaces and hyphens.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "This output represents a regex pattern used to validate telephone numbers, which can be used in forms or input validation for various use cases in a Next.js application."
    }
  },
  {
    "folder_path": "src/utils",
    "module_name": "uploadFile.js",
    "method_name": "uploadImages",
    "input_params": [
      {
        "type": "Array<File>",
        "name": "files",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "function",
        "name": "onUploadProgress",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "prefix",
        "is_required": "false",
        "optional_value": ""
      }
    ],
    "logic": "The function handles the upload of multiple image files to an AWS S3 bucket using a pre-signed URL obtained from a backend API. It generates a unique ID for each file and tracks the upload progress if a callback function is provided.",
    "inner_function_calls": [
      {
        "name": "axios.get",
        "import_path": "axios"
      },
      {
        "name": "axios.put",
        "import_path": "axios"
      },
      {
        "name": "uuidv4",
        "import_path": "uuid"
      }
    ],
    "output": {
      "type": "Array<Object>",
      "description": "An array of objects containing the details of successfully uploaded images, including their unique names, generated IDs, and types."
    }
  },
  {
    "folder_path": "src/utils",
    "module_name": "uploadImages.js",
    "method_name": "uploadImages",
    "input_params": [
      {
        "type": "Array",
        "name": "files",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "Function",
        "name": "onUploadProgress",
        "is_required": "false",
        "optional_value": ""
      },
      {
        "type": "String",
        "name": "prefix",
        "is_required": "false",
        "optional_value": ""
      },
      {
        "type": "String",
        "name": "owner",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Handles image file uploads by generating pre-signed URLs for uploading to S3 and tracking upload progress. Uses Promise.all to manage multiple concurrent uploads.",
    "inner_function_calls": [
      {
        "name": "axios.get",
        "import_path": "axios"
      },
      {
        "name": "axios.put",
        "import_path": "axios"
      },
      {
        "name": "uuidv4",
        "import_path": "uuid"
      }
    ],
    "output": {
      "type": "Promise",
      "description": "A promise that resolves to an array of image metadata objects after all files are uploaded."
    }
  },
  {
    "folder_path": "tests/e2e/auth",
    "module_name": "albumsPage.spec.js",
    "method_name": "login page",
    "input_params": [],
    "logic": "This function is a Playwright test step that focuses on logging into the application and verifying the visibility of login form elements.",
    "inner_function_calls": [
      {
        "name": "page.goto",
        "import_path": "@playwright/test"
      },
      {
        "name": "page.waitForTimeout",
        "import_path": "@playwright/test"
      },
      {
        "name": "page.getByPlaceholder",
        "import_path": "@playwright/test"
      },
      {
        "name": "page.getByRole",
        "import_path": "@playwright/test"
      },
      {
        "name": "page.fill",
        "import_path": "@playwright/test"
      },
      {
        "name": "page.click",
        "import_path": "@playwright/test"
      },
      {
        "name": "page.waitForURL",
        "import_path": "@playwright/test"
      }
    ],
    "output": {
      "type": "undefined",
      "description": "This is a setup phase for tests with no direct output but ensures the page is prepared for subsequent tests."
    }
  },
  {
    "folder_path": "tests/e2e/auth",
    "module_name": "albumsPage.spec.js",
    "method_name": "albums page",
    "input_params": [],
    "logic": "This function describes a group of tests related to the albums page of the application. It contains a beforeEach function to check for visibility of page elements.",
    "inner_function_calls": [
      {
        "name": "page.getByRole",
        "import_path": "@playwright/test"
      }
    ],
    "output": {
      "type": "undefined",
      "description": "Acts as a container for tests concerning the albums page."
    }
  },
  {
    "folder_path": "tests/e2e/auth",
    "module_name": "albumsPage.spec.js",
    "method_name": "album card check",
    "input_params": [],
    "logic": "This function tests the visibility and state validation of an album card on the albums page.",
    "inner_function_calls": [
      {
        "name": "page.isVisible",
        "import_path": "@playwright/test"
      }
    ],
    "output": {
      "type": "undefined",
      "description": "Verifies the existence of an album card but has no output."
    }
  },
  {
    "folder_path": "tests/e2e/auth",
    "module_name": "albumsPage.spec.js",
    "method_name": "add album",
    "input_params": [],
    "logic": "This function tests the entire flow for adding a new album, including visibility checks and interactions for form submission.",
    "inner_function_calls": [
      {
        "name": "page.getByRole",
        "import_path": "@playwright/test"
      },
      {
        "name": "page.click",
        "import_path": "@playwright/test"
      },
      {
        "name": "page.fill",
        "import_path": "@playwright/test"
      },
      {
        "name": "page.waitForSelector",
        "import_path": "@playwright/test"
      }
    ],
    "output": {
      "type": "undefined",
      "description": "Handles the logic for adding a new album but does not return a value."
    }
  },
  {
    "folder_path": "tests/e2e/auth",
    "module_name": "albumsPage.spec.js",
    "method_name": "edit album",
    "input_params": [],
    "logic": "This function tests the editing capabilities for an existing album, including visibility checks and interactions within the edit form.",
    "inner_function_calls": [
      {
        "name": "page.click",
        "import_path": "@playwright/test"
      },
      {
        "name": "page.fill",
        "import_path": "@playwright/test"
      },
      {
        "name": "page.locator",
        "import_path": "@playwright/test"
      },
      {
        "name": "page.waitForTimeout",
        "import_path": "@playwright/test"
      },
      {
        "name": "page.getByRole",
        "import_path": "@playwright/test"
      }
    ],
    "output": {
      "type": "undefined",
      "description": "Executes the actions to modify an album and doesn't return a value."
    }
  },
  {
    "folder_path": "tests/e2e/auth",
    "module_name": "albumsPage.spec.js",
    "method_name": "edit album with logo upload",
    "input_params": [],
    "logic": "This function tests the editing of an album that includes uploading an album logo, verifying intermediate states, and confirming successful changes.",
    "inner_function_calls": [
      {
        "name": "page.click",
        "import_path": "@playwright/test"
      },
      {
        "name": "page.waitForTimeout",
        "import_path": "@playwright/test"
      },
      {
        "name": "page.getByRole",
        "import_path": "@playwright/test"
      },
      {
        "name": "page.locator",
        "import_path": "@playwright/test"
      },
      {
        "name": "page.setInputFiles",
        "import_path": "@playwright/test"
      }
    ],
    "output": {
      "type": "undefined",
      "description": "Tests the editing process including the image upload, without returning an output."
    }
  },
  {
    "folder_path": "tests/e2e/auth",
    "module_name": "albumsPage.spec.js",
    "method_name": "share album",
    "input_params": [],
    "logic": "This function tests the sharing functionality of an album, verifying that the share dialog and its elements are correctly displayed.",
    "inner_function_calls": [
      {
        "name": "page.getByRole",
        "import_path": "@playwright/test"
      },
      {
        "name": "page.fill",
        "import_path": "@playwright/test"
      },
      {
        "name": "page.click",
        "import_path": "@playwright/test"
      }
    ],
    "output": {
      "type": "undefined",
      "description": "Verifies album sharing capabilities without producing an output."
    }
  },
  {
    "folder_path": "tests/e2e/auth",
    "module_name": "albumsPage.spec.js",
    "method_name": "delete album",
    "input_params": [],
    "logic": "This function tests the delete behavior of an album, confirming prompts and waiting for confirmation messages.",
    "inner_function_calls": [
      {
        "name": "page.click",
        "import_path": "@playwright/test"
      },
      {
        "name": "page.waitForSelector",
        "import_path": "@playwright/test"
      }
    ],
    "output": {
      "type": "undefined",
      "description": "Ensures the deletion process of an album is executed without returning a value."
    }
  },
  {
    "folder_path": "tests/e2e/auth",
    "module_name": "foldersPage.spec.js",
    "method_name": "beforeEach",
    "input_params": [
      {
        "type": "function",
        "name": "test.beforeEach",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This is a Playwright test lifecycle hook that runs before each test case in the suite. It navigates to the login page and performs actions to log in using provided credentials. It checks for visibility of elements and ensures the user is redirected to the appropriate album page after logging in.",
    "inner_function_calls": [
      {
        "name": "page.goto",
        "import_path": "@playwright/test"
      },
      {
        "name": "page.waitForTimeout",
        "import_path": "@playwright/test"
      },
      {
        "name": "page.getByPlaceholder",
        "import_path": "@playwright/test"
      },
      {
        "name": "page.click",
        "import_path": "@playwright/test"
      },
      {
        "name": "page.fill",
        "import_path": "@playwright/test"
      },
      {
        "name": "page.getByRole",
        "import_path": "@playwright/test"
      },
      {
        "name": "page.waitForURL",
        "import_path": "@playwright/test"
      }
    ],
    "output": {
      "type": "void",
      "description": "This method does not return a value; it sets up the state before executing each test."
    }
  },
  {
    "folder_path": "tests/e2e/auth",
    "module_name": "foldersPage.spec.js",
    "method_name": "test",
    "input_params": [
      {
        "type": "string",
        "name": "add album",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "function",
        "name": "async ({ page }) => {...}",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This test case involves adding a new album. It checks the initial state, navigates to create a new album, and fills in the required fields before submitting the form. It also confirms the successful creation of the album through various assertions.",
    "inner_function_calls": [
      {
        "name": "expect",
        "import_path": "@playwright/test"
      },
      {
        "name": "page.getByRole",
        "import_path": "@playwright/test"
      },
      {
        "name": "page.click",
        "import_path": "@playwright/test"
      },
      {
        "name": "page.waitForSelector",
        "import_path": "@playwright/test"
      }
    ],
    "output": {
      "type": "void",
      "description": "No direct return value; results are determined by assertions checking UI elements."
    }
  },
  {
    "folder_path": "tests/e2e/auth",
    "module_name": "foldersPage.spec.js",
    "method_name": "test.describe",
    "input_params": [
      {
        "type": "string",
        "name": "album folder page",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This groups multiple related test cases together, specifically tests related to operations performed on the album folder page.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "Not applicable as it serves as a container for organizing tests."
    }
  },
  {
    "folder_path": "tests/e2e/auth",
    "module_name": "foldersPage.spec.js",
    "method_name": "test",
    "input_params": [
      {
        "type": "string",
        "name": "create folder",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "function",
        "name": "async ({ page }) => {...}",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This test case verifies the creation of a new folder within an album. It checks for visibility of elements relating to folder creation and performs actions to successfully create a folder.",
    "inner_function_calls": [
      {
        "name": "expect",
        "import_path": "@playwright/test"
      },
      {
        "name": "page.getByText",
        "import_path": "@playwright/test"
      },
      {
        "name": "page.click",
        "import_path": "@playwright/test"
      },
      {
        "name": "page.waitForSelector",
        "import_path": "@playwright/test"
      }
    ],
    "output": {
      "type": "void",
      "description": "No direct return value; it relies on assertions and checks visibility."
    }
  },
  {
    "folder_path": "tests/e2e/auth",
    "module_name": "foldersPage.spec.js",
    "method_name": "test",
    "input_params": [
      {
        "type": "string",
        "name": "edit folder",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "function",
        "name": "async ({ page }) => {...}",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This test case focuses on editing an existing folder's name within an album. It confirms the folder's current name, allows for modification, and submits changes while asserting the existence of success notifications.",
    "inner_function_calls": [
      {
        "name": "expect",
        "import_path": "@playwright/test"
      },
      {
        "name": "page.getByRole",
        "import_path": "@playwright/test"
      },
      {
        "name": "page.inputValue",
        "import_path": "@playwright/test"
      },
      {
        "name": "page.waitForSelector",
        "import_path": "@playwright/test"
      }
    ],
    "output": {
      "type": "void",
      "description": "No direct return value, primarily focusing on UI confirmations and assertions."
    }
  },
  {
    "folder_path": "tests/e2e/auth",
    "module_name": "foldersPage.spec.js",
    "method_name": "test",
    "input_params": [
      {
        "type": "string",
        "name": "delete folder",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "function",
        "name": "async ({ page }) => {...}",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This test case is for deleting an existing folder. It ensures the necessary UI elements are visible, confirms user intent through prompts, and asserts successful deletion.",
    "inner_function_calls": [
      {
        "name": "expect",
        "import_path": "@playwright/test"
      },
      {
        "name": "page.click",
        "import_path": "@playwright/test"
      },
      {
        "name": "page.waitForSelector",
        "import_path": "@playwright/test"
      }
    ],
    "output": {
      "type": "void",
      "description": "No direct return value; results depend on the outcome of the deletion process."
    }
  },
  {
    "folder_path": "tests/e2e/auth",
    "module_name": "foldersPage.spec.js",
    "method_name": "test",
    "input_params": [
      {
        "type": "string",
        "name": "delete album",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "function",
        "name": "async ({ page }) => {...}",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This test case handles the deletion of an album. It confirms visibility of key elements, ensures correct prompts are shown, and validates successful deletion.",
    "inner_function_calls": [
      {
        "name": "expect",
        "import_path": "@playwright/test"
      },
      {
        "name": "page.click",
        "import_path": "@playwright/test"
      },
      {
        "name": "page.waitForSelector",
        "import_path": "@playwright/test"
      }
    ],
    "output": {
      "type": "void",
      "description": "No direct return value; driven by assertions checking the UI."
    }
  },
  {
    "folder_path": "tests/e2e/unauth",
    "module_name": "homePage.spec.js",
    "method_name": "beforeEach",
    "input_params": [
      {
        "type": "string",
        "name": "description",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "function",
        "name": "callback",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Sets up a routine to run before each test, navigating to the home page in this context.",
    "inner_function_calls": [],
    "output": {
      "type": "null",
      "description": "Does not return a value; it sets up the test environment."
    }
  },
  {
    "folder_path": "tests/e2e/unauth",
    "module_name": "homePage.spec.js",
    "method_name": "describe",
    "input_params": [
      {
        "type": "string",
        "name": "description",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "function",
        "name": "callback",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Groups multiple tests related to the home page together for organization and structure.",
    "inner_function_calls": [],
    "output": {
      "type": "null",
      "description": "Does not return a value; it organizes tests."
    }
  },
  {
    "folder_path": "tests/e2e/unauth",
    "module_name": "homePage.spec.js",
    "method_name": "forEach",
    "input_params": [
      {
        "type": "array",
        "name": "array",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "function",
        "name": "callback",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Iterates over the array of display sizes to create individual tests for each screen size.",
    "inner_function_calls": [],
    "output": {
      "type": "null",
      "description": "Does not return a value; it sets up tests."
    }
  },
  {
    "folder_path": "tests/e2e/unauth",
    "module_name": "homePage.spec.js",
    "method_name": "test",
    "input_params": [
      {
        "type": "string",
        "name": "description",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "function",
        "name": "callback",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Defines individual tests, checking if various components are visible on the home page for the specified display sizes.",
    "inner_function_calls": [
      {
        "name": "setViewportSize",
        "import_path": "@playwright/test"
      },
      {
        "name": "getByRole",
        "import_path": "@playwright/test"
      },
      {
        "name": "getByText",
        "import_path": "@playwright/test"
      },
      {
        "name": "getAttribute",
        "import_path": "@playwright/test"
      },
      {
        "name": "locator",
        "import_path": "@playwright/test"
      }
    ],
    "output": {
      "type": "null",
      "description": "Does not return a value; it performs assertions on the page."
    }
  },
  {
    "folder_path": "tests/e2e/unauth",
    "module_name": "loginPage.spec.js",
    "method_name": "beforeEach",
    "input_params": [
      {
        "type": "string",
        "name": "description",
        "is_required": "/undefined",
        "optional_value": "login page"
      },
      {
        "type": "object",
        "name": "options",
        "is_required": "/undefined",
        "optional_value": "null"
      }
    ],
    "logic": "This is a Playwright test setup function that runs before each test in the suite. It navigates to the login page and waits for 2 seconds to ensure the page is fully loaded.",
    "inner_function_calls": [
      {
        "name": "goto",
        "import_path": "@playwright/test"
      },
      {
        "name": "waitForTimeout",
        "import_path": "@playwright/test"
      }
    ],
    "output": {
      "type": "void",
      "description": "This function does not return a value, as it is intended for setup actions before tests."
    }
  },
  {
    "folder_path": "tests/e2e/unauth",
    "module_name": "loginPage.spec.js",
    "method_name": "beforeEach",
    "input_params": [
      {
        "type": "string",
        "name": "description",
        "is_required": "/undefined",
        "optional_value": "login before"
      },
      {
        "type": "object",
        "name": "options",
        "is_required": "/undefined",
        "optional_value": "null"
      }
    ],
    "logic": "This function is part of a nested describe block and sets up the conditions before running the tests in the login page suite. It checks if the logo text is visible after the viewport size is presumably set (though not implemented).",
    "inner_function_calls": [
      {
        "name": "expect",
        "import_path": "@playwright/test"
      },
      {
        "name": "getByText",
        "import_path": "@playwright/test"
      }
    ],
    "output": {
      "type": "void",
      "description": "This function does not return a value, as it is also for setup actions."
    }
  },
  {
    "folder_path": "tests/e2e/unauth",
    "module_name": "loginPage.spec.js",
    "method_name": "test",
    "input_params": [
      {
        "type": "string",
        "name": "description",
        "is_required": "/undefined",
        "optional_value": "login section"
      },
      {
        "type": "function",
        "name": "testFunction",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This is the main test case that verifies the elements on the login page are displayed correctly. It uses various assertions to check visibility and interactions with input fields and buttons.",
    "inner_function_calls": [
      {
        "name": "expect",
        "import_path": "@playwright/test"
      },
      {
        "name": "getByText",
        "import_path": "@playwright/test"
      },
      {
        "name": "getByPlaceholder",
        "import_path": "@playwright/test"
      },
      {
        "name": "getByRole",
        "import_path": "@playwright/test"
      },
      {
        "name": "click",
        "import_path": "@playwright/test"
      },
      {
        "name": "fill",
        "import_path": "@playwright/test"
      },
      {
        "name": "waitForURL",
        "import_path": "@playwright/test"
      }
    ],
    "output": {
      "type": "void",
      "description": "This function does not return a value, as it is a test case designed to check the functionality of the login UI."
    }
  },
  {
    "folder_path": "tests/integration",
    "module_name": "albumsService.spec.js",
    "method_name": "beforeEach",
    "input_params": [
      {
        "type": "object",
        "name": "context",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "playwright",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function sets up the test environment before each test runs. It ensures that the authToken is obtained through the loginAndGetToken function if it hasn't been set already, and it creates a new API context with the proper headers for authentication.",
    "inner_function_calls": [
      {
        "name": "loginAndGetToken",
        "import_path": "./function/auth"
      },
      {
        "name": "playwright.request.newContext",
        "import_path": "playwright"
      }
    ],
    "output": {
      "type": "void",
      "description": "This function does not return a value. It prepares the context for subsequent tests by ensuring an authenticated session."
    }
  },
  {
    "folder_path": "tests/integration",
    "module_name": "albumsService.spec.js",
    "method_name": "afterAll",
    "input_params": [
      {
        "type": "object",
        "name": "context",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function runs after all tests have completed, responsible for cleaning up by disposing of the API context, which helps to free resources.",
    "inner_function_calls": [
      {
        "name": "apiContext.dispose",
        "import_path": ""
      }
    ],
    "output": {
      "type": "void",
      "description": "This function performs cleanup operations without returning any value."
    }
  },
  {
    "folder_path": "tests/integration",
    "module_name": "albumsService.spec.js",
    "method_name": "create album",
    "input_params": [],
    "logic": "This test function creates a new album by sending a POST request to the API endpoint. It verifies that the album's data is returned and that necessary attributes are defined.",
    "inner_function_calls": [
      {
        "name": "apiContext.post",
        "import_path": ""
      },
      {
        "name": "response.json",
        "import_path": ""
      }
    ],
    "output": {
      "type": "void",
      "description": "This test does not return a value; it asserts the properties of the created album."
    }
  },
  {
    "folder_path": "tests/integration",
    "module_name": "albumsService.spec.js",
    "method_name": "get albums",
    "input_params": [],
    "logic": "This test function retrieves a list of albums available via the API. It checks that at least one album exists and that necessary details of the first album are defined.",
    "inner_function_calls": [
      {
        "name": "apiContext.get",
        "import_path": ""
      },
      {
        "name": "response.json",
        "import_path": ""
      }
    ],
    "output": {
      "type": "void",
      "description": "This test does not return a value; it asserts that albums are retrieved successfully and checks their properties."
    }
  },
  {
    "folder_path": "tests/integration",
    "module_name": "albumsService.spec.js",
    "method_name": "get album by id",
    "input_params": [],
    "logic": "It retrieves a specific album using its id. The function checks that the albumId is defined and validates the properties of the retrieved album.",
    "inner_function_calls": [
      {
        "name": "apiContext.get",
        "import_path": ""
      },
      {
        "name": "response.json",
        "import_path": ""
      }
    ],
    "output": {
      "type": "void",
      "description": "This test does not return a value; it asserts the properties of the fetched album by id."
    }
  },
  {
    "folder_path": "tests/integration",
    "module_name": "albumsService.spec.js",
    "method_name": "get album owner",
    "input_params": [],
    "logic": "This function retrieves the owner of a specific album by making a GET request to the endpoint with the albumId. It checks that the response is as expected.",
    "inner_function_calls": [
      {
        "name": "apiContext.get",
        "import_path": ""
      },
      {
        "name": "response.json",
        "import_path": ""
      }
    ],
    "output": {
      "type": "void",
      "description": "This test does not return a value; it checks that the album owner details are received successfully."
    }
  },
  {
    "folder_path": "tests/integration",
    "module_name": "albumsService.spec.js",
    "method_name": "update album",
    "input_params": [],
    "logic": "This test updates the album's name by sending a PATCH request. It verifies that the response contains the updated album's properties.",
    "inner_function_calls": [
      {
        "name": "apiContext.patch",
        "import_path": ""
      },
      {
        "name": "response.json",
        "import_path": ""
      }
    ],
    "output": {
      "type": "void",
      "description": "This test does not return a value; it asserts that the album's updated properties are correct."
    }
  },
  {
    "folder_path": "tests/integration",
    "module_name": "albumsService.spec.js",
    "method_name": "share album",
    "input_params": [],
    "logic": "It shares the album with specified user emails via a PATCH request. The function checks the response to ensure it returns the modified album details.",
    "inner_function_calls": [
      {
        "name": "apiContext.patch",
        "import_path": ""
      },
      {
        "name": "response.json",
        "import_path": ""
      }
    ],
    "output": {
      "type": "void",
      "description": "This test does not return a value; it checks that the album is shared successfully."
    }
  },
  {
    "folder_path": "tests/integration",
    "module_name": "albumsService.spec.js",
    "method_name": "delete album",
    "input_params": [],
    "logic": "This function deletes an album with a DELETE request and checks if the deletion was successful by validating the response details.",
    "inner_function_calls": [
      {
        "name": "apiContext.delete",
        "import_path": ""
      },
      {
        "name": "response.json",
        "import_path": ""
      }
    ],
    "output": {
      "type": "void",
      "description": "This test does not return a value; it asserts that the album is deleted and checks its deletion status."
    }
  },
  {
    "folder_path": "tests/integration",
    "module_name": "foldersService.spec.js",
    "method_name": "loginAndGetToken",
    "input_params": [
      {
        "type": "object",
        "name": "page",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function is utilized to log in and retrieve an authentication token, which will be used in API context to authorize requests.",
    "inner_function_calls": [
      {
        "name": "loginAndGetToken",
        "import_path": "./function/auth"
      }
    ],
    "output": {
      "type": "string",
      "description": "Returns the authentication token required for making authorized API requests."
    }
  },
  {
    "folder_path": "tests/integration",
    "module_name": "foldersService.spec.js",
    "method_name": "beforeEach",
    "input_params": [
      {
        "type": "object",
        "name": "test context",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Sets up the test environment by ensuring the authToken is valid and creates a new API context for subsequent requests. This method leverages Playwright's capabilities to handle HTTP contexts within tests.",
    "inner_function_calls": [
      {
        "name": "loginAndGetToken",
        "import_path": "./function/auth"
      },
      {
        "name": "newContext",
        "import_path": "@playwright/test"
      }
    ],
    "output": {
      "type": "void",
      "description": "No output is returned; sets up the necessary context for tests."
    }
  },
  {
    "folder_path": "tests/integration",
    "module_name": "foldersService.spec.js",
    "method_name": "afterAll",
    "input_params": [
      {
        "type": "object",
        "name": "",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Cleans up after all tests are completed by disposing the API context, ensuring that resources are released appropriately after tests conclude.",
    "inner_function_calls": [
      {
        "name": "dispose",
        "import_path": "@playwright/test"
      }
    ],
    "output": {
      "type": "void",
      "description": "No output is returned as this function provides cleanup functionality."
    }
  },
  {
    "folder_path": "tests/integration",
    "module_name": "foldersService.spec.js",
    "method_name": "describe",
    "input_params": [
      {
        "type": "string",
        "name": "description",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "function",
        "name": "callback function",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This method organizes tests into groups, allowing for better structure and readability. It is used here to categorize tests related to 'folders'.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "No output is returned; organizes tests into a group."
    }
  },
  {
    "folder_path": "tests/integration",
    "module_name": "foldersService.spec.js",
    "method_name": "post",
    "input_params": [
      {
        "type": "string",
        "name": "url",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "options",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Sends a POST request to create a new folder, utilizing the configured apiContext with the necessary authorization headers. Validates the folder creation response.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns the response from the API indicating the result of the folder creation."
    }
  },
  {
    "folder_path": "tests/integration",
    "module_name": "foldersService.spec.js",
    "method_name": "patch",
    "input_params": [
      {
        "type": "string",
        "name": "url",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "options",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Sends a PATCH request to update an existing folder with new information. It validates that the folder was updated successfully through a boolean check on the response.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns the response from the API, confirming the update of the folder."
    }
  },
  {
    "folder_path": "tests/integration",
    "module_name": "foldersService.spec.js",
    "method_name": "delete",
    "input_params": [
      {
        "type": "string",
        "name": "url",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Sends a DELETE request to remove a specified folder. This method checks the response to confirm successful deletion of the folder.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns the response from the API indicating the folder deletion status."
    }
  },
  {
    "folder_path": "tests/integration/function",
    "module_name": "auth.js",
    "method_name": "loginAndGetToken",
    "input_params": [
      {
        "type": "object",
        "name": "page",
        "is_required": "/true/",
        "optional_value": "undefined"
      }
    ],
    "logic": "This function is responsible for automating the login process in a web application. It navigates to the login page, fills in credentials, submits the form, waits for successful navigation, retrieves the authentication token from cookies, and returns that token. It is designed to work within the context of testing web applications using Playwright.",
    "inner_function_calls": [
      {
        "name": "page.goto",
        "import_path": "@playwright/test"
      },
      {
        "name": "page.getByText",
        "import_path": "@playwright/test"
      },
      {
        "name": "page.getByPlaceholder",
        "import_path": "@playwright/test"
      },
      {
        "name": "page.getByRole",
        "import_path": "@playwright/test"
      },
      {
        "name": "page.waitForURL",
        "import_path": "@playwright/test"
      },
      {
        "name": "page.context().cookies",
        "import_path": "@playwright/test"
      }
    ],
    "output": {
      "type": "string",
      "description": "Returns the authentication token extracted from the cookies after a successful login."
    }
  },
  {
    "folder_path": "tests/integration/function",
    "module_name": "auth.js",
    "method_name": "fetchWithRetry",
    "input_params": [
      {
        "type": "object",
        "name": "url",
        "is_required": "/true/",
        "optional_value": "null"
      },
      {
        "type": "number",
        "name": "retries",
        "is_required": "/false/",
        "optional_value": "5"
      }
    ],
    "logic": "This function is used for fetching data from a given URL with a retry mechanism. It attempts to make a GET request multiple times based on the specified number of retries if a 500 Internal Server Error occurs. It returns the JSON response upon success or throws an error after exceeding retries. This is useful for ensuring reliability in API requests within the context of Next.js or dynamic applications that may experience intermittent server issues.",
    "inner_function_calls": [
      {
        "name": "apiContext.get",
        "import_path": "apiContext"
      },
      {
        "name": "response.json",
        "import_path": "@playwright/test"
      },
      {
        "name": "setTimeout",
        "import_path": "global"
      },
      {
        "name": "console.log",
        "import_path": "global"
      },
      {
        "name": "console.error",
        "import_path": "global"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns the parsed JSON response from the API request if successful."
    }
  },
  {
    "folder_path": "tests",
    "module_name": "6l11eqdm4wf5iqx",
    "method_name": "createDefaultTodos",
    "input_params": [
      {
        "type": "object",
        "name": "page",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function creates default todo items by filling in a predefined list and pressing 'Enter' for each item, thereby simulating user input within a Playwright test context.",
    "inner_function_calls": [
      {
        "name": "page.getByPlaceholder",
        "import_path": "@playwright/test"
      }
    ],
    "output": {
      "type": "Promise",
      "description": "This function doesn't return anything explicitly; it alters the state of local storage by simulating the addition of todo items."
    }
  },
  {
    "folder_path": "tests",
    "module_name": "6l11eqdm4wf5iqx",
    "method_name": "checkNumberOfTodosInLocalStorage",
    "input_params": [
      {
        "type": "object",
        "name": "page",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "number",
        "name": "expected",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This async function checks the number of todos stored in local storage by waiting for a condition using 'page.waitForFunction' to match the expected count of todo items.",
    "inner_function_calls": [
      {
        "name": "page.waitForFunction",
        "import_path": "@playwright/test"
      }
    ],
    "output": {
      "type": "Promise",
      "description": "This function resolves when the expected number of todos is validated against the local storage count."
    }
  },
  {
    "folder_path": "tests",
    "module_name": "6l11eqdm4wf5iqx",
    "method_name": "checkNumberOfCompletedTodosInLocalStorage",
    "input_params": [
      {
        "type": "object",
        "name": "page",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "number",
        "name": "expected",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "Similar to checking for total todos, this function checks how many todos are completed by parsing the local storage and filtering for completed items, returning a promise when done.",
    "inner_function_calls": [
      {
        "name": "page.waitForFunction",
        "import_path": "@playwright/test"
      }
    ],
    "output": {
      "type": "Promise",
      "description": "The function resolves when it validates that the number of completed todos in local storage matches the expected count."
    }
  },
  {
    "folder_path": "tests",
    "module_name": "6l11eqdm4wf5iqx",
    "method_name": "checkTodosInLocalStorage",
    "input_params": [
      {
        "type": "object",
        "name": "page",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "string",
        "name": "title",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This checks if a specific todo title exists in local storage by waiting for a function to assess if the title is included in the stored todos.",
    "inner_function_calls": [
      {
        "name": "page.waitForFunction",
        "import_path": "@playwright/test"
      }
    ],
    "output": {
      "type": "Promise",
      "description": "The function resolves once it confirms the specific title exists within the local storage."
    }
  }
]