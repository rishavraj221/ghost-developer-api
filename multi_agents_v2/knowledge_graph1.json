[
  {
    "folder_path": "",
    "module_name": "index.js",
    "method_name": "connectToDB",
    "input_params": [],
    "logic": "This asynchronous function checks if the MongoDB connection is established. If not, it attempts to connect to the MongoDB database using the URI and database name provided in the config. If the connection is successful, a success message is logged. If there is an error in connecting to the database, it logs an error message and throws an error indicating the failure to connect.",
    "inner_function_calls": [
      {
        "name": "connect",
        "import_path": "mongoose"
      },
      {
        "name": "console.log",
        "import_path": "console"
      },
      {
        "name": "console.error",
        "import_path": "console"
      }
    ],
    "output": {
      "type": "undefined",
      "description": "This function does not return any value."
    }
  },
  {
    "folder_path": "",
    "module_name": "index.js",
    "method_name": "handler",
    "input_params": [
      {
        "type": "object",
        "name": "event",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "context",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "This function serves as a request handler for AWS Lambda by wrapping the Express app. It ensures that the event loop waits for the database connection to be established before forwarding the request to the Express app. It also sets the context parameter to prevent the Lambda function from being kept alive longer than necessary unless events are still being handled.",
    "inner_function_calls": [
      {
        "name": "connectToDB",
        "import_path": "./src/app.js"
      },
      {
        "name": "serverless",
        "import_path": "serverless-http"
      },
      {
        "name": "app",
        "import_path": "./src/app.js"
      }
    ],
    "output": {
      "type": "function",
      "description": "This function returns the result of invoking the Express app with the event and context parameters."
    }
  },
  {
    "folder_path": "src",
    "module_name": "app.js",
    "method_name": "app.use",
    "input_params": [
      {
        "type": "function",
        "name": "middleware",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This method is used to mount a middleware function or a set of middleware functions at the specified path of the Express application. Middleware functions execute during the request-response cycle, allowing for execution of code, modifying requests and responses, ending requests, and calling next middleware functions in the stack.",
    "inner_function_calls": [],
    "output": {
      "type": "undefined",
      "description": "The method does not return a value."
    }
  },
  {
    "folder_path": "src",
    "module_name": "app.js",
    "method_name": "app.use(helmet)",
    "input_params": [],
    "logic": "Integrates Helmet middleware which helps secure Express apps by setting various HTTP headers to improve security.",
    "inner_function_calls": [],
    "output": {
      "type": "undefined",
      "description": "The method does not return a value."
    }
  },
  {
    "folder_path": "src",
    "module_name": "app.js",
    "method_name": "app.use(cors)",
    "input_params": [
      {
        "type": "object",
        "name": "options",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Sets up CORS (Cross-Origin Resource Sharing) middleware with specified options to allow certain headers in requests from client applications.",
    "inner_function_calls": [],
    "output": {
      "type": "undefined",
      "description": "The method does not return a value."
    }
  },
  {
    "folder_path": "src",
    "module_name": "app.js",
    "method_name": "app.use(morgan)",
    "input_params": [
      {
        "type": "string",
        "name": "format",
        "is_required": "",
        "optional_value": "\"combined\""
      }
    ],
    "logic": "Integrates Morgan logging middleware into the app. It logs HTTP requests in the 'combined' Apache style format which includes information about requests made to the server.",
    "inner_function_calls": [],
    "output": {
      "type": "undefined",
      "description": "The method does not return a value."
    }
  },
  {
    "folder_path": "src",
    "module_name": "app.js",
    "method_name": "app.use(express.json)",
    "input_params": [],
    "logic": "Adds middleware that parses incoming requests with JSON payloads and is based on body-parser. This middleware is used to interpret JSON data in the body of incoming requests.",
    "inner_function_calls": [],
    "output": {
      "type": "undefined",
      "description": "The method does not return a value."
    }
  },
  {
    "folder_path": "src",
    "module_name": "app.js",
    "method_name": "app.use((req, res, next) => {...})",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "function",
        "name": "next",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Defines a custom middleware that adds Access-Control-Allow-Headers response headers and handles CORS preflight requests. If the request method is OPTIONS, it responds with a 204 No Content status. Otherwise, it calls the next middleware function in the stack.",
    "inner_function_calls": [],
    "output": {
      "type": "undefined",
      "description": "The method does not return a value."
    }
  },
  {
    "folder_path": "src",
    "module_name": "app.js",
    "method_name": "app.use(\"/\", homeRoutes)",
    "input_params": [],
    "logic": "Mounts the homeRoutes to the root path of the application, handling requests that come to the application root.",
    "inner_function_calls": [],
    "output": {
      "type": "undefined",
      "description": "The method does not return a value."
    }
  },
  {
    "folder_path": "src",
    "module_name": "app.js",
    "method_name": "app.use(\"/get-token\", cognitoRoutes)",
    "input_params": [],
    "logic": "Mounts the cognitoRoutes to the '/get-token' path, routing requests related to token generation mechanisms through the Cognito service.",
    "inner_function_calls": [],
    "output": {
      "type": "undefined",
      "description": "The method does not return a value."
    }
  },
  {
    "folder_path": "src",
    "module_name": "app.js",
    "method_name": "app.use(`${API_PREFIX}/album`, albumRoutes)",
    "input_params": [],
    "logic": "Mounts the albumRoutes to the path specified by API_PREFIX under the '/album' route, handling requests related to album functionalities.",
    "inner_function_calls": [],
    "output": {
      "type": "undefined",
      "description": "The method does not return a value."
    }
  },
  {
    "folder_path": "src",
    "module_name": "app.js",
    "method_name": "app.use(`${API_PREFIX}/folder`, folderRoutes)",
    "input_params": [],
    "logic": "Mounts the folderRoutes to the path specified by API_PREFIX under the '/folder' route, routing folder-related requests.",
    "inner_function_calls": [],
    "output": {
      "type": "undefined",
      "description": "The method does not return a value."
    }
  },
  {
    "folder_path": "src",
    "module_name": "app.js",
    "method_name": "app.use(`${API_PREFIX}/rbac/users`, rbacUserRoutes)",
    "input_params": [],
    "logic": "Mounts the rbacUserRoutes to the path specified by API_PREFIX under the '/rbac/users' route, handling requests related to role-based access control users.",
    "inner_function_calls": [],
    "output": {
      "type": "undefined",
      "description": "The method does not return a value."
    }
  },
  {
    "folder_path": "src",
    "module_name": "app.js",
    "method_name": "app.use(`${API_PREFIX}/face`, faceRoutes)",
    "input_params": [],
    "logic": "Mounts the faceRoutes to the path specified by API_PREFIX under the '/face' route, handling requests related to face recognition and analysis.",
    "inner_function_calls": [],
    "output": {
      "type": "undefined",
      "description": "The method does not return a value."
    }
  },
  {
    "folder_path": "src",
    "module_name": "app.js",
    "method_name": "app.use(`${API_PREFIX}/guest`, guestRoutes)",
    "input_params": [],
    "logic": "Mounts the guestRoutes to the path specified by API_PREFIX under the '/guest' route, managing guest-related functionalities.",
    "inner_function_calls": [],
    "output": {
      "type": "undefined",
      "description": "The method does not return a value."
    }
  },
  {
    "folder_path": "src",
    "module_name": "app.js",
    "method_name": "app.use(`${API_PREFIX}/rekognition`, rekognitionRoutes)",
    "input_params": [],
    "logic": "Mounts the rekognitionRoutes to the path specified by API_PREFIX under the '/rekognition' route, for handling requests concerning image and video analysis through AWS Rekognition.",
    "inner_function_calls": [],
    "output": {
      "type": "undefined",
      "description": "The method does not return a value."
    }
  },
  {
    "folder_path": "src",
    "module_name": "app.js",
    "method_name": "app.use(`${API_PREFIX}/image`, customImagesRoutes)",
    "input_params": [],
    "logic": "Mounts the customImagesRoutes to the path specified by API_PREFIX under the '/image' route, allowing for handling custom image requests.",
    "inner_function_calls": [],
    "output": {
      "type": "undefined",
      "description": "The method does not return a value."
    }
  },
  {
    "folder_path": "src",
    "module_name": "app.js",
    "method_name": "app.use(`${API_PREFIX}/custom-recognition`, customRecognitionRoutes)",
    "input_params": [],
    "logic": "Mounts the customRecognitionRoutes to the path specified by API_PREFIX under the '/custom-recognition' route, routing requests for custom recognition functionalities.",
    "inner_function_calls": [],
    "output": {
      "type": "undefined",
      "description": "The method does not return a value."
    }
  },
  {
    "folder_path": "src",
    "module_name": "app.js",
    "method_name": "app.use(`${API_PREFIX}/cluster`, clusterRoutes)",
    "input_params": [],
    "logic": "Mounts the clusterRoutes to the path specified by API_PREFIX under the '/cluster' route, handling requests related to clustering functionalities.",
    "inner_function_calls": [],
    "output": {
      "type": "undefined",
      "description": "The method does not return a value."
    }
  },
  {
    "folder_path": "src",
    "module_name": "app.js",
    "method_name": "app.use(`${API_PREFIX}/filter-image`, filterImageRoutes)",
    "input_params": [],
    "logic": "Mounts the filterImageRoutes to the path specified by API_PREFIX under the '/filter-image' route, routing requests concerning image filtering.",
    "inner_function_calls": [],
    "output": {
      "type": "undefined",
      "description": "The method does not return a value."
    }
  },
  {
    "folder_path": "src/config",
    "module_name": "index.js",
    "method_name": "participants_collection_name",
    "input_params": [
      {
        "type": "string",
        "name": "collectionId",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function generates a collection name for participants by appending the provided collectionId to a predefined prefix stored in the environment variable PARTICIPANTS_COLLECTION_PREFIX.",
    "inner_function_calls": [],
    "output": {
      "type": "string",
      "description": "Returns the full name of the participants collection."
    }
  },
  {
    "folder_path": "src/config",
    "module_name": "index.js",
    "method_name": "images_collection_name",
    "input_params": [
      {
        "type": "string",
        "name": "collectionId",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function generates a collection name for images by appending the provided collectionId to a predefined prefix stored in the environment variable IMAGES_COLLECTION_PREFIX.",
    "inner_function_calls": [],
    "output": {
      "type": "string",
      "description": "Returns the full name of the images collection."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "album.js",
    "method_name": "getAllAlbums",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function retrieves all albums for the current user and sends the result as a JSON response.",
    "inner_function_calls": [
      {
        "name": "getAllAlbumsService",
        "import_path": "../services/album.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "A JSON object containing the list of all albums."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "album.js",
    "method_name": "getAlbum",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function retrieves an album by its ID, checks for its existence and permissions, and responds with the album data or an error message if not found.",
    "inner_function_calls": [
      {
        "name": "getAlbumService",
        "import_path": "../services/album.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "A JSON object containing the album data or an error message."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "album.js",
    "method_name": "getAlbumOwner",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function retrieves the owner of a specific album using its ID and sends the result as a JSON response.",
    "inner_function_calls": [
      {
        "name": "getAlbumOwnerService",
        "import_path": "../services/album.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "A JSON object containing the owner information of the specified album."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "album.js",
    "method_name": "getAlbumSharedUsers",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function retrieves the users with whom a specific album is shared based on its ID and an optional query parameter for embedding.",
    "inner_function_calls": [
      {
        "name": "getAlbumSharedUsersService",
        "import_path": "../services/album.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "A JSON object containing the list of users who have access to the album."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "album.js",
    "method_name": "createAlbum",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function creates a new album using the request body and the current user's information, then responds with the created album data.",
    "inner_function_calls": [
      {
        "name": "createAlbumService",
        "import_path": "../services/album.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "A JSON object containing the details of the newly created album."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "album.js",
    "method_name": "shareAlbum",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function shares an album by sending the album ID and user emails in the request. It ensures at least one email is provided, otherwise sends a bad request error.",
    "inner_function_calls": [
      {
        "name": "shareAlbumService",
        "import_path": "../services/album.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "A JSON object containing the result of the share operation."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "album.js",
    "method_name": "updateAlbum",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function updates an existing album using its ID, the updated album data from the request body, and the current user's email.",
    "inner_function_calls": [
      {
        "name": "updateAlbumService",
        "import_path": "../services/album.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "A JSON object containing the updated album details."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "album.js",
    "method_name": "softDelete",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function performs a soft delete on an album by its ID, utilizing the current user's email, and responds with the result.",
    "inner_function_calls": [
      {
        "name": "softDeleteService",
        "import_path": "../services/album.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "A JSON object indicating the success of the soft delete operation."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "album.js",
    "method_name": "hardDelete",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function performs a hard delete on an album based on its ID and responds with the result of this operation.",
    "inner_function_calls": [
      {
        "name": "hardDeleteService",
        "import_path": "../services/album.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "A JSON object indicating the success of the hard delete operation."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "cluster.js",
    "method_name": "getAlbumClusters",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "This function handles the request to retrieve album clusters. It retrieves the albumId from the request parameters, calls the service to get the clusters associated with that album, and sends the result as a JSON response.",
    "inner_function_calls": [
      {
        "name": "getAlbumClustersService",
        "import_path": "../services/cluster.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The output is a JSON response containing the album clusters."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "cluster.js",
    "method_name": "getCluster",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "This function handles the request to retrieve a specific cluster by its ID. It retrieves the ID from the request parameters, calls the service to get the cluster, and sends the result as a JSON response.",
    "inner_function_calls": [
      {
        "name": "getClusterService",
        "import_path": "../services/cluster.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The output is a JSON response containing the details of the requested cluster."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "cluster.js",
    "method_name": "createCluster",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "This function handles the request to create a new cluster. It extracts the body of the request and the email of the user, then calls the service to create the cluster with this data, and sends the result as a JSON response.",
    "inner_function_calls": [
      {
        "name": "createClusterService",
        "import_path": "../services/cluster.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The output is a JSON response confirming the creation of the cluster and possibly containing the created cluster's details."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "cluster.js",
    "method_name": "deleteAlbumClusters",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "This function handles the request to delete album clusters. It retrieves the albumId from the request parameters, calls the service to delete the clusters associated with that album, and sends the result as a JSON response.",
    "inner_function_calls": [
      {
        "name": "deleteAlbumClustersService",
        "import_path": "../services/cluster.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The output is a JSON response confirming the deletion of the album clusters."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "cognito.js",
    "method_name": "getToken",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "The getToken function is an asynchronous function that handles a request to get an authorization token. It extracts the username and password from the request body, calls the getCognitoToken function with those parameters, and sends the response received back in JSON format. If an error occurs during the process, it catches the error and sends a 500 status code with the error message back to the client.",
    "inner_function_calls": [
      {
        "name": "getCognitoToken",
        "import_path": "../services/cognito.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The output is the JSON response returned from the getCognitoToken function, which typically includes the authentication token or relevant error message."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "customRecognition.js",
    "method_name": "getUnprocessedProfileImages",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Handles a request to get unprocessed profile images by calling the unprocessedProfileImages service function, then sends the result back as a JSON response.",
    "inner_function_calls": [
      {
        "name": "unprocessedProfileImages",
        "import_path": "../services/customRecognition.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The JSON response containing unprocessed profile images."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "customRecognition.js",
    "method_name": "getUnprocessedImages",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Handles a request to get all unprocessed images from a specified album by calling the getAllUnprocessedImages service function, using the albumId from the request parameters, then sends the result back as a JSON response.",
    "inner_function_calls": [
      {
        "name": "getAllUnprocessedImages",
        "import_path": "../services/image.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The JSON response containing all unprocessed images from the specified album."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "customRecognition.js",
    "method_name": "getUnprocessedFaces",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Handles a request to get unprocessed faces by calling the getUnprocessedFaces service function, then sends the result back as a JSON response.",
    "inner_function_calls": [
      {
        "name": "getUnprocessedFacesService",
        "import_path": "../services/customRecognition.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The JSON response containing unprocessed faces."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "customRecognition.js",
    "method_name": "processImage",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Handles a request to process an image by calling the processImage service function with image ID and user email from the request, then sends the result back as a JSON response.",
    "inner_function_calls": [
      {
        "name": "processImageService",
        "import_path": "../services/customRecognition.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The JSON response with the result of the image processing."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "customRecognition.js",
    "method_name": "reverseImageProcessing",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Handles a request to reverse image processing for an album by calling the reverseImageProcessing service function with album ID from the request, then sends the result back as a JSON response.",
    "inner_function_calls": [
      {
        "name": "reverseImageProcessingService",
        "import_path": "../services/customRecognition.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The JSON response corresponding to the result of the reverse image processing."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "customRecognition.js",
    "method_name": "matchedFaces",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Handles a request to get matched faces by calling the matchedFaces service function with album ID and profile image ID from the request parameters, then sends the result back as a JSON response.",
    "inner_function_calls": [
      {
        "name": "matchedFacesService",
        "import_path": "../services/customRecognition.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The JSON response containing matched faces for the given parameters."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "customRecognition.js",
    "method_name": "updateUserProfileImageEmbedding",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Handles a request to update a user's profile image embedding by calling the updateUserProfileImageEmbedding service function with user ID and embedding from the request, then sends the result back as a JSON response.",
    "inner_function_calls": [
      {
        "name": "updateUserProfileImageEmbeddingService",
        "import_path": "../services/customRecognition.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The JSON response with the result of updating the user's image embedding."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "face.js",
    "method_name": "getAllByAlbumId",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "number",
        "name": "page",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "number",
        "name": "limit",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function handles the API endpoint for fetching all faces associated with a specific album using the album ID. It extracts the album ID, page, and limit from the request parameters and query, calls the corresponding service function, and then sends the result as a JSON response.",
    "inner_function_calls": [
      {
        "name": "getAllByAlbumIdService",
        "import_path": "../services/face.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The output is the JSON response containing an array of faces associated with the specified album."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "face.js",
    "method_name": "getAllbyUniqueFaceId",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "uniqueFaceId",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function retrieves a specific face by its unique face ID and the album ID. It converts the unique face ID to a string if it exists, calls the appropriate service function, and sends the result as a JSON response.",
    "inner_function_calls": [
      {
        "name": "getByUniqueFaceIdService",
        "import_path": "../services/face.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The output is the JSON response containing the details of the face associated with the provided unique face ID."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "face.js",
    "method_name": "getUnprocessedAlbumFaces",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function fetches all unprocessed faces from a given album identified by its album ID. It calls the corresponding service function and returns the result in a JSON response.",
    "inner_function_calls": [
      {
        "name": "getUnprocessedAlbumFacesService",
        "import_path": "../services/face.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The output contains a JSON response with all unprocessed faces related to the specified album."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "face.js",
    "method_name": "getUnclusteredAlbumFaces",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function is responsible for fetching all unclustered faces from an album based on its album ID. It invokes the respective service function and sends the result back as a JSON response.",
    "inner_function_calls": [
      {
        "name": "getUnclusteredAlbumFacesService",
        "import_path": "../services/face.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The output is a JSON response detailing all unclustered faces associated with the specified album."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "face.js",
    "method_name": "groupByRekognition",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function groups faces within an album using Amazon Rekognition based on the album ID. It calls the requisite service function and responds with the result in JSON format.",
    "inner_function_calls": [
      {
        "name": "groupByRekognitionService",
        "import_path": "../services/face.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The output is a JSON response containing the results of the grouping operation."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "face.js",
    "method_name": "filterByFace",
    "input_params": [
      {
        "type": "string",
        "name": "guestId",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "albumId",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function filters faces by guest ID and album ID. It calls the appropriate service function and returns the result as a JSON response.",
    "inner_function_calls": [
      {
        "name": "filterByFaceService",
        "import_path": "../services/face.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The output is a JSON response with the filtered faces based on guest ID and album ID."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "face.js",
    "method_name": "createFace",
    "input_params": [
      {
        "type": "object",
        "name": "body",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function handles the creation of a new face using the data provided in the request body. It calls the respective service function and returns the result in a JSON response.",
    "inner_function_calls": [
      {
        "name": "createFaceService",
        "import_path": "../services/face.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The output is a JSON response confirming the creation of the face along with its details."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "face.js",
    "method_name": "updateFace",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "body",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "userEmail",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function updates an existing face record using the face ID, the updated data from the request body, and the user's email. After processing, it sends the updated information in the JSON response.",
    "inner_function_calls": [
      {
        "name": "updateFaceService",
        "import_path": "../services/face.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The output is a JSON response containing the updated face data."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "face.js",
    "method_name": "updateMatch",
    "input_params": [
      {
        "type": "string",
        "name": "faceId",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "body",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "userEmail",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function updates the match details of a specific face based on face ID and input data from the request body, including a matched profile image and similarity score. It validates these fields and responds accordingly. If validations fail, it returns a corresponding error message.",
    "inner_function_calls": [
      {
        "name": "updateMatchService",
        "import_path": "../services/face.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The output is a JSON response indicating the success of the update operation."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "filterImage.js",
    "method_name": "getAlbumUnprocessedFilteredImages",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Handles the API request to get unprocessed filtered images for a specific album by its ID, responding with the result in JSON format.",
    "inner_function_calls": [
      {
        "name": "getAlbumUnprocessedFilteredImagesService",
        "import_path": "../services/filterImage.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The JSON response containing the unprocessed filtered images from the album."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "filterImage.js",
    "method_name": "updatedFilteredImages",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Handles the API request to update filtered images based on the provided ID, responding with the updated result in JSON format.",
    "inner_function_calls": [
      {
        "name": "updatedFilteredImagesService",
        "import_path": "../services/filterImage.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The JSON response containing the updated filtered images."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "filterImage.js",
    "method_name": "addFilteredImages",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Handles the API request to add filtered images based on the provided ID and images, responding with the result in JSON format.",
    "inner_function_calls": [
      {
        "name": "addFilteredImagesService",
        "import_path": "../services/filterImage.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The JSON response containing the result of adding the images."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "folder.js",
    "method_name": "getAllAlbumFolders",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function retrieves all album folders by calling the getAllAlbumFoldersService with the albumId from the request parameters and sends the result as a JSON response.",
    "inner_function_calls": [
      {
        "name": "getAllAlbumFoldersService",
        "import_path": "../services/folder.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "A JSON response containing all album folders."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "folder.js",
    "method_name": "getFolder",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function retrieves a specific folder based on the id from request parameters and user email. If unauthorized, it sends a 403 status with an error message; otherwise, it sends the folder data as JSON.",
    "inner_function_calls": [
      {
        "name": "getFolderService",
        "import_path": "../services/folder.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "A JSON response containing the folder data or an error message."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "folder.js",
    "method_name": "getFilteredImages",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function fetches filtered images from a specific folder using the id and emailId from request parameters and user email, and sends the result as a JSON response.",
    "inner_function_calls": [
      {
        "name": "getFilteredImagesService",
        "import_path": "../services/folder.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "A JSON response containing the filtered images."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "folder.js",
    "method_name": "addImages",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function adds images to a specific folder by calling the addImagesService with folder id, images from the request body, and user's email and returns the result as a JSON response.",
    "inner_function_calls": [
      {
        "name": "addImagesService",
        "import_path": "../services/folder.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "A JSON response containing the result of adding images."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "folder.js",
    "method_name": "createFolder",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function creates a new folder by calling createFolderService with the folder data from the request body and user's email and sends the result as a JSON response.",
    "inner_function_calls": [
      {
        "name": "createFolderService",
        "import_path": "../services/folder.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "A JSON response containing the result of folder creation."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "folder.js",
    "method_name": "updateFolder",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function updates an existing folder by calling the updateFolderService with the folder id, updated data from the request body, and user's email and sends the result as a JSON response.",
    "inner_function_calls": [
      {
        "name": "updateFolderService",
        "import_path": "../services/folder.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "A JSON response containing the result of the folder update."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "folder.js",
    "method_name": "deleteImages",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function deletes specific images from a folder by retrieving the folder from the database and calling the deleteImagesService with folder id, images from the request body, user's email, and albumId, and sends the result as a JSON response.",
    "inner_function_calls": [
      {
        "name": "deleteImagesService",
        "import_path": "../services/folder.js"
      },
      {
        "name": "Folder.findById",
        "import_path": "../models/Folder.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "A JSON response containing the result of deleting images."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "folder.js",
    "method_name": "deleteFolder",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function deletes a specific folder by calling the deleteFolderService with folder id and sends the result as a JSON response.",
    "inner_function_calls": [
      {
        "name": "deleteFolderService",
        "import_path": "../services/folder.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "A JSON response containing the result of folder deletion."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "guest.js",
    "method_name": "createGuest",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function handles the creation of a guest by calling the createGuestService function with the request body and then sending the result back as a JSON response.",
    "inner_function_calls": [
      {
        "name": "createGuestService",
        "import_path": "../services/guest.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The output is the result of the createGuestService function, which is sent back to the client as a JSON response."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "guest.js",
    "method_name": "getGuestById",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function retrieves a guest by their ID using the getGuestByIdService function and sends the result back as a JSON response.",
    "inner_function_calls": [
      {
        "name": "getGuestByIdService",
        "import_path": "../services/guest.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The output is the result of the getGuestByIdService function, which is sent back to the client as a JSON response."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "guest.js",
    "method_name": "filterImages",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function filters images based on a guest ID provided in the request parameters, calling the filterImagesService and sending the result back as a JSON response.",
    "inner_function_calls": [
      {
        "name": "filterImagesService",
        "import_path": "../services/guest.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The output is the result of the filterImagesService function, which is sent back to the client as a JSON response."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "home.js",
    "method_name": "default",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This is an asynchronous default export function that handles an incoming request (req) and a response (res). It sends a welcome message including the current node environment from the config file. If an error occurs during this process, it catches the error and sends a 500 status response with an error message in JSON format.",
    "inner_function_calls": [
      {
        "name": "send",
        "import_path": "express"
      }
    ],
    "output": {
      "type": "string",
      "description": "The output is a welcome message string sent to the client, indicating the API is ready, which includes the node environment value from the config."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "image.js",
    "method_name": "createImage",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "This function is an Express route handler that processes the request to create an image. It uses the asyncHandler middleware to catch any errors during asynchronous operations. Inside the function, it calls the createImageService function, passing the request body and the email from the user object in the request. Finally, it sends the result of the image creation back as a JSON response.",
    "inner_function_calls": [
      {
        "name": "createImageService",
        "import_path": "../services/image.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The output is the result of the image creation process returned by the createImageService, which is sent as a JSON response to the HTTP client."
    }
  },
  {
    "folder_path": "src/controllers/rbac",
    "module_name": "user.js",
    "method_name": "getAllUsers",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Handles the request to get all users by calling the service function getAllUsersService and returns the result as JSON.",
    "inner_function_calls": [
      {
        "name": "getAllUsersService",
        "import_path": "../../services/rbac/user.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The JSON response containing all user data."
    }
  },
  {
    "folder_path": "src/controllers/rbac",
    "module_name": "user.js",
    "method_name": "getUser",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Fetches a user by ID, which is passed to the service function getUserService. Returns the user data as JSON.",
    "inner_function_calls": [
      {
        "name": "getUserService",
        "import_path": "../../services/rbac/user.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The JSON response containing the user data for the specified ID."
    }
  },
  {
    "folder_path": "src/controllers/rbac",
    "module_name": "user.js",
    "method_name": "getUserByEmail",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Retrieves a user based on the email associated with the authenticated user found in req.user.email. The result is returned as JSON.",
    "inner_function_calls": [
      {
        "name": "getUserByEmailService",
        "import_path": "../../services/rbac/user.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The JSON response containing the user data for the email of the authenticated user."
    }
  },
  {
    "folder_path": "src/controllers/rbac",
    "module_name": "user.js",
    "method_name": "createUser",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Creates a new user using the data from req.body and the email from req.user.email. Returns the result as JSON.",
    "inner_function_calls": [
      {
        "name": "createUserService",
        "import_path": "../../services/rbac/user.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The JSON response containing the newly created user data."
    }
  },
  {
    "folder_path": "src/controllers/rbac",
    "module_name": "user.js",
    "method_name": "createGuestUser",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Creates a guest user by calling the createGuestUserService and returns the resulting data as JSON.",
    "inner_function_calls": [
      {
        "name": "createGuestUserService",
        "import_path": "../../services/rbac/user.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The JSON response indicating the guest user that has been created."
    }
  },
  {
    "folder_path": "src/controllers/rbac",
    "module_name": "user.js",
    "method_name": "updateCurrentUser",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Updates the current user's information using the email from req.user.email and data from req.body. It returns the updated user data as JSON.",
    "inner_function_calls": [
      {
        "name": "updateUserByEmailService",
        "import_path": "../../services/rbac/user.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The JSON response containing the updated current user's data."
    }
  },
  {
    "folder_path": "src/controllers/rbac",
    "module_name": "user.js",
    "method_name": "updateUser",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Updates a user specified by req.params.id with the data in req.body, and the email from req.user.email. Returns the result as JSON.",
    "inner_function_calls": [
      {
        "name": "updateUserService",
        "import_path": "../../services/rbac/user.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The JSON response containing the updated user data for the specified ID."
    }
  },
  {
    "folder_path": "src/controllers/rbac",
    "module_name": "user.js",
    "method_name": "profileImageFaceCount",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Counts the number of faces detected in a user profile image. The image ID is used to create the object key for the image, which is then passed to the detectFaces function. Returns the number of detected faces as JSON.",
    "inner_function_calls": [
      {
        "name": "detectFaces",
        "import_path": "../../services/rekognition.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The JSON response containing the count of detected faces in the specified image."
    }
  },
  {
    "folder_path": "src/controllers",
    "module_name": "rekognition.js",
    "method_name": "processImage",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "The function 'processImage' is an asynchronous handler that takes in request and response objects. It extracts parameters 'albumId' and 'imageId' from the request and retrieves the user's email from the request's user property. It then calls a service function 'processImageService' with these parameters, waits for the result, and sends the result back as a JSON response.",
    "inner_function_calls": [
      {
        "name": "processImageService",
        "import_path": "../services/rekognition.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The output is a JSON response containing the result of the image processing service call."
    }
  },
  {
    "folder_path": "src/middlewares",
    "module_name": "asyncHandler.js",
    "method_name": "asyncHandler",
    "input_params": [
      {
        "type": "function",
        "name": "fn",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "The asyncHandler function takes a function fn as an argument, which is expected to be an asynchronous function. It returns a new asynchronous function that acts as a middleware for handling requests. Inside this new function, it tries to execute the passed function fn with the req, res, and next parameters. If fn executes successfully, it completes the request processing. If fn throws an error, it catches the error, determines the appropriate status code and message, and responds to the client with a JSON object containing the error message and status code.",
    "inner_function_calls": [
      {
        "name": "fn",
        "import_path": "user-defined"
      }
    ],
    "output": {
      "type": "function",
      "description": "The output is a function that serves as middleware for handling asynchronous requests and catching errors."
    }
  },
  {
    "folder_path": "src/middlewares",
    "module_name": "auth.js",
    "method_name": "getSigningKey",
    "input_params": [
      {
        "type": "string",
        "name": "token",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function decodes the JWT token header to retrieve the key ID (kid) and then fetches the corresponding signing key from the JWKS endpoint. It throws an error if the token header is invalid.",
    "inner_function_calls": [
      {
        "name": "jwt.decode",
        "import_path": "jsonwebtoken"
      },
      {
        "name": "jwks.getSigningKey",
        "import_path": "jwks-rsa"
      }
    ],
    "output": {
      "type": "object",
      "description": "The function returns the public key or RSA public key associated with the key ID from the JWKS."
    }
  },
  {
    "folder_path": "src/middlewares",
    "module_name": "auth.js",
    "method_name": "verifyJwt",
    "input_params": [
      {
        "type": "string",
        "name": "token",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function retrieves the public key by calling getSigningKey and then verifies the JWT token using that public key, ensuring it conforms to specified algorithms, audience, and issuer.",
    "inner_function_calls": [
      {
        "name": "getSigningKey",
        "import_path": "./path_to_this_module"
      },
      {
        "name": "promisify",
        "import_path": "util"
      },
      {
        "name": "jwt.verify",
        "import_path": "jsonwebtoken"
      }
    ],
    "output": {
      "type": "object",
      "description": "The function returns the decoded token if verification is successful."
    }
  },
  {
    "folder_path": "src/middlewares",
    "module_name": "auth.js",
    "method_name": "authorize",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "function",
        "name": "next",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This middleware function checks for an authorization token in the request headers. If found, it verifies the token and updates the user information. If not found, it handles guest user logic based on session tokens and guest email headers.",
    "inner_function_calls": [
      {
        "name": "verifyJwt",
        "import_path": "./path_to_this_module"
      },
      {
        "name": "updateUserByEmail",
        "import_path": "../services/rbac/user.js"
      }
    ],
    "output": {
      "type": "void",
      "description": "This function does not return a value; it modifies the request object and calls next() to continue middleware execution."
    }
  },
  {
    "folder_path": "src/models",
    "module_name": "Album.js",
    "method_name": "constructor (schema, options)",
    "input_params": [
      {
        "type": "object",
        "name": "schema",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "options",
        "is_required": "false",
        "optional_value": "undefined"
      }
    ],
    "logic": "This constructor initializes a new Mongoose schema with the specified fields and configuration options, including automatic timestamping.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An instance of the Mongoose Schema that defines the structure of documents."
    }
  },
  {
    "folder_path": "src/models",
    "module_name": "Album.js",
    "method_name": "model (name, schema)",
    "input_params": [
      {
        "type": "string",
        "name": "name",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "schema",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function creates a new Mongoose model for the schema provided, allowing interaction with corresponding MongoDB collection.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A Mongoose model that can be used to interact with the 'Album' collection in the MongoDB database."
    }
  },
  {
    "folder_path": "src/models",
    "module_name": "Cluster.js",
    "method_name": "mongoose.Schema",
    "input_params": [
      {
        "type": "object",
        "name": "definition",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Creates a new Mongoose Schema object which defines the structure of documents in a MongoDB collection. In this case, it defines a schema for a 'Cluster' model with two fields: 'albumId' of type String and 'images' which is an array with no specified type.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A Mongoose Schema object that defines the structure of a MongoDB document."
    }
  },
  {
    "folder_path": "src/models",
    "module_name": "Cluster.js",
    "method_name": "mongoose.model",
    "input_params": [
      {
        "type": "string",
        "name": "modelName",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "schema",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Creates a Mongoose model named 'Cluster', using the previously defined schema. This model is used for creating and managing documents in the corresponding MongoDB collection.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A Mongoose Model object for the 'Cluster' collection, allowing CRUD operations on documents."
    }
  },
  {
    "folder_path": "src/models",
    "module_name": "Face.js",
    "method_name": "mongoose.Schema",
    "input_params": [
      {
        "type": "object",
        "name": "definition",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "options",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Creates a new schema object with defined structure which includes fields such as albumId, albumOwner, imageId, etc., along with options like timestamps which adds createdAt and updatedAt fields.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A new schema instance used to define the structure of documents in the Face collection."
    }
  },
  {
    "folder_path": "src/models",
    "module_name": "Face.js",
    "method_name": "mongoose.model",
    "input_params": [
      {
        "type": "string",
        "name": "modelName",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "schema",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Creates a new model with the name 'Face' and binds it to the defined schema allowing interaction with the Face collection in the database.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A Mongoose model that provides an interface for interacting with the Face documents in the MongoDB database."
    }
  },
  {
    "folder_path": "src/models",
    "module_name": "FilteredImages.js",
    "method_name": "constructor",
    "input_params": [
      {
        "type": "object",
        "name": "schemaDefinition",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "options",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "The constructor function of the mongoose.Schema class is used to create a new schema. It defines the structure of the document, specifying that it should have an 'albumId' and 'userId' as strings, an 'isProcessed' field as a boolean with a default value of false, and an 'images' field which is an array without a specified type.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An instance of mongoose.Schema which describes the data structure for 'FilteredImages'."
    }
  },
  {
    "folder_path": "src/models",
    "module_name": "FilteredImages.js",
    "method_name": "index",
    "input_params": [
      {
        "type": "object",
        "name": "index",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This method is used to create an index on the schema, which improves performance when querying based on 'albumId' and 'userId'. This means that whenever a query is made using these fields, it will be executed more efficiently.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An instance of mongoose.Schema with an index that allows for efficient querying on 'albumId' and 'userId'."
    }
  },
  {
    "folder_path": "src/models",
    "module_name": "FilteredImages.js",
    "method_name": "model",
    "input_params": [
      {
        "type": "string",
        "name": "modelName",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "schema",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "The model method defines a new model for the schema. It creates a connection between the schema definition and a collection in the MongoDB, allowing for the creation, reading, updating, and deleting of documents in the collection 'FilteredImages'.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A mongoose model that represents the 'FilteredImages' collection and allows for interaction with its documents."
    }
  },
  {
    "folder_path": "src/models",
    "module_name": "Folder.js",
    "method_name": "mongoose.Schema",
    "input_params": [
      {
        "type": "object",
        "name": "definition",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "options",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function is used to define a new Mongoose schema. It takes two parameters: a 'definition' object that describes the structure of the documents within the collection, specifying the data types for each field, and an 'options' object that can contain additional settings like timestamps.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "This returns a Mongoose schema definition that can later be used to create a model."
    }
  },
  {
    "folder_path": "src/models",
    "module_name": "Folder.js",
    "method_name": "mongoose.model",
    "input_params": [
      {
        "type": "string",
        "name": "name",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "schema",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This function creates a Mongoose model based on the provided schema and the name of the model. The model will be used to interact with the corresponding MongoDB collection, allowing for querying, creating, and updating documents in that collection.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "This returns a Mongoose model that can be used to create and manage documents in the specified MongoDB collection."
    }
  },
  {
    "folder_path": "src/models",
    "module_name": "Guest.js",
    "method_name": "<anonymous>",
    "input_params": [
      {
        "type": "object",
        "name": "albumId",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "string",
        "name": "imageId",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "array",
        "name": "matchedFaces",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "string",
        "name": "email",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "string",
        "name": "name",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "This function defines a Mongoose schema for a MongoDB collection called 'Guest'. It outlines the structure of the documents in this collection and enforces validation rules for the data stored in each field. The 'albumId' field is a required ObjectId that references the 'Album' model, while 'imageId', 'matchedFaces', 'email', and 'name' are optional fields.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A Mongoose Model based on the 'Guest' schema, allowing for CRUD operations on the MongoDB collection."
    }
  },
  {
    "folder_path": "src/models",
    "module_name": "Guest.js",
    "method_name": "index",
    "input_params": [
      {
        "type": "object",
        "name": "{ imageId: 1 }",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "{ unique: true }",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "This method creates an index on the 'imageId' field of the schema, ensuring that each imageId value is unique across documents. This improves the performance of queries filtering by imageId and enforces the uniqueness constraint at the database level.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An index is created on the imageId field for the Guest schema, enforcing uniqueness."
    }
  },
  {
    "folder_path": "src/models",
    "module_name": "Image.js",
    "method_name": "constructor",
    "input_params": [
      {
        "type": "object",
        "name": "object",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "options",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Initializes a new Mongoose schema with defined object structure and options, where the object structure describes the fields in a MongoDB collection.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "The schema definition for a Mongoose model."
    }
  },
  {
    "folder_path": "src/models",
    "module_name": "Image.js",
    "method_name": "index",
    "input_params": [
      {
        "type": "object",
        "name": "key",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "options",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Defines an index on the schema for the imageId field, ensuring that values are unique across documents in the collection.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An object representing the schema with the defined index."
    }
  },
  {
    "folder_path": "src/models",
    "module_name": "Image.js",
    "method_name": "model",
    "input_params": [
      {
        "type": "string",
        "name": "modelName",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "schema",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Creates a new Mongoose model named 'Image' based on the provided schema, which can then be used for CRUD operations.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A Mongoose model that can be used to interact with the MongoDB collection."
    }
  },
  {
    "folder_path": "src/models",
    "module_name": "ImageCustom.js",
    "method_name": "constructor",
    "input_params": [
      {
        "type": "object",
        "name": "definition",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "options",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "The constructor initializes a new instance of a mongoose Schema with specific fields and options. In this case, it defines a schema for a 'Custom-Image' collection, setting up fields like albumId, imageId, faces, and createdBy along with enabling timestamps for created and updated times.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns a new mongoose Schema object representing the structure of the documents in the 'Custom-Image' collection."
    }
  },
  {
    "folder_path": "src/models",
    "module_name": "ImageCustom.js",
    "method_name": "index",
    "input_params": [
      {
        "type": "object",
        "name": "index",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "options",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This method creates a unique index on the imageId field of the schema. This ensures that each imageId in the database is unique, preventing duplicate entries.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns the schema instance itself with the new index defined."
    }
  },
  {
    "folder_path": "src/models",
    "module_name": "ImageCustom.js",
    "method_name": "model",
    "input_params": [
      {
        "type": "string",
        "name": "modelName",
        "is_required": "",
        "optional_value": ""
      },
      {
        "type": "object",
        "name": "schema",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "This method registers a new model with mongoose. It defines a model named 'Custom-Image' based on the previously defined schema. This allows for creating, querying, updating, and deleting documents in the 'Custom-Image' collection.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns the mongoose model 'Custom-Image' which can be used for CRUD operations on the corresponding MongoDB collection."
    }
  },
  {
    "folder_path": "src/models/rbac",
    "module_name": "Role.js",
    "method_name": "constructor",
    "input_params": [
      {
        "type": "object",
        "name": "schemaDefinition",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "options",
        "is_required": "false",
        "optional_value": "{ timestamps: true }"
      }
    ],
    "logic": "The constructor of the mongoose.Schema creates a new schema object using the provided schema definition and options. This defines the structure of the documents within a MongoDB collection, including the fields and their requirements (like type and uniqueness).",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An instance of mongoose.Schema representing the defined schema."
    }
  },
  {
    "folder_path": "src/models/rbac",
    "module_name": "Role.js",
    "method_name": "index",
    "input_params": [
      {
        "type": "object",
        "name": "key",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "options",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "The index method creates an index on the 'name' field of the schema to ensure that all entries in the database have unique names. This improves query performance and enforces a uniqueness constraint on the field.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An index definition that enforces the uniqueness of the 'name' field in the database."
    }
  },
  {
    "folder_path": "src/models/rbac",
    "module_name": "Role.js",
    "method_name": "model",
    "input_params": [
      {
        "type": "string",
        "name": "modelName",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "schema",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "The model method creates a new model for the specified collection using the defined schema. This allows for the manipulation of data within that collection in a structured manner using Mongoose's model interface.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A Mongoose model that represents the collection 'RBAC-Role' and allows for CRUD operations on it."
    }
  },
  {
    "folder_path": "src/models/rbac",
    "module_name": "User.js",
    "method_name": "schema.constructor",
    "input_params": [
      {
        "type": "Object",
        "name": "definition",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "Object",
        "name": "options",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Creates a new Mongoose schema for modeling RBAC-User data, defining various fields and their types along with options like timestamps.",
    "inner_function_calls": [],
    "output": {
      "type": "Object",
      "description": "Mongoose schema object used to define a data structure for RBAC-User in the database."
    }
  },
  {
    "folder_path": "src/models/rbac",
    "module_name": "User.js",
    "method_name": "schema.index",
    "input_params": [
      {
        "type": "Object",
        "name": "keys",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "Object",
        "name": "options",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Defines an index on the schema for the 'email' field to ensure that all email addresses are unique within the database.",
    "inner_function_calls": [],
    "output": {
      "type": "Object",
      "description": "An index definition for the Mongoose schema."
    }
  },
  {
    "folder_path": "src/models/rbac",
    "module_name": "User.js",
    "method_name": "mongoose.model",
    "input_params": [
      {
        "type": "String",
        "name": "modelName",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "Object",
        "name": "schema",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Creates a Mongoose model named 'RBAC-User' associated with the schema defined for user data, allowing for interactions with the corresponding collection in the MongoDB database.",
    "inner_function_calls": [],
    "output": {
      "type": "Object",
      "description": "Mongoose model object that represents the 'RBAC-User' collection and facilitates CRUD operations."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "album.js",
    "method_name": "getAllAlbums",
    "input_params": [],
    "logic": "This function retrieves all albums from the database and returns them as a response.",
    "inner_function_calls": [],
    "output": {
      "type": "array",
      "description": "An array of all albums."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "album.js",
    "method_name": "getAlbum",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function fetches a specific album by its ID from the database and returns its details.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An object representing the details of the album."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "album.js",
    "method_name": "getAlbumOwner",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function determines the owner of a specific album identified by its ID and returns the owner's details.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An object representing the details of the album owner."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "album.js",
    "method_name": "getAlbumSharedUsers",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function retrieves the users who have access to a shared album identified by its ID and returns their details.",
    "inner_function_calls": [],
    "output": {
      "type": "array",
      "description": "An array of users who have access to the shared album."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "album.js",
    "method_name": "createAlbum",
    "input_params": [
      {
        "type": "object",
        "name": "albumData",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function creates a new album with the provided album data and saves it to the database.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An object representing the created album."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "album.js",
    "method_name": "updateAlbum",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "albumUpdates",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function updates an existing album identified by its ID with the provided updates and saves the changes to the database.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An object representing the updated album."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "album.js",
    "method_name": "shareAlbum",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "shareData",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function shares an album identified by its ID with specified users, updating the sharing settings in the database.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An object indicating the result of the sharing operation."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "album.js",
    "method_name": "softDelete",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function performs a soft delete on an album identified by its ID, marking it as deleted without removing it from the database.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An object representing the status of the soft delete operation."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "album.js",
    "method_name": "hardDelete",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function permanently deletes an album from the database using its ID, ensuring it cannot be recovered.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An object representing the status of the hard delete operation."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "cluster.js",
    "method_name": "getCluster",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "/",
        "optional_value": "null"
      }
    ],
    "logic": "Retrieves a specific cluster by its ID and returns it in the response.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An object representing the requested cluster."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "cluster.js",
    "method_name": "getAlbumClusters",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "/",
        "optional_value": "null"
      }
    ],
    "logic": "Fetches all clusters that belong to a specific album identified by album ID, returning them in the response.",
    "inner_function_calls": [],
    "output": {
      "type": "array",
      "description": "An array of clusters associated with the specified album."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "cluster.js",
    "method_name": "createCluster",
    "input_params": [],
    "logic": "Creates a new cluster using the data provided in the request body and returns the created cluster in the response.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "The newly created cluster object."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "cluster.js",
    "method_name": "deleteAlbumClusters",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "/",
        "optional_value": "null"
      }
    ],
    "logic": "Deletes all clusters associated with a specified album ID and returns a confirmation response.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A confirmation object indicating the deletion success."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "cognito.js",
    "method_name": "getToken",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "The 'getToken' function is likely involved in processing a POST request to obtain an authorization token from AWS Cognito. It handles the request and response objects to send back an appropriate response after processing the request.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "The function does not return any value directly; instead, it sends a response to the client."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "customRecognition.js",
    "method_name": "getUnprocessedProfileImages",
    "input_params": [],
    "logic": "Handles GET requests to retrieve a list of unprocessed profile images from the server, likely responding with image data in JSON format.",
    "inner_function_calls": [],
    "output": {
      "type": "array",
      "description": "An array of unprocessed profile images."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "customRecognition.js",
    "method_name": "getUnprocessedImages",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Handles GET requests to retrieve a list of unprocessed images based on the specified album ID.",
    "inner_function_calls": [],
    "output": {
      "type": "array",
      "description": "An array of unprocessed images from the specified album."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "customRecognition.js",
    "method_name": "getUnprocessedFaces",
    "input_params": [],
    "logic": "Handles GET requests to retrieve a list of unprocessed facial images, potentially to be processed later.",
    "inner_function_calls": [],
    "output": {
      "type": "array",
      "description": "An array of unprocessed face images."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "customRecognition.js",
    "method_name": "processImage",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Handles PATCH requests to process an image identified by the given ID, likely applying transformations or analyses to the image.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An object containing the result of the image processing operation."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "customRecognition.js",
    "method_name": "reverseImageProcessing",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Handles PATCH requests to reverse the processing applied to images in a specified album, restoring them to their original state.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An object summarizing the result of the reversing operation."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "customRecognition.js",
    "method_name": "matchedFaces",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "profileImageId",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Handles GET requests to find and return matched faces based on the provided album and profile image IDs.",
    "inner_function_calls": [],
    "output": {
      "type": "array",
      "description": "An array of matched faces."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "customRecognition.js",
    "method_name": "updateUserProfileImageEmbedding",
    "input_params": [
      {
        "type": "string",
        "name": "userId",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Handles PATCH requests to update the profile image embedding of a user identified by the specified user ID.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An object indicating the success or failure of the embedding update."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "face.js",
    "method_name": "getAllByAlbumId",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function retrieves all faces associated with the specified album ID, which is passed as a parameter in the URL.",
    "inner_function_calls": [
      {
        "name": "authorize",
        "import_path": "../middlewares/auth.js"
      }
    ],
    "output": {
      "type": "array",
      "description": "An array of faces linked to the specified album."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "face.js",
    "method_name": "getAllbyUniqueFaceId",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "uniqueFaceId",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This method retrieves all records for a unique face ID associated with a given album ID.",
    "inner_function_calls": [
      {
        "name": "authorize",
        "import_path": "../middlewares/auth.js"
      }
    ],
    "output": {
      "type": "array",
      "description": "An array of records pertaining to the specified unique face ID in the album."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "face.js",
    "method_name": "groupByRekognition",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function groups faces in the album by using Amazon Rekognition services, identified by the album ID.",
    "inner_function_calls": [
      {
        "name": "authorize",
        "import_path": "../middlewares/auth.js"
      }
    ],
    "output": {
      "type": "array",
      "description": "An array grouping faces recognized by Amazon Rekognition for the specified album."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "face.js",
    "method_name": "getUnprocessedAlbumFaces",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Retrieves all faces within the album that haven't yet been processed.",
    "inner_function_calls": [
      {
        "name": "authorize",
        "import_path": "../middlewares/auth.js"
      }
    ],
    "output": {
      "type": "array",
      "description": "An array of unprocessed faces in the specified album."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "face.js",
    "method_name": "getUnclusteredAlbumFaces",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function returns all faces in the album that are not yet clustered with others.",
    "inner_function_calls": [
      {
        "name": "authorize",
        "import_path": "../middlewares/auth.js"
      }
    ],
    "output": {
      "type": "array",
      "description": "An array of faces in the specified album that are not clustered."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "face.js",
    "method_name": "filterByFace",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "guestId",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This method filters the faces in the album based on a specified guest ID.",
    "inner_function_calls": [
      {
        "name": "authorize",
        "import_path": "../middlewares/auth.js"
      }
    ],
    "output": {
      "type": "array",
      "description": "An array of faces filtered by the specified guest ID in the album."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "face.js",
    "method_name": "createFace",
    "input_params": [],
    "logic": "Creates a new face entry, using data provided in the request body (not specified by parameter as it comes from request body).",
    "inner_function_calls": [
      {
        "name": "authorize",
        "import_path": "../middlewares/auth.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "An object representing the newly created face entry."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "face.js",
    "method_name": "updateFace",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Updates an existing face entry identified by the given ID, using data from the request body.",
    "inner_function_calls": [
      {
        "name": "authorize",
        "import_path": "../middlewares/auth.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "An object representing the updated face entry."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "face.js",
    "method_name": "updateMatch",
    "input_params": [
      {
        "type": "string",
        "name": "faceId",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Updates the match data for a specified face ID, typically to reflect changes in recognition or associations.",
    "inner_function_calls": [
      {
        "name": "authorize",
        "import_path": "../middlewares/auth.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "An object representing the updated match details for the specified face ID."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "filterImage.js",
    "method_name": "getAlbumUnprocessedFilteredImages",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function retrieves unprocessed filtered images for a specific album based on the provided album ID.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An array of unprocessed filtered images for the specified album."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "filterImage.js",
    "method_name": "updatedFilteredImages",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function updates the filtered images associated with a specific ID.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A confirmation that the filtered images have been successfully updated."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "filterImage.js",
    "method_name": "addFilteredImages",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function adds new images to the list of filtered images associated with the specified ID.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "A confirmation that the filtered images have been successfully added."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "folder.js",
    "method_name": "getAllAlbumFolders",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Retrieves all album folders for the specified album ID.",
    "inner_function_calls": [],
    "output": {
      "type": "array",
      "description": "An array of album folder objects."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "folder.js",
    "method_name": "getFolder",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Fetches the folder details based on the provided folder ID.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An object representing the folder's details."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "folder.js",
    "method_name": "getFilteredImages",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "emailId",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Retrieves filtered images based on the folder ID and email ID.",
    "inner_function_calls": [],
    "output": {
      "type": "array",
      "description": "An array of filtered image objects."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "folder.js",
    "method_name": "createFolder",
    "input_params": [],
    "logic": "Creates a new folder for an album.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An object representing the newly created folder."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "folder.js",
    "method_name": "updateFolder",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Updates the details of an existing folder based on the provided folder ID.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An object representing the updated folder details."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "folder.js",
    "method_name": "addImages",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Adds images to the specified folder ID.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An object indicating the status of the image addition."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "folder.js",
    "method_name": "deleteImages",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Deletes specified images from the folder identified by the folder ID.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An object indicating the confirmation of image deletion."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "folder.js",
    "method_name": "deleteFolder",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Deletes the folder identified by the folder ID.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An object indicating the confirmation of folder deletion."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "guest.js",
    "method_name": "authorize",
    "input_params": [
      {
        "type": "function",
        "name": "req",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "function",
        "name": "res",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "function",
        "name": "next",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "The 'authorize' function is a middleware that intercepts requests to validate if a user is authorized to access the resources requested.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "This function does not return a value directly. Instead, it either allows the request to proceed to the next middleware or sends an appropriate response if the user is not authorized."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "guest.js",
    "method_name": "createGuest",
    "input_params": [
      {
        "type": "object",
        "name": "guestData",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "The 'createGuest' function takes guest data and processes it to create a new guest entry in the system (e.g., saving it to a database).",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns the created guest object or a success response message upon successful creation."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "guest.js",
    "method_name": "getGuestById",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "The 'getGuestById' function retrieves a guest's information based on their unique identifier (ID).",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns the guest object associated with the given ID or an error message if the guest is not found."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "guest.js",
    "method_name": "filterImages",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "The 'filterImages' function filters images associated with a guest identified by their unique ID.",
    "inner_function_calls": [],
    "output": {
      "type": "array",
      "description": "Returns an array of filtered images related to the specified guest."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "home.js",
    "method_name": "get",
    "input_params": [
      {
        "type": "string",
        "name": "path",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "function",
        "name": "callback",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "This method defines a route for the HTTP GET request to the root path ('/') of the router. It uses the 'home' controller as the callback function to handle requests to this route.",
    "inner_function_calls": [
      {
        "name": "home",
        "import_path": "../controllers/home.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "This method returns the router itself, allowing for method chaining."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "image.js",
    "method_name": "authorize",
    "input_params": [
      {
        "type": "function",
        "name": "req",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "function",
        "name": "res",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "function",
        "name": "next",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "The authorize function is a middleware that checks if the incoming request has valid authorization. It typically examines the request for authentication tokens and either allows the request to proceed to the next handler or responds with an error if authorization is denied.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "No output is returned from this middleware function; instead, it either passes control to the next middleware or sends a response."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "image.js",
    "method_name": "createImage",
    "input_params": [
      {
        "type": "object",
        "name": "req",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "res",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "The createImage function handles the actual HTTP request to create an image. It processes the incoming request, usually extracting image data from the body, and then interacts with the database or storage to save the image. The response is then constructed based on the outcome of that operation.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "The output usually consists of a response object that indicates the success or failure of the image creation, often including the created image details."
    }
  },
  {
    "folder_path": "src/routes/rbac",
    "module_name": "user.js",
    "method_name": "getAllUsers",
    "input_params": [],
    "logic": "This function retrieves a list of all users from the database using the authorized middleware to ensure the request is from a valid user.",
    "inner_function_calls": [],
    "output": {
      "type": "array",
      "description": "An array containing user objects, which represent each user in the database."
    }
  },
  {
    "folder_path": "src/routes/rbac",
    "module_name": "user.js",
    "method_name": "getUser",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function fetches a specific user from the database based on the provided user ID and ensures that the request is authorized.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An object representing the user corresponding to the provided ID."
    }
  },
  {
    "folder_path": "src/routes/rbac",
    "module_name": "user.js",
    "method_name": "getUserByEmail",
    "input_params": [],
    "logic": "This function retrieves a user from the database using their email address, with authorization middleware to validate the request.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An object representing the user corresponding to the provided email."
    }
  },
  {
    "folder_path": "src/routes/rbac",
    "module_name": "user.js",
    "method_name": "createUser",
    "input_params": [
      {
        "type": "object",
        "name": "userData",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function creates a new user entry in the database after validating and authorizing the request.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An object representing the newly created user."
    }
  },
  {
    "folder_path": "src/routes/rbac",
    "module_name": "user.js",
    "method_name": "createGuestUser",
    "input_params": [],
    "logic": "This function allows the creation of a guest user without requiring an authorization check.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An object representing the newly created guest user."
    }
  },
  {
    "folder_path": "src/routes/rbac",
    "module_name": "user.js",
    "method_name": "updateUser",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "updateData",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function updates specified information for an existing user identified by the provided ID and requires that the request is authorized.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An object representing the updated user information."
    }
  },
  {
    "folder_path": "src/routes/rbac",
    "module_name": "user.js",
    "method_name": "updateCurrentUser",
    "input_params": [
      {
        "type": "object",
        "name": "updateData",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function updates the current logged-in user's information based on the data provided, following the authorization check.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An object representing the updated current user information."
    }
  },
  {
    "folder_path": "src/routes/rbac",
    "module_name": "user.js",
    "method_name": "profileImageFaceCount",
    "input_params": [
      {
        "type": "string",
        "name": "imageId",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function counts the number of faces detected in a profile image using the provided image ID, with authorization middleware in place.",
    "inner_function_calls": [],
    "output": {
      "type": "number",
      "description": "A number representing the count of faces detected in the specified image."
    }
  },
  {
    "folder_path": "src/routes",
    "module_name": "rekognition.js",
    "method_name": "get",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "string",
        "name": "imageId",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "This function registers a route handler for GET requests to the specified path, which includes two URL parameters, albumId and imageId. The request will be authorized using the authorize middleware before being processed by the processImage controller function.",
    "inner_function_calls": [
      {
        "name": "authorize",
        "import_path": "../middlewares/auth.js"
      },
      {
        "name": "processImage",
        "import_path": "../controllers/rekognition.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "An express router object that has the route defined, allowing it to handle GET requests based on provided albumId and imageId parameters."
    }
  },
  {
    "folder_path": "src",
    "module_name": "server.js",
    "method_name": "mongoose.connect",
    "input_params": [
      {
        "type": "string",
        "name": "uri",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "options",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Establish a connection to a MongoDB database using the provided URI and options, which include the database name.",
    "inner_function_calls": [
      {
        "name": "then",
        "import_path": "mongoose"
      },
      {
        "name": "catch",
        "import_path": "mongoose"
      }
    ],
    "output": {
      "type": "Promise",
      "description": "Returns a promise that resolves when the connection is successful and rejects if an error occurs."
    }
  },
  {
    "folder_path": "src",
    "module_name": "server.js",
    "method_name": "app.listen",
    "input_params": [
      {
        "type": "number",
        "name": "port",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "function",
        "name": "callback",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Start the Express server, listening for incoming connections on the specified port, and execute the callback function once the server is running.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "No output; instead, the server will start listening for requests."
    }
  },
  {
    "folder_path": "src",
    "module_name": "server.js",
    "method_name": "console.log",
    "input_params": [
      {
        "type": "string",
        "name": "message",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Log the specified message to the console, useful for debugging or notifying the server startup status.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "No output; it simply logs to the console."
    }
  },
  {
    "folder_path": "src",
    "module_name": "server.js",
    "method_name": "console.error",
    "input_params": [
      {
        "type": "string",
        "name": "message",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "errorMessage",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Log an error message to the console, typically used when an error occurs during the MongoDB connection attempt.",
    "inner_function_calls": [],
    "output": {
      "type": "void",
      "description": "No output; it simply logs the error to the console."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "album.js",
    "method_name": "getAlbums",
    "input_params": [
      {
        "type": "object",
        "name": "filter",
        "is_required": "false",
        "optional_value": "{}"
      },
      {
        "type": "object",
        "name": "project",
        "is_required": "false",
        "optional_value": "{}"
      }
    ],
    "logic": "Retrieves albums from the database based on the provided filter and projection parameters.",
    "inner_function_calls": [
      {
        "name": "Album.find",
        "import_path": "../models/Album.js"
      }
    ],
    "output": {
      "type": "array",
      "description": "An array of album documents matching the filter criteria."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "album.js",
    "method_name": "getAllSharedAlbums",
    "input_params": [
      {
        "type": "string",
        "name": "email",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Fetches all albums that are shared with the specified email address by using aggregation.",
    "inner_function_calls": [],
    "output": {
      "type": "array",
      "description": "An array of albums shared with the specified email."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "album.js",
    "method_name": "getAllAlbums",
    "input_params": [
      {
        "type": "object",
        "name": "user",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Retrieves all albums for a user including count of folders and images, using aggregation.",
    "inner_function_calls": [
      {
        "name": "Album.aggregate",
        "import_path": "../models/Album.js"
      }
    ],
    "output": {
      "type": "array",
      "description": "Returns an array of album documents with folder and image counts."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "album.js",
    "method_name": "getAlbumSharedUsers",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "boolean",
        "name": "withEmbedding",
        "is_required": "false",
        "optional_value": "false"
      }
    ],
    "logic": "Finds users who have access to a particular album identified by its ID, optionally including their embeddings.",
    "inner_function_calls": [
      {
        "name": "Album.aggregate",
        "import_path": "../models/Album.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "An object containing the shared users for the album."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "album.js",
    "method_name": "aiEmbeddingMatch",
    "input_params": [
      {
        "type": "object",
        "name": "userSelfieEmbedding",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "array",
        "name": "allEmbeddings",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "filteredImagesId",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Posts the user selfie embedding to an AI service for matching against all embeddings, and updates the filtered images.",
    "inner_function_calls": [
      {
        "name": "axios.post",
        "import_path": "axios"
      },
      {
        "name": "addFilteredImages",
        "import_path": "./filterImage.js"
      }
    ],
    "output": {
      "type": "void",
      "description": "Does not return a value but updates the filtered images."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "album.js",
    "method_name": "albumFacesMatch",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "userSelfieEmbedding",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "filteredImagesId",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "number",
        "name": "page",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Recursively fetches faces from an album and matches them to the user's selfie embedding, updating filtered images.",
    "inner_function_calls": [
      {
        "name": "getAllFacesByAlbumId",
        "import_path": "./face.js"
      },
      {
        "name": "aiEmbeddingMatch",
        "import_path": "./embedding.js"
      },
      {
        "name": "albumFacesMatch",
        "import_path": ""
      },
      {
        "name": "updatedFilteredImages",
        "import_path": "./filterImage.js"
      }
    ],
    "output": {
      "type": "void",
      "description": "No return value, but ensures filtered images are updated over iterations."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "album.js",
    "method_name": "getAlbumById",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "currentUserEmail",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Fetches an album by its ID, checks ownership and access, and returns relevant data including filtered images.",
    "inner_function_calls": [
      {
        "name": "Album.findById",
        "import_path": "../models/Album.js"
      },
      {
        "name": "User.find",
        "import_path": "../models/rbac/User.js"
      },
      {
        "name": "getFilteredImages",
        "import_path": "./filterImage.js"
      },
      {
        "name": "createFilteredImages",
        "import_path": "./filterImage.js"
      },
      {
        "name": "albumFacesMatch",
        "import_path": ""
      },
      {
        "name": "Album.aggregate",
        "import_path": "../models/Album.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "An object containing album details and associated filtered images."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "album.js",
    "method_name": "filterImages",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "currentUserEmail",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Filters images in the specified album based on matching with the user's embedding and creates a filtered images entry.",
    "inner_function_calls": [
      {
        "name": "User.find",
        "import_path": "../models/rbac/User.js"
      },
      {
        "name": "getAllFacesByAlbumId",
        "import_path": "./face.js"
      },
      {
        "name": "verifyEmbeddings",
        "import_path": "./embedding.js"
      },
      {
        "name": "concatenateAndReduceEmbeddings",
        "import_path": "./embedding.js"
      },
      {
        "name": "createFilteredImages",
        "import_path": "./filterImage.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns the created filtered images object."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "album.js",
    "method_name": "getAlbumOwner",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Fetches the owner of the album by its ID.",
    "inner_function_calls": [
      {
        "name": "Album.findById",
        "import_path": "../models/Album.js"
      }
    ],
    "output": {
      "type": "string",
      "description": "The email of the album owner."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "album.js",
    "method_name": "createAlbum",
    "input_params": [
      {
        "type": "object",
        "name": "data",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "owner",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Creates a new album in the database, including a default folder structure.",
    "inner_function_calls": [
      {
        "name": "Album.save",
        "import_path": "../models/Album.js"
      },
      {
        "name": "createFolder",
        "import_path": "./folder.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns the created album with its default folder ID."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "album.js",
    "method_name": "shareAlbum",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "array",
        "name": "userEmails",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "updatedBy",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Shares an album with specified user emails by updating the share list in the album document.",
    "inner_function_calls": [
      {
        "name": "getUserByEmail",
        "import_path": "./rbac/user.js"
      },
      {
        "name": "Album.findByIdAndUpdate",
        "import_path": "../models/Album.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns the updated album document."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "album.js",
    "method_name": "updateAlbum",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "updatedData",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "updatedBy",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Updates the album details in the database based on the provided updated data.",
    "inner_function_calls": [
      {
        "name": "Album.findByIdAndUpdate",
        "import_path": "../models/Album.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns the updated album document."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "album.js",
    "method_name": "softDelete",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "deletedBy",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Marks an album as deleted without permanently removing it from the database. Updates softDelete field with deletion details.",
    "inner_function_calls": [
      {
        "name": "Album.findByIdAndUpdate",
        "import_path": "../models/Album.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns the updated album document with soft delete information."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "album.js",
    "method_name": "hardDelete",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Permanently deletes an album along with its S3 folder and associated folders from the database.",
    "inner_function_calls": [
      {
        "name": "s3.deleteObject",
        "import_path": ""
      },
      {
        "name": "Folder.find",
        "import_path": "../models/Folder.js"
      },
      {
        "name": "Folder.findByIdAndDelete",
        "import_path": "../models/Folder.js"
      },
      {
        "name": "Album.findByIdAndDelete",
        "import_path": "../models/Album.js"
      }
    ],
    "output": {
      "type": "void",
      "description": "No return value, but ensures complete removal of the album and its resources."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "cluster.js",
    "method_name": "getAlbumClusters",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function retrieves clusters associated with a specific album by its ID. It first retrieves the album from the database based on the given albumId, then aggregates the clusters related to that album, and finally returns an object containing the albumId, the owner's information of the album, and the list of clusters.",
    "inner_function_calls": [
      {
        "name": "Album.findById",
        "import_path": "../models/Album.js"
      },
      {
        "name": "Cluster.aggregate",
        "import_path": "../models/Cluster.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "An object containing the albumId, album owner, and clusters related to the album."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "cluster.js",
    "method_name": "getCluster",
    "input_params": [
      {
        "type": "string",
        "name": "clusterId",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function gets details of a specific cluster identified by its ID. It performs an aggregation query on the Cluster model to match the given clusterId, retrieves the associated album information, and returns the album ID, owner, name, and unique image IDs of the cluster.",
    "inner_function_calls": [
      {
        "name": "Cluster.aggregate",
        "import_path": "../models/Cluster.js"
      },
      {
        "name": "mongoose.Types.ObjectId",
        "import_path": "mongoose"
      }
    ],
    "output": {
      "type": "object",
      "description": "An object representing the details of the cluster including albumId, albumOwner, albumName, and uniqueImageIds."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "cluster.js",
    "method_name": "createCluster",
    "input_params": [
      {
        "type": "object",
        "name": "data",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "faceUpdatedBy",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function creates a new cluster in the database using the provided data. It saves the cluster instance, updates the corresponding face records by marking them as clustered, and returns the ID of the newly created cluster.",
    "inner_function_calls": [
      {
        "name": "Cluster.save",
        "import_path": ""
      },
      {
        "name": "updateFace",
        "import_path": "./face.js"
      }
    ],
    "output": {
      "type": "string",
      "description": "The ID of the newly created cluster as a string."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "cluster.js",
    "method_name": "deleteAlbumClusters",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function deletes all clusters associated with a given albumId. It performs a delete operation on the Cluster model and subsequently updates the face records to set their clustered status to false.",
    "inner_function_calls": [
      {
        "name": "Cluster.deleteMany",
        "import_path": "../models/Cluster.js"
      },
      {
        "name": "Face.updateMany",
        "import_path": "../models/Face.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "An object representing the result of the delete operation for the clusters."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "cognito.js",
    "method_name": "getCognitoToken",
    "input_params": [
      {
        "type": "string",
        "name": "username",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "password",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "The function 'getCognitoToken' takes a username and password to authenticate a user against AWS Cognito and retrieve an authentication token. It constructs the necessary parameters for the AWS Cognito 'initiateAuth' method, which includes the client ID, authentication flow type, and parameters containing the username and password. The function then attempts to call the 'initiateAuth' method and awaits the response. If successful, it returns the response from Cognito. In case of an error, it checks for specific error properties and returns a structured error message.",
    "inner_function_calls": [
      {
        "name": "initiateAuth",
        "import_path": "AWS.CognitoIdentityServiceProvider"
      }
    ],
    "output": {
      "type": "object",
      "description": "The output is either the response object from the AWS Cognito initiateAuth call, which contains the authentication token and other information if successful, or an error object if an error occurs during the authentication process."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "customRecognition.js",
    "method_name": "unprocessedProfileImages",
    "input_params": [],
    "logic": "This function retrieves all users that do not have an embedding defined in their profiles. It specifically queries the User model to find these users and returns their profile image, ID, selfies, and email.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "An array of user objects that include profile images and emails of users without embeddings."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "customRecognition.js",
    "method_name": "unprocessedImages",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function retrieves images that have not been processed. It constructs a filter to find images where the 'isProcessed' field does not exist or is set to false. If an album ID is provided, it adds that to the filter to limit the results accordingly. The function then calls 'getAllImages' to execute the query and return the results.",
    "inner_function_calls": [
      {
        "name": "getAllImages",
        "import_path": "./image.js"
      }
    ],
    "output": {
      "type": "array",
      "description": "An array of unprocessed image objects potentially filtered by the specified album ID."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "customRecognition.js",
    "method_name": "processImage",
    "input_params": [
      {
        "type": "string",
        "name": "imageId",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "updatedBy",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function processes an image by updating its 'isProcessed' field to true. It calls 'updateImage' with the specified image ID and the updates to be made along with information about who updated the image.",
    "inner_function_calls": [
      {
        "name": "updateImage",
        "import_path": "./image.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The updated image object indicating it has been processed."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "customRecognition.js",
    "method_name": "getUnprocessedFaces",
    "input_params": [],
    "logic": "This function retrieves faces that are not matched with any profile images. It queries the Face model to find faces where 'matchedProfileImage' does not exist or is an empty string, returning those results.",
    "inner_function_calls": [
      {
        "name": "getFaces",
        "import_path": "./face.js"
      }
    ],
    "output": {
      "type": "array",
      "description": "An array of face objects without matched profile images."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "customRecognition.js",
    "method_name": "getUnclusteredFaces",
    "input_params": [],
    "logic": "This function retrieves faces that are not clustered. It queries the Face model for faces where the 'clustered' field does not exist or is false.",
    "inner_function_calls": [
      {
        "name": "getFaces",
        "import_path": "./face.js"
      }
    ],
    "output": {
      "type": "array",
      "description": "An array of face objects that are not part of any cluster."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "customRecognition.js",
    "method_name": "reverseImageProcessing",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function reverses the image processing by unsetting the 'isProcessed' field in all images associated with a given album. It also deletes corresponding faces that belong to the specified album. The function calls 'Image.updateMany' and 'Face.deleteMany' for these operations.",
    "inner_function_calls": [
      {
        "name": "Image.updateMany",
        "import_path": "../models/Image.js"
      },
      {
        "name": "Face.deleteMany",
        "import_path": "../models/Face.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "Result object of the image update operation indicating how many documents were modified."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "customRecognition.js",
    "method_name": "matchedFaces",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "profileImageId",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function retrieves faces that are matched with a specific profile image ID within a given album. It queries the Face model for faces with a 'matchedProfileImage' that corresponds to the provided profile image ID and belongs to the specified album.",
    "inner_function_calls": [],
    "output": {
      "type": "array",
      "description": "An array of face objects that match the specified profile image ID within the album."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "customRecognition.js",
    "method_name": "updateUserProfileImageEmbedding",
    "input_params": [
      {
        "type": "string",
        "name": "userId",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "updatedEmbedding",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function updates the embedding of a user's profile image. It first retrieves the user by ID, updates the user's embedding with the new embedding value, and then saves this updated embedding back to the user record in the database.",
    "inner_function_calls": [
      {
        "name": "User.findById",
        "import_path": "../models/rbac/User.js"
      },
      {
        "name": "User.findByIdAndUpdate",
        "import_path": "../models/rbac/User.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The updated user object reflecting the new embedding."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "embedding.js",
    "method_name": "cosineSimilarity",
    "input_params": [
      {
        "type": "Array",
        "name": "embedding1",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "Array",
        "name": "embedding2",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Calculates the cosine similarity score between two face embeddings by computing the dot product and norms of the embeddings, then dividing the dot product by the product of the norms.",
    "inner_function_calls": [
      {
        "name": "dot",
        "import_path": "mathjs"
      },
      {
        "name": "norm",
        "import_path": "mathjs"
      },
      {
        "name": "norm",
        "import_path": "mathjs"
      }
    ],
    "output": {
      "type": "Number",
      "description": "The cosine similarity score between the two face embeddings."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "embedding.js",
    "method_name": "verifyEmbeddings",
    "input_params": [
      {
        "type": "Array",
        "name": "embedding1",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "Array",
        "name": "embedding2",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Verifies if two face embeddings belong to the same person by calculating the cosine similarity and comparing it against a defined threshold from the configuration, returning the verification result and similarity score.",
    "inner_function_calls": [
      {
        "name": "cosineSimilarity",
        "import_path": "."
      }
    ],
    "output": {
      "type": "Object",
      "description": "An object containing the verification result (boolean) and the similarity score."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "embedding.js",
    "method_name": "concatenateAndReduceEmbeddings",
    "input_params": [
      {
        "type": "Array",
        "name": "embeddings",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "Concatenates multiple face embeddings by averaging them and computing the mean of the embeddings, providing a reduced vector representation of the concatenated embeddings.",
    "inner_function_calls": [
      {
        "name": "mean",
        "import_path": "mathjs"
      }
    ],
    "output": {
      "type": "Array",
      "description": "The averaged vector of the concatenated embeddings."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "face.js",
    "method_name": "getAllByAlbumId",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "number",
        "name": "page",
        "is_required": "false",
        "optional_value": "1"
      },
      {
        "type": "number",
        "name": "limit",
        "is_required": "false",
        "optional_value": "1000"
      }
    ],
    "logic": "Fetches all faces belonging to a specific album, applying pagination. It calculates how many faces to skip based on the current page and retrieves a limited number of records from the Face model, along with the total count of faces associated with that album. It also retrieves album details from the Album model and builds a result object containing relevant information.",
    "inner_function_calls": [
      {
        "name": "Face.find",
        "import_path": "../models/Face.js"
      },
      {
        "name": "Face.countDocuments",
        "import_path": "../models/Face.js"
      },
      {
        "name": "Album.findById",
        "import_path": "../models/Album.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "An object containing pagination information, total counts, and related face embeddings for the album."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "face.js",
    "method_name": "getByUniqueFaceId",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "uniqueFaceId",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Retrieves all faces associated with a specific unique face ID and album. It constructs a result object containing the album owner's information, album name, the count of faces retrieved, and arrays for the face IDs and images.",
    "inner_function_calls": [
      {
        "name": "Face.find",
        "import_path": "../models/Face.js"
      },
      {
        "name": "Album.findById",
        "import_path": "../models/Album.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "An object that includes the album's owner, name, and a collection of faces and images related to the unique face ID."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "face.js",
    "method_name": "getFaces",
    "input_params": [
      {
        "type": "object",
        "name": "filter",
        "is_required": "false",
        "optional_value": "{}"
      },
      {
        "type": "object",
        "name": "project",
        "is_required": "false",
        "optional_value": "{}"
      }
    ],
    "logic": "Fetches and returns faces from the Face model based on the provided filter and projection parameters.",
    "inner_function_calls": [
      {
        "name": "Face.find",
        "import_path": "../models/Face.js"
      }
    ],
    "output": {
      "type": "array",
      "description": "An array of face objects that match the filter criteria."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "face.js",
    "method_name": "getUnprocessedAlbumFaces",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Retrieves faces that belong to an album and have unprocessed embeddings by executing an aggregation query.",
    "inner_function_calls": [
      {
        "name": "Face.aggregate",
        "import_path": "../models/Face.js"
      }
    ],
    "output": {
      "type": "array",
      "description": "An array of faces that have embeddings which exist in the album corresponding to the given album ID."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "face.js",
    "method_name": "getUnclusteredAlbumFaces",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Retrieves faces that belong to an album and are not clustered by executing a MongoDB aggregation query.",
    "inner_function_calls": [
      {
        "name": "Face.aggregate",
        "import_path": "../models/Face.js"
      }
    ],
    "output": {
      "type": "array",
      "description": "An array of faces that are either not clustered or do not have clustering information."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "face.js",
    "method_name": "createFace",
    "input_params": [
      {
        "type": "object",
        "name": "data",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Creates a new face entry in the database using the provided data, which includes album ID, owner, image ID, and other attributes. It saves the new face and returns its ID.",
    "inner_function_calls": [
      {
        "name": "Face.save",
        "import_path": "../models/Face.js"
      }
    ],
    "output": {
      "type": "string",
      "description": "The ID of the newly created face as a string."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "face.js",
    "method_name": "createManyFaces",
    "input_params": [
      {
        "type": "object",
        "name": "data",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Creates multiple face entries by mapping over the provided embeddings and inserting them into the database in bulk. Returns the result of the insert operation.",
    "inner_function_calls": [
      {
        "name": "Face.insertMany",
        "import_path": "../models/Face.js"
      }
    ],
    "output": {
      "type": "array",
      "description": "An array of the inserted face documents."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "face.js",
    "method_name": "updateFace",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "updatedData",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "updatedBy",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Updates an existing face in the database by its ID with provided updated data and the information of who updated it. The new setting is returned.",
    "inner_function_calls": [
      {
        "name": "Face.findByIdAndUpdate",
        "import_path": "../models/Face.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The updated face document."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "face.js",
    "method_name": "updateMatch",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "matchedProfileImage",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "number",
        "name": "similarityScore",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "updatedBy",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Updates a face's match details, specifically the profile image and similarity score, while recording who made the update. The new document is returned.",
    "inner_function_calls": [
      {
        "name": "Face.findByIdAndUpdate",
        "import_path": "../models/Face.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The updated face document reflecting the match update."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "face.js",
    "method_name": "groupByRekognition",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Groups faces by their recognition similarity by comparing each face against others in the album and collects them into unique groups. Returns a structure that indicates which faces belong to which groups.",
    "inner_function_calls": [
      {
        "name": "Face.find",
        "import_path": "../models/Face.js"
      },
      {
        "name": "Album.findById",
        "import_path": "../models/Album.js"
      },
      {
        "name": "compareFaces",
        "import_path": "./rekognition.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "An object mapping unique face IDs to arrays of similar face IDs."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "face.js",
    "method_name": "filterByFace",
    "input_params": [
      {
        "type": "string",
        "name": "guestId",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "albumId",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Filters faces based on the guest's image and generates a result set which includes matched faces and images. It sends an email notification upon successful filtering.",
    "inner_function_calls": [
      {
        "name": "Guest.findById",
        "import_path": "../models/Guest.js"
      },
      {
        "name": "Album.findById",
        "import_path": "../models/Album.js"
      },
      {
        "name": "Face.find",
        "import_path": "../models/Face.js"
      },
      {
        "name": "compareFaces",
        "import_path": "./rekognition.js"
      },
      {
        "name": "Guest.findByIdAndUpdate",
        "import_path": "../models/Guest.js"
      },
      {
        "name": "sendEmail",
        "import_path": "./ses.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "An object containing the album name, owner, and lists of matched groups of faces and images."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "filterImage.js",
    "method_name": "getFilteredImages",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "userId",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function retrieves filtered images from the database by searching for records that match the provided albumId and userId. It waits for the asynchronous `find` operation to complete and returns the first record found or an empty object if none exist.",
    "inner_function_calls": [
      {
        "name": "find",
        "import_path": "../models/FilteredImages.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "An object representing the first filtered image record retrieved from the database or an empty object if none were found."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "filterImage.js",
    "method_name": "getAlbumUnprocessedFilteredImages",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function aggregates filtered images from the database where the albumId matches and images are not processed. It uses the `aggregate` function with a matching condition for the albumId and a flag for isProcessed set to false.",
    "inner_function_calls": [
      {
        "name": "aggregate",
        "import_path": "../models/FilteredImages.js"
      }
    ],
    "output": {
      "type": "array",
      "description": "An array of filtered images that match the provided albumId and that are marked as unprocessed."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "filterImage.js",
    "method_name": "createFilteredImages",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "userId",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "array",
        "name": "images",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function creates a new filtered image document in the database. It constructs a new instance of `FilteredImages` with the provided albumId, userId, and images, then saves it to the database asynchronously.",
    "inner_function_calls": [
      {
        "name": "save",
        "import_path": "../models/FilteredImages.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The newly created filtered images document as saved in the database."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "filterImage.js",
    "method_name": "updatedFilteredImages",
    "input_params": [
      {
        "type": "string",
        "name": "filteredImagesId",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "updatedData",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function updates an existing filtered image record in the database using the provided filteredImagesId. It utilizes `findByIdAndUpdate` to update the record with new data, ensuring the response returns the updated record.",
    "inner_function_calls": [
      {
        "name": "findByIdAndUpdate",
        "import_path": "../models/FilteredImages.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The updated filtered images document after modification."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "filterImage.js",
    "method_name": "addFilteredImages",
    "input_params": [
      {
        "type": "string",
        "name": "filteredImagesId",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "array",
        "name": "images",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function adds new images to an existing filtered image document in the database. It uses `findByIdAndUpdate` to perform a `$addToSet` operation, allowing multiple images to be added without duplicates, returning the updated record afterwards.",
    "inner_function_calls": [
      {
        "name": "findByIdAndUpdate",
        "import_path": "../models/FilteredImages.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The filtered images document after new images have been added."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "folder.js",
    "method_name": "getAllAlbumFolders",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Retrieves all folders associated with a specific album identified by albumId, excluding the 'images' field from the results.",
    "inner_function_calls": [
      {
        "name": "Folder.find",
        "import_path": "../models/Folder.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "An array of folder objects associated with the specified album."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "folder.js",
    "method_name": "getFolder",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "userEmail",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Fetches a folder by its ID, checks if the userEmail is either the owner or collaborator of the folder's album, and retrieves the folder's images formatted according to ownership permissions.",
    "inner_function_calls": [
      {
        "name": "Folder.aggregate",
        "import_path": "../models/Folder.js"
      },
      {
        "name": "new mongoose.Types.ObjectId",
        "import_path": "mongoose"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns the folder object with formatted images and total image count, or an unauthorized message if the user does not have access."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "folder.js",
    "method_name": "getFilteredImages",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "sharedUserEmail",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "userEmail",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Retrieves filtered images from a specific folder by ID, checks if the images are shareable with the provided sharedUserEmail, and returns the filtered list based on a matched profile image.",
    "inner_function_calls": [
      {
        "name": "Folder.findById",
        "import_path": "../models/Folder.js"
      },
      {
        "name": "User.findOne",
        "import_path": "../models/rbac/User.js"
      },
      {
        "name": "Face.aggregate",
        "import_path": "../models/Face.js"
      }
    ],
    "output": {
      "type": "array",
      "description": "An array of image IDs that match the filter criteria."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "folder.js",
    "method_name": "addImages",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "array",
        "name": "images",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "userEmail",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Adds images to a folder under the user's email as a key in the folder's images object. Uses $addToSet to ensure uniqueness.",
    "inner_function_calls": [
      {
        "name": "Folder.updateOne",
        "import_path": "../models/Folder.js"
      },
      {
        "name": "new mongoose.Types.ObjectId",
        "import_path": "mongoose"
      }
    ],
    "output": {
      "type": "string",
      "description": "Returns the message 'added!' to confirm the operation."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "folder.js",
    "method_name": "createFolder",
    "input_params": [
      {
        "type": "object",
        "name": "folderData",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "createdBy",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Creates a new folder document in the database based on the provided folder data and assigns a creator.",
    "inner_function_calls": [
      {
        "name": "Folder.save",
        "import_path": "../models/Folder.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns the created folder object."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "folder.js",
    "method_name": "updateFolder",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "updatedData",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "updatedBy",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Updates an existing folder's details based on the provided ID and updated data, recording who made the update.",
    "inner_function_calls": [
      {
        "name": "Folder.updateOne",
        "import_path": "../models/Folder.js"
      },
      {
        "name": "new mongoose.Types.ObjectId",
        "import_path": "mongoose"
      }
    ],
    "output": {
      "type": "object",
      "description": "The output is the result of the update operation; does not return data from the folder."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "folder.js",
    "method_name": "deleteImages",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "array",
        "name": "images",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "ownerEmail",
        "is_required": "",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "albumId",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Removes specific images from a folder for a given ownerEmail and updates the S3 storage by deleting images from a specified bucket.",
    "inner_function_calls": [
      {
        "name": "Folder.updateOne",
        "import_path": "../models/Folder.js"
      },
      {
        "name": "s3.deleteObject",
        "import_path": "aws-sdk"
      }
    ],
    "output": {
      "type": "string",
      "description": "Returns a confirmation message stating how many images were deleted."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "folder.js",
    "method_name": "deleteFolder",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "Deletes a folder from the database and removes any images associated with it from S3, if any exist. Ensures that resources are cleaned up.",
    "inner_function_calls": [
      {
        "name": "Folder.findById",
        "import_path": "../models/Folder.js"
      },
      {
        "name": "Album.findById",
        "import_path": "../models/Album.js"
      },
      {
        "name": "deleteImages",
        "import_path": ""
      },
      {
        "name": "Folder.findByIdAndDelete",
        "import_path": "../models/Folder.js"
      }
    ],
    "output": {
      "type": "string",
      "description": "Returns the message 'deleted!' to confirm that the folder has been removed."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "guest.js",
    "method_name": "createGuest",
    "input_params": [
      {
        "type": "object",
        "name": "data",
        "is_required": "",
        "optional_value": ""
      }
    ],
    "logic": "The createGuest function creates a new Guest document in the MongoDB database using the mongoose library. It initializes a Guest instance with properties derived from the 'data' parameter and saves it to the database, then returns the saved instance.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns the newly created Guest object."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "guest.js",
    "method_name": "getGuestById",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "The getGuestById function retrieves a Guest document by its ID from the MongoDB database. It constructs an aggregation pipeline that matches the guest's ID, performs a lookup to join with the Album collection, unwinds the result, and formats the output before returning the guest object or undefined if not found.",
    "inner_function_calls": [
      {
        "name": "new mongoose.Types.ObjectId",
        "import_path": "mongoose"
      },
      {
        "name": "Guest.aggregate",
        "import_path": "../models/Guest.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns the Guest object corresponding to the provided ID or undefined if not found."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "guest.js",
    "method_name": "filterImages",
    "input_params": [
      {
        "type": "string",
        "name": "guestId",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "The filterImages function filters images associated with a specific guest ID. It checks whether the guest is already filtered. If not, it finds matching guests in the same album, compares faces with each, and collects filtered images. Additionally, it retrieves images from an S3 bucket until all images are processed, performs face comparisons, and updates the guest's filtered images before returning the results.",
    "inner_function_calls": [
      {
        "name": "Guest.findById",
        "import_path": "../models/Guest.js"
      },
      {
        "name": "Guest.find",
        "import_path": "../models/Guest.js"
      },
      {
        "name": "compareFaces",
        "import_path": "./rekognition.js"
      },
      {
        "name": "Album.findById",
        "import_path": "../models/Album.js"
      },
      {
        "name": "listObjectsFromS3",
        "import_path": "./s3.js"
      },
      {
        "name": "Guest.findByIdAndUpdate",
        "import_path": "../models/Guest.js"
      }
    ],
    "output": {
      "type": "array",
      "description": "Returns an array of filtered image UUID keys."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "image.js",
    "method_name": "createImage",
    "input_params": [
      {
        "type": "object",
        "name": "imageData",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "string",
        "name": "createdBy",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "The function creates a new image by taking image data (containing album ID, folder ID, and image ID) and the creator's identifier. It creates a new Image instance with the provided data, saves it to the database, and returns the ID of the created image as a string.",
    "inner_function_calls": [
      {
        "name": "Image",
        "import_path": "../models/Image.js"
      },
      {
        "name": "image.save",
        "import_path": "../models/Image.js"
      }
    ],
    "output": {
      "type": "string",
      "description": "The ID of the created image represented as a string"
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "image.js",
    "method_name": "getAllUnprocessedImages",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "This function retrieves all images that have not been processed, optionally filtered by album ID. It builds a MongoDB aggregation pipeline to match unprocessed images and populate related album information.",
    "inner_function_calls": [
      {
        "name": "Image.aggregate",
        "import_path": "../models/Image.js"
      }
    ],
    "output": {
      "type": "array",
      "description": "An array of unprocessed images with their properties including image ID, album ID, and album owner."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "image.js",
    "method_name": "getAllImages",
    "input_params": [
      {
        "type": "object",
        "name": "filter",
        "is_required": "",
        "optional_value": "{}"
      },
      {
        "type": "object",
        "name": "project",
        "is_required": "",
        "optional_value": "{}"
      }
    ],
    "logic": "This function retrieves all images from the database according to an optional filter and projection, allowing the caller to specify criteria for filtering results and selecting specific fields.",
    "inner_function_calls": [
      {
        "name": "Image.find",
        "import_path": "../models/Image.js"
      }
    ],
    "output": {
      "type": "array",
      "description": "An array of images matching the provided filter and projection."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "image.js",
    "method_name": "getImage",
    "input_params": [
      {
        "type": "string",
        "name": "imageId",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "project",
        "is_required": "",
        "optional_value": "{}"
      }
    ],
    "logic": "This function retrieves a single image based on its image ID. It returns the first image matching the criteria, or an empty object if no matches are found.",
    "inner_function_calls": [
      {
        "name": "Image.find",
        "import_path": "../models/Image.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "An object representing the retrieved image, or an empty object if no image is found."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "image.js",
    "method_name": "updateImage",
    "input_params": [
      {
        "type": "string",
        "name": "imageId",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "object",
        "name": "updatedData",
        "is_required": "",
        "optional_value": "undefined"
      },
      {
        "type": "string",
        "name": "updatedBy",
        "is_required": "",
        "optional_value": "undefined"
      }
    ],
    "logic": "This function updates an existing image in the database by its image ID, applying the provided updates along with the identifier of the user who made the update.",
    "inner_function_calls": [
      {
        "name": "Image.updateOne",
        "import_path": "../models/Image.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "The result of the update operation, typically including information about the modification status."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "imageCustom.js",
    "method_name": "createImage",
    "input_params": [
      {
        "type": "object",
        "name": "imageData",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "The function createImage is responsible for creating and saving a new image instance using the ImageCustom model. It takes an object containing image properties such as albumId, imageId, faces, and createdBy. After destructuring these properties from the input imageData, it initializes a new instance of ImageCustom with these values and calls the save method on this instance to persist it in the database.",
    "inner_function_calls": [
      {
        "name": "image.save",
        "import_path": "../models/ImageCustom.js"
      }
    ],
    "output": {
      "type": "undefined",
      "description": "The function does not explicitly return a value; it performs an asynchronous operation to save the image."
    }
  },
  {
    "folder_path": "src/services/rbac",
    "module_name": "role.js",
    "method_name": "getAllRoles",
    "input_params": [],
    "logic": "This function retrieves all roles from the database using the Role model's 'find' method. It is an asynchronous function that returns a promise containing an array of role objects.",
    "inner_function_calls": [
      {
        "name": "find",
        "import_path": "../../models/rbac/Role.js"
      }
    ],
    "output": {
      "type": "array",
      "description": "An array of role objects retrieved from the database."
    }
  },
  {
    "folder_path": "src/services/rbac",
    "module_name": "role.js",
    "method_name": "getRoleByName",
    "input_params": [
      {
        "type": "string",
        "name": "name",
        "is_required": "",
        "optional_value": "null"
      }
    ],
    "logic": "This function retrieves a single role from the database by its name using the Role model's 'findOne' method. It is an asynchronous function that returns a promise containing a role object if found, or null if not found.",
    "inner_function_calls": [
      {
        "name": "findOne",
        "import_path": "../../models/rbac/Role.js"
      }
    ],
    "output": {
      "type": "object",
      "description": "A role object retrieved from the database by the specified name, or null if no role is found."
    }
  },
  {
    "folder_path": "src/services/rbac",
    "module_name": "user.js",
    "method_name": "getAllUsers",
    "input_params": [
      {
        "type": "object",
        "name": "filter",
        "is_required": "false",
        "optional_value": "{}"
      },
      {
        "type": "object",
        "name": "project",
        "is_required": "false",
        "optional_value": "{}"
      }
    ],
    "logic": "This function retrieves all user records from the database that match the specified filter criteria. It uses the User model's find method, excluding the 'embedding' field from the projected result.",
    "inner_function_calls": [
      {
        "name": "User.find",
        "import_path": "../../models/rbac/User.js"
      }
    ],
    "output": {
      "type": "Promise",
      "description": "A promise that resolves to an array of user records that match the filter criteria."
    }
  },
  {
    "folder_path": "src/services/rbac",
    "module_name": "user.js",
    "method_name": "getUser",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function retrieves a specific user from the database using their unique identifier (id) by calling the User model's findById method.",
    "inner_function_calls": [
      {
        "name": "User.findById",
        "import_path": "../../models/rbac/User.js"
      }
    ],
    "output": {
      "type": "Promise",
      "description": "A promise that resolves to a user record corresponding to the provided id."
    }
  },
  {
    "folder_path": "src/services/rbac",
    "module_name": "user.js",
    "method_name": "getUserByEmail",
    "input_params": [
      {
        "type": "string",
        "name": "email",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function fetches a user record from the database based on the provided email address using the User model's findOne method. The embedding field is excluded from the result.",
    "inner_function_calls": [
      {
        "name": "User.findOne",
        "import_path": "../../models/rbac/User.js"
      }
    ],
    "output": {
      "type": "Promise",
      "description": "A promise that resolves to a user record that corresponds to the provided email, or null if no user is found."
    }
  },
  {
    "folder_path": "src/services/rbac",
    "module_name": "user.js",
    "method_name": "createUser",
    "input_params": [
      {
        "type": "object",
        "name": "user",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "createdBy",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function creates a new user record in the database. It initializes a new User instance with properties from the 'user' object and the creator's identity.",
    "inner_function_calls": [
      {
        "name": "User.save",
        "import_path": "../../models/rbac/User.js"
      }
    ],
    "output": {
      "type": "Promise",
      "description": "A promise that resolves to the newly created user record."
    }
  },
  {
    "folder_path": "src/services/rbac",
    "module_name": "user.js",
    "method_name": "createGuestUser",
    "input_params": [],
    "logic": "This function creates a guest user record with a default name of 'guest'. It generates a guest email using the user ID and assigns it to the new user before saving it to the database.",
    "inner_function_calls": [
      {
        "name": "User.save",
        "import_path": "../../models/rbac/User.js"
      }
    ],
    "output": {
      "type": "Promise",
      "description": "A promise that resolves to the newly created guest user record."
    }
  },
  {
    "folder_path": "src/services/rbac",
    "module_name": "user.js",
    "method_name": "generateUserProfileImageEmbedding",
    "input_params": [
      {
        "type": "string",
        "name": "userId",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function sends an HTTP PUT request to an external service to process a user's profile image by passing the user's ID in the request URL. If an error occurs during the request, it logs the error.",
    "inner_function_calls": [
      {
        "name": "axios.put",
        "import_path": "axios"
      }
    ],
    "output": {
      "type": "Promise",
      "description": "A promise that resolves once the request is completed, regardless of whether it was successful or resulted in an error."
    }
  },
  {
    "folder_path": "src/services/rbac",
    "module_name": "user.js",
    "method_name": "updateUser",
    "input_params": [
      {
        "type": "string",
        "name": "id",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "updatedData",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "updatedBy",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function updates an existing user record in the database with the provided updated data. If the updated data includes a profile image, it generates an embedding using the user's ID before updating the record.",
    "inner_function_calls": [
      {
        "name": "generateUserProfileImageEmbedding",
        "import_path": "./path/to/file"
      },
      {
        "name": "User.findByIdAndUpdate",
        "import_path": "../../models/rbac/User.js"
      }
    ],
    "output": {
      "type": "Promise",
      "description": "A promise that resolves to the updated user record."
    }
  },
  {
    "folder_path": "src/services/rbac",
    "module_name": "user.js",
    "method_name": "updateUserByEmail",
    "input_params": [
      {
        "type": "string",
        "name": "email",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "updatedData",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "updatedBy",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function updates a user record in the database by email. If the user does not exist, it creates a new user. If the updated data includes a profile image, it generates an embedding for it.",
    "inner_function_calls": [
      {
        "name": "User.findOneAndUpdate",
        "import_path": "../../models/rbac/User.js"
      },
      {
        "name": "createUser",
        "import_path": "./path/to/file"
      },
      {
        "name": "generateUserProfileImageEmbedding",
        "import_path": "./path/to/file"
      }
    ],
    "output": {
      "type": "Promise",
      "description": "A promise that resolves to the updated user record or the newly created user record if it did not exist."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "rekognition.js",
    "method_name": "compareFaces",
    "input_params": [
      {
        "type": "string",
        "name": "sourceImageKey",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "targetImageKey",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function compares two faces using the AWS Rekognition service by providing source and target image keys from an S3 bucket and returns the matches.",
    "inner_function_calls": [
      {
        "name": "rekognition.compareFaces",
        "import_path": "aws-sdk"
      }
    ],
    "output": {
      "type": "array",
      "description": "Returns an array of face matches, or undefined if an error occurs."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "rekognition.js",
    "method_name": "createCollection",
    "input_params": [
      {
        "type": "string",
        "name": "collectionId",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function creates a new collection in AWS Rekognition with the specified collection ID.",
    "inner_function_calls": [
      {
        "name": "rekognition.createCollection",
        "import_path": "aws-sdk"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns the result of the create collection operation."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "rekognition.js",
    "method_name": "listFaces",
    "input_params": [
      {
        "type": "string",
        "name": "collectionId",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function lists the faces in a specified collection using AWS Rekognition.",
    "inner_function_calls": [
      {
        "name": "rekognition.listFaces",
        "import_path": "aws-sdk"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns the result of the list faces operation."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "rekognition.js",
    "method_name": "indexProfileImage",
    "input_params": [
      {
        "type": "string",
        "name": "userProfileImage",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "userEmail",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "This function indexes a user's profile image into all albums the user has been shared with, by first retrieving shared albums and then calling indexFaces for each album.",
    "inner_function_calls": [
      {
        "name": "getAllSharedAlbums",
        "import_path": "./album.js"
      },
      {
        "name": "indexFaces",
        "import_path": "./image.js"
      }
    ],
    "output": {
      "type": "undefined",
      "description": "There is no return value, the function performs indexing as a side effect."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "rekognition.js",
    "method_name": "indexFaces",
    "input_params": [
      {
        "type": "string",
        "name": "collectionId",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "imageId",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "imageKey",
        "is_required": "false",
        "optional_value": ""
      }
    ],
    "logic": "Indexes a face from an image in the specified collection, using the face's image key or a default path if no key is provided.",
    "inner_function_calls": [
      {
        "name": "rekognition.indexFaces",
        "import_path": "aws-sdk"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns the result of the index faces operation."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "rekognition.js",
    "method_name": "ensureCollectionExists",
    "input_params": [
      {
        "type": "string",
        "name": "collectionId",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Checks if a specified collection exists by attempting to describe it. If it doesn't exist, it creates the collection.",
    "inner_function_calls": [
      {
        "name": "rekognition.describeCollection",
        "import_path": "aws-sdk"
      },
      {
        "name": "createCollection",
        "import_path": "./image.js"
      }
    ],
    "output": {
      "type": "undefined",
      "description": "There is no return value, but it may create a collection if it did not previously exist."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "rekognition.js",
    "method_name": "detectFaces",
    "input_params": [
      {
        "type": "string",
        "name": "imageKey",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Detects faces in an image using AWS Rekognition and returns the details of the detected faces.",
    "inner_function_calls": [
      {
        "name": "rekognition.detectFaces",
        "import_path": "aws-sdk"
      }
    ],
    "output": {
      "type": "array",
      "description": "Returns an array of face details detected in the image."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "rekognition.js",
    "method_name": "getS3Image",
    "input_params": [
      {
        "type": "string",
        "name": "imageKey",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Retrieves an image from an S3 bucket based on the provided image key.",
    "inner_function_calls": [
      {
        "name": "s3.getObject",
        "import_path": "aws-sdk"
      }
    ],
    "output": {
      "type": "Buffer",
      "description": "Returns the raw image buffer from S3."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "rekognition.js",
    "method_name": "cropFace",
    "input_params": [
      {
        "type": "Buffer",
        "name": "imageBuffer",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "object",
        "name": "boundingBox",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Crops a face from a given image buffer using the bounding box coordinates and returns the cropped face as a buffer.",
    "inner_function_calls": [
      {
        "name": "sharp",
        "import_path": "sharp"
      },
      {
        "name": "image.metadata",
        "import_path": "sharp"
      },
      {
        "name": "image.extract",
        "import_path": "sharp"
      }
    ],
    "output": {
      "type": "Buffer",
      "description": "Returns the cropped face as a buffer."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "rekognition.js",
    "method_name": "searchFaces",
    "input_params": [
      {
        "type": "string",
        "name": "collectionId",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "Buffer",
        "name": "croppedFaceBuffer",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "number",
        "name": "maxFaces",
        "is_required": "false",
        "optional_value": "config.max_face_search"
      },
      {
        "type": "number",
        "name": "faceMatchThreshold",
        "is_required": "false",
        "optional_value": "config.face_match_threshold"
      }
    ],
    "logic": "Searches for faces in a collection using the provided cropped face buffer, with options to limit the number of results and set a match threshold.",
    "inner_function_calls": [
      {
        "name": "rekognition.searchFacesByImage",
        "import_path": "aws-sdk"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns the result of the face search operation."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "rekognition.js",
    "method_name": "processImage",
    "input_params": [
      {
        "type": "string",
        "name": "albumId",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "imageId",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "createdBy",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "Processes an image by detecting faces, cropping them, and searching for matches in the participants collection before creating an associated image record.",
    "inner_function_calls": [
      {
        "name": "Album.findById",
        "import_path": "../models/Album.js"
      },
      {
        "name": "detectFaces",
        "import_path": "./image.js"
      },
      {
        "name": "getS3Image",
        "import_path": "./image.js"
      },
      {
        "name": "cropFace",
        "import_path": "./image.js"
      },
      {
        "name": "searchFaces",
        "import_path": "./image.js"
      },
      {
        "name": "createImage",
        "import_path": "./image.js"
      }
    ],
    "output": {
      "type": "undefined",
      "description": "There is no return value, but it creates an image record based on processed faces."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "s3.js",
    "method_name": "listObjectsFromS3",
    "input_params": [
      {
        "type": "string",
        "name": "Prefix",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "ContinuationToken",
        "is_required": "false",
        "optional_value": "null"
      },
      {
        "type": "number",
        "name": "MaxKeys",
        "is_required": "false",
        "optional_value": "100"
      }
    ],
    "logic": "This function lists objects in an Amazon S3 bucket based on the specified prefix and optional continuation token. It prepares the parameters needed to call the AWS S3 API method `listObjectsV2`, then retrieves the list of objects and returns the result.",
    "inner_function_calls": [
      {
        "name": "listObjectsV2",
        "import_path": "aws-sdk"
      }
    ],
    "output": {
      "type": "object",
      "description": "The output is an object containing the result of the S3 listObjectsV2 API call, which includes details about the objects in the specified bucket and prefix."
    }
  },
  {
    "folder_path": "src/services",
    "module_name": "ses.js",
    "method_name": "sendEmail",
    "input_params": [
      {
        "type": "string",
        "name": "emailAddress",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "subject",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "body",
        "is_required": "true",
        "optional_value": "null"
      },
      {
        "type": "string",
        "name": "sourceSubDomain",
        "is_required": "false",
        "optional_value": "api"
      }
    ],
    "logic": "This function sends an email using AWS Simple Email Service (SES). It constructs an email message using the provided parameters and attempts to send it. If the sending is successful, it returns the MessageId of the email. In case of failure, it logs an error to the console.",
    "inner_function_calls": [
      {
        "name": "sendEmail",
        "import_path": "aws-sdk"
      }
    ],
    "output": {
      "type": "string",
      "description": "The MessageId of the sent email if successful; undefined if there was an error during sending."
    }
  },
  {
    "folder_path": "src/utils",
    "module_name": "logger.js",
    "method_name": "createLogger",
    "input_params": [
      {
        "type": "object",
        "name": "options",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "The createLogger function from the winston library is used to create a new logger instance configured with specified options such as logging level, format, and transports.",
    "inner_function_calls": [
      {
        "name": "format.combine",
        "import_path": "winston"
      },
      {
        "name": "format.timestamp",
        "import_path": "winston"
      },
      {
        "name": "format.json",
        "import_path": "winston"
      },
      {
        "name": "new transports.Console",
        "import_path": "winston"
      },
      {
        "name": "new transports.File",
        "import_path": "winston"
      }
    ],
    "output": {
      "type": "object",
      "description": "Returns a configured logger instance that can be used to log messages with the defined settings."
    }
  },
  {
    "folder_path": "src/utils",
    "module_name": "logger.js",
    "method_name": "transports.Console",
    "input_params": [
      {
        "type": "object",
        "name": "options",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "The Console transport is a method from the transports module of the winston library that allows log messages to be output to the console.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns an instance of Console transport that can be added to the logger's transports."
    }
  },
  {
    "folder_path": "src/utils",
    "module_name": "logger.js",
    "method_name": "transports.File",
    "input_params": [
      {
        "type": "object",
        "name": "options",
        "is_required": "true",
        "optional_value": "null"
      }
    ],
    "logic": "The File transport is a method from the transports module of the winston library that allows log messages to be written to a specified file.",
    "inner_function_calls": [],
    "output": {
      "type": "object",
      "description": "Returns an instance of File transport that can be added to the logger's transports."
    }
  }
]